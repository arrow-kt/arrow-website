<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Arrow Blog</title>
        <link>https://arrow-kt.io/community/blog/</link>
        <description>Arrow Blog</description>
        <lastBuildDate>Sat, 01 Nov 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Arrow 2.2.0]]></title>
            <link>https://arrow-kt.io/community/blog/2025/11/01/arrow-2-2/</link>
            <guid>https://arrow-kt.io/community/blog/2025/11/01/arrow-2-2/</guid>
            <pubDate>Sat, 01 Nov 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Arrow 2.2.0 is out, with improved and new functionality.]]></description>
            <content:encoded><![CDATA[<p>Arrow 2.2.0 is out, with improved and new functionality.
This release builds on top of several <a href="https://kotlinlang.org/docs/whatsnew22.html" target="_blank" rel="noopener noreferrer">new features in Kotlin 2.2</a>,
in its self-imposed role of <em>perfect companion for your Kotlin journey</em>.</p>
<p><strong><code>Raise</code> with context parameters.</strong>
The new package <code>arrow.core.raise.context</code> provides the same API as <code>arrow.core.raise</code>,
but using context parameters instead of extension functions.
This package is intended to be a full 1-1 replacement the extension-based API.</p>
<p>Unfortunately, currently mixing <code>Raise</code> functions using extension-style and
context-style doesn't lead to the better experience. Our advice is to fully migrate
to the context-style API if possible, or stay completely within the extension style.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token comment" style="color:#6b738a">// extension-style</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#82a2f3">fun</span><span class="token plain"> Raise</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">PersonValidationError</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">buildPerson</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> String</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> age</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Person </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">..</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token comment" style="color:#6b738a">// context-style, "fake" constructor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token function" style="color:#EDB368">context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">Raise</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">PersonValidationError</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#82a2f3">fun</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">Person</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> String</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> age</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Person </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">..</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M12 23c6.075 0 11-4.925 11-11S18.075 1 12 1 1 5.925 1 12s4.925 11 11 11M9 11.5h2v4H9v2h6v-2h-2v-6H9zM13 8V6h-2v2z" clip-rule="evenodd"></path></svg></span>Enabling context parameters</div><div class="admonitionContent_BuS1"><p>In order to define functions with context parameters, you need to enable the
corresponding language feature, as described in the
<a href="https://kotlinlang.org/docs/whatsnew22.html#preview-of-context-parameters" target="_blank" rel="noopener noreferrer">Kotlin documentation</a>.</p></div></div>
<p><strong>New <code>Racing</code> DSL for concurrency.</strong>
Arrow Fx provides high-level concurrency combinators
to succinctly describe how tasks should be interleaved in a computation.
Albeit useful, those combinators require nesting and writing your code in a
particular way. In Arrow 2.2.0 we introduce a new
<a href="https://arrow-kt.io/learn/coroutines/racing/#racing-dsl-experimental"><code>Racing</code> DSL</a>.
Combined with the already existing
<a href="https://arrow-kt.io/learn/coroutines/parallel/#await-all--parallelism-experimental"><code>AwaitAll</code> DSL</a>,
you can write your coroutines code with little to no changes, while using as
much concurrency as possible during execution.</p>
<p><strong><code>validate</code> for error values.</strong>
We have introduced a small utility function to bridge the world of validation functions
working on <code>Raise</code>, and chained style using <code>Either</code> or <code>Option</code>. This function is
called <code>validate</code>, and it should be commonly used in conjunction with <code>ensure</code> and similar functions.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#82a2f3">fun</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">failOnMoreConditionsWithBindMap</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Either</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">String</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Int</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">randomNumber</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">validate</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">ensure</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">it </span><span class="token operator" style="color:rgb(212, 212, 212)">!=</span><span class="token plain"> </span><span class="token number" style="color:#cfcd9a">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token string-literal singleline string" style="color:#5B88F8">"Number 10 also not allowed"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">map</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> it </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:#cfcd9a">100</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This new function provides no functionality you could not get before.
For example, here is the code equivalent to the one above, but using the <code>Either</code> DSL.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#82a2f3">fun</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">failOnMoreConditionsWithBindMap</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Either</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">String</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Int</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> either </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> random </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">randomNumber</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">bind</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">ensure</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random </span><span class="token operator" style="color:rgb(212, 212, 212)">!=</span><span class="token plain"> </span><span class="token number" style="color:#cfcd9a">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token string-literal singleline string" style="color:#5B88F8">"Number 10 also not allowed"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    random </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:#cfcd9a">100</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We acknowledge that the chain-of-calls style is a common one, and we want the Arrow API
to appeal to users using their preferred style.</p>
<p><strong>"At most once" for <code>Eval</code>.</strong>
Arrow provides the <code>Eval</code> type for <a href="https://arrow-kt.io/learn/collections-functions/eval/">fine-grained control over evaluation</a>.
This is similar to <code>lazy</code> in the standard library, but you can choose
between eager, lazy, and repeated (computed every time) evaluation strategies.
However, there was no (easy) way to ensure that a computation was evaluated
at most once.</p>
<p>The new <code>Eval.atMostOnce</code> function (alongside <code>SuspendEval.atMostOnce</code>)
provides this new behavior. You should be aware, though, that this means
that getting the value of an <code>Eval</code> built this way may block (or suspend)
if more than one thread does so concurrently.</p>
<p><strong>Changes to <code>toString</code> for non-empty collections.</strong>
After a <a href="https://kotlinlang.slack.com/archives/C5UPMM0A0/p1757410910270849" target="_blank" rel="noopener noreferrer">long discussion in Slack</a>
it became clear that the behavior of <code>toString</code> for non-empty collections
should just reflect that of the wrapped collection. Until now, using
<code>NonEmptyList</code> or <code>NonEmptySet</code> added a prefix — from now on, we treat
non-emptiness as simply a property of the collection, no different than other
such as their size, that are not reflected when turning into a string.</p>
<p><strong>New <code>arrow-core-result4k</code> module.</strong>
<a href="https://github.com/fork-handles/forkhandles/tree/trunk/result4k" target="_blank" rel="noopener noreferrer">Result4k</a>
is a popular library for computation that may succeed or fail.
We now provide support for it as part of <a href="https://arrow-kt.io/learn/typed-errors/working-with-typed-errors/">typed errors</a>.
You can either consume them — that is, <code>.bind()</code> a <code>Result</code> value —
or produce them — use the <code>result4k</code> builder in a similar way to <code>either</code>.</p>
<p><strong>Arrow Optics for Gradle, beta.</strong>
We have been working on a new approach to handle <code>@optics</code> annotations
with much less configuration, and that removes the need for manually
writing <code>companion object</code>s. This new approach is in beta,
<a href="https://arrow-kt.io/community/blog/2025/11/01/arrow-optics-gradle/">read here</a> all the details.</p>
<p><strong>Migration to new plug-ins.</strong>
Following our <em>eager dependency update policy</em>, we have moved to the new recommended
plug-ins in the ecosystem.</p>
<ul>
<li>We now use <a href="https://github.com/google/ksp/blob/main/docs/ksp2.md" target="_blank" rel="noopener noreferrer">KSP2</a>,</li>
<li>Android now uses the <a href="https://developer.android.com/kotlin/multiplatform/plugin" target="_blank" rel="noopener noreferrer">Android Gradle Library Plugin for KMP</a>,</li>
<li>Binary validation is done using the <a href="https://kotlinlang.org/docs/gradle-binary-compatibility-validation.html" target="_blank" rel="noopener noreferrer">experimental built-in support</a>,</li>
<li>We now publish a <a href="https://docs.gradle.org/current/userguide/version_catalogs.html#sec:importing-published-catalog" target="_blank" rel="noopener noreferrer">version catalog</a>
for consistent versioning of Arrow dependencies.</li>
<li>The <a href="https://plugins.jetbrains.com/plugin/24550-arrow" target="_blank" rel="noopener noreferrer">Arrow plug-in for IntelliJ IDEs</a>
now supports up to 2025.3, and understands code using context parameters
and the new <code>Racing</code> DSL.</li>
</ul>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow Optics for Gradle in beta]]></title>
            <link>https://arrow-kt.io/community/blog/2025/11/01/arrow-optics-gradle/</link>
            <guid>https://arrow-kt.io/community/blog/2025/11/01/arrow-optics-gradle/</guid>
            <pubDate>Sat, 01 Nov 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In order to unlock the full power of Arrow Optics, lenses and prisms for your]]></description>
            <content:encoded><![CDATA[<p>In order to unlock the full power of Arrow Optics, lenses and prisms for your
own types must be defined. This is a tedious task, that can be automate with
the help of the <code>@optics</code> annotation. Alas, <a href="https://arrow-kt.io/learn/quickstart/#additional-setup-for-optics">setting up</a>
the plug-in is not easy (especially in Multiplatform projects), and the
architecture of the plugin means that you need to write a <code>companion object</code>
explicitly on every one of your types.</p>
<p>We've been working on making this process easier, and the result is the
new <a href="https://plugins.gradle.org/plugin/io.arrow-kt.optics" target="_blank" rel="noopener noreferrer">Arrow Optics plugin for Gradle</a>.
This plugin configures your project to process <code>@optics</code> annotations,
taking care of all the peculiarities of Kotlin JVM and Multiplatform plugins.
Furthermore, it sets up the Kotlin compiler to generate <code>companion object</code>
automatically (if they are not already present), saving time and boilerplate.</p>
<p>This new plugin is in <strong>beta</strong>, the KSP plugin still remains the officially
supported way to generate optics. But we would also love feedback on the
new approach, with the goal of making this simpler option the default.
If you want to try the new plugin, you need to:</p>
<ul>
<li>Remove any previous configuration of the Arrow Optics KSP plugin,</li>
<li>Add <code>id("io.arrow-kt.optics") version "2.2.0"</code> to your <code>plugins</code> block,</li>
<li>Call <code>arrowOptics()</code> at the <strong>end</strong> of your <code>kotlin</code> block.</li>
</ul>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">plugins </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-literal singleline string" style="color:#5B88F8">"io.arrow-kt.optics"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> version </span><span class="token string-literal singleline string" style="color:#5B88F8">"2.2.0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">kotlin </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token comment" style="color:#6b738a">// compiler, target, and source set configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token comment" style="color:#6b738a">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">arrowOptics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Please let us know of any issues you encounter or any feedback on how to
make the process even more approachable, in either our
<a href="https://github.com/arrow-kt/arrow/issues" target="_blank" rel="noopener noreferrer">issues page</a>
or the <code>#arrow</code> channel on <a href="https://slack-chats.kotlinlang.org/c/arrow" target="_blank" rel="noopener noreferrer">Kotlin Slack</a>.</p>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow plug-in for IntelliJ 0.3]]></title>
            <link>https://arrow-kt.io/community/blog/2025/04/22/arrow-intellij-0-3/</link>
            <guid>https://arrow-kt.io/community/blog/2025/04/22/arrow-intellij-0-3/</guid>
            <pubDate>Tue, 22 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The new version of the Arrow plug-in for IntelliJ (and compatible IDEs) is out! This release fixes some problems in inspections related to Raise, and brings compatibility with 2025.1. The plug-in is compatible with both K1 and K2 mode of the Kotlin plug-in.]]></description>
            <content:encoded><![CDATA[<p>The new version of the <a href="https://plugins.jetbrains.com/plugin/24550-arrow" target="_blank" rel="noopener noreferrer">Arrow plug-in for IntelliJ</a> (and compatible IDEs) is out! This release fixes some problems in inspections related to <code>Raise</code>, and brings <strong>compatibility with 2025.1</strong>. The plug-in is compatible with <strong>both K1 and K2 mode</strong> of the Kotlin plug-in.</p>
<p>This release also brings new <strong>gutter icons</strong> inspired by the "suspended function" and "recursive function" icons in the Kotlin plug-in. These gutter icons highlight uses of <code>Raise</code> functions, and delayed computations with <code>Eval</code>. Our goal is to make a bit more explicit what the surface syntax of Kotlin keeps implicit.</p>
<center><p><img decoding="async" loading="lazy" alt="Gutter icon for Raise" src="https://arrow-kt.io/assets/images/gutter-raise-c4e2e9c3f2c7fd82e9e1bebdbbe87ca5.png" width="534" height="184" class="img_ev3q"> <br> <em>Gutter icon for <code>Raise</code></em></p><p><img decoding="async" loading="lazy" alt="Gutter icons for Eval" src="https://arrow-kt.io/assets/images/gutter-eval-ab4e8b50ef7995dfe1617b870877a800.png" width="554" height="108" class="img_ev3q"> <br> <em>Gutter icons for <code>Eval.later</code> and <code>Eval.always</code></em></p></center>]]></content:encoded>
            <category>intellij</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow 2.1.0]]></title>
            <link>https://arrow-kt.io/community/blog/2025/04/21/arrow-2-1/</link>
            <guid>https://arrow-kt.io/community/blog/2025/04/21/arrow-2-1/</guid>
            <pubDate>Mon, 21 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[On top of hiding chocolate eggs, the Easter Bunny has helped us release a new version of Arrow, namely 2.1.0. Apart from fixing several issues, this release is the first one with a more integrated repository.]]></description>
            <content:encoded><![CDATA[<p>On top of hiding chocolate eggs, the Easter Bunny has helped us release a new version of Arrow, namely 2.1.0. Apart from <a href="https://github.com/arrow-kt/arrow/releases/tag/2.1.0" target="_blank" rel="noopener noreferrer">fixing several issues</a>, this release is the first one with a <a href="https://arrow-kt.io/community/blog/2025/02/15/integration/" target="_blank" rel="noopener noreferrer">more integrated repository</a>.</p>
<p><strong>Integrated libraries.</strong> As a result, the following libraries have bumped their versions from 0.x directly to 2.1.0.</p>
<ul>
<li><a href="https://central.sonatype.com/artifact/io.arrow-kt/suspendapp" target="_blank" rel="noopener noreferrer"><code>suspendapp</code></a> and <a href="https://central.sonatype.com/artifact/io.arrow-kt/suspendapp-ktor" target="_blank" rel="noopener noreferrer"><code>suspendapp-ktor</code></a></li>
<li><a href="https://central.sonatype.com/artifact/io.arrow-kt/arrow-core-jackson" target="_blank" rel="noopener noreferrer"><code>arrow-core-jackson</code></a></li>
</ul>
<p>These libraries are from now on part of the Arrow release train. These libraries are tested as part of every PR to our repository, ensuring the same level of quality as the rest of the Arrow libraries. The <a href="https://apidocs.arrow-kt.io/index.html" target="_blank" rel="noopener noreferrer">API docs</a> also include them.</p>
<p><strong>New Ktor client module.</strong> The new <a href="https://apidocs.arrow-kt.io/arrow-resilience-ktor-client/index.html" target="_blank" rel="noopener noreferrer"><code>arrow-resilience-ktor-client</code></a> exposes Arrow's <a href="https://arrow-kt.io/learn/resilience/" target="_blank" rel="noopener noreferrer">resilience</a> mechanisms as <a href="https://ktor.io/docs/client-create-new-application.html" target="_blank" rel="noopener noreferrer">Ktor client</a> plug-ins. Just <code>install</code> <a href="https://apidocs.arrow-kt.io/arrow-resilience-ktor-client/arrow.resilience.ktor.client/-http-request-schedule.html" target="_blank" rel="noopener noreferrer">HttpRequestSchedule</a> or <a href="https://apidocs.arrow-kt.io/arrow-resilience-ktor-client/arrow.resilience.ktor.client/-http-circuit-breaker/index.html" target="_blank" rel="noopener noreferrer">HttpCircuitBreaker</a> to improve the behavior of your applications under unexpected circumstances.</p>
<p><strong>Soft deprecation of <code>arrow-atomic</code>.</strong> The Kotlin Team has introduced new <a href="https://kotlinlang.org/docs/whatsnew2120.html#common-atomic-types" target="_blank" rel="noopener noreferrer">common atomic types</a> as experimental in their 2.1.20 release. This new package covers the raison d'être of <code>arrow-atomic</code>, so once the functionality in the standard library becomes stable, we intend to deprecate Arrow's (and hopefully, we'd have convinced the Kotlin Team to <a href="https://youtrack.jetbrains.com/issue/KT-76389/Provide-update-functions-for-common-atomics" target="_blank" rel="noopener noreferrer">include the <code>update</code> function</a> by then).</p>
<p><strong><code>suspend</code>ed lazy evaluation.</strong> Arrow contains a small module for <a href="https://arrow-kt.io/learn/collections-functions/eval/" target="_blank" rel="noopener noreferrer">better control over evaluation</a>. However, it used to lack support for <code>suspend</code>ed functions. <a href="https://arrow-kt.io/learn/collections-functions/eval/" target="_blank" rel="noopener noreferrer">Until now</a>.</p>
<p><strong>Broader Arrow ecosystem in documentation.</strong> the Arrow organization develops a few libraries, and on top of that the community has created awesome patterns and functionality. We want to showcase those libraries even more in our documentation, since expanding that knowledge benefits every Arrow user. As a first step in that direction, our <a href="https://arrow-kt.io/learn/typed-errors/outcome-progress/" target="_blank" rel="noopener noreferrer">typed errors documentation</a> now mentions <a href="https://block.github.io/quiver/" target="_blank" rel="noopener noreferrer">Quiver</a> and <a href="https://opensavvy.gitlab.io/groundwork/pedestal/api-docs/index.html" target="_blank" rel="noopener noreferrer">Pedestal</a>.</p>
<p>On the topic of documentation, we would like to send special thanks to <a href="https://github.com/theycome" target="_blank" rel="noopener noreferrer">Ivan Yakushev</a>, which has submitted an incredible amount of grammar and spelling corrections to the Arrow website.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M4.25 9a7.75 7.75 0 1 1 15.5 0v4.823l2.464 4.927H1.787l2.463-4.927zM10 23h4v-2h-4z" clip-rule="evenodd"></path></svg></span>Improving together</div><div class="admonitionContent_BuS1"><p>We are happy to hear about missing topics in the documentation, either interesting libraries or simply parts of Arrow which need more coverage. Feel free to open an issue in <a href="https://github.com/arrow-kt/arrow-website" target="_blank" rel="noopener noreferrer"><code>arrow-website</code></a> (we also accept PRs!).</p></div></div>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Work on more integration]]></title>
            <link>https://arrow-kt.io/community/blog/2025/02/15/integration/</link>
            <guid>https://arrow-kt.io/community/blog/2025/02/15/integration/</guid>
            <pubDate>Sat, 15 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Once Arrow 2.0 is finally released,]]></description>
            <content:encoded><![CDATA[<p>Once Arrow 2.0 is finally <a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/" target="_blank" rel="noopener noreferrer">released</a>,
a fair question is what are the new goals of the Arrow project.
This post outlines some of the future plans of the maintainer team.
Having said so, Arrow welcomes any contribution — code or ideas —
that fits its goal of being a <em>companion in the Kotlin journey</em>.</p>
<p>Apart from the any needed bugfixes, we aim to improve our integration
with the broader Kotlin ecosystem, a line of work we started with
the <a href="https://arrow-kt.io/learn/quickstart/compose/#updating-the-model" target="_blank" rel="noopener noreferrer">optics module for Compose</a>.
One line of work already in progress is better integration with Ktor.
We would really appreciate any input on what integrations you miss
as Arrow user.</p>
<p>At this point, the <a href="https://github.com/arrow-kt/" target="_blank" rel="noopener noreferrer"><code>arrow-kt</code> organization</a>
has more than 50 projects. Of those, only a handful have graduated
from a proof-of-concept into part of Arrow. To make this status
more clear, the <code>arrow-integrations</code> and SuspendApp projects are
now hosted in the main <code>arrow</code> repository. This means that those
projects become part of the regular Arrow release schedule, instead
of the current model in which some libraries may be outdated for a
few weeks. Furthermore, it removes some burden from maintainers, which
now only need to care about one single repository.</p>
<p>Speaking of maintainance, in the past weeks we have been paying some
of the debt in our build files, that had grown too wild.
Technically, we have moved from separate <a href="https://github.com/arrow-kt/arrow-gradle-config" target="_blank" rel="noopener noreferrer"><code>arrow-gradle-config</code></a>
into a convention plug-in within the same repository.
This process has revealed some lack of uniformity between the
different projects, especially with respect to supported platforms.
From now on, all Arrow libraries support Native targets in
<a href="https://kotlinlang.org/docs/native-target-support.html" target="_blank" rel="noopener noreferrer">tiers 1 and 2</a>,
plus Windows + MinGW.</p>
<p>From the point of view of Arrow users, the only visible part of
this transition is that the next version of Arrow integration modules
and SuspendApp should be 2.1.0, instead of 0.x. Note that no breaking
changes are expected, regardless of the major version bump.</p>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow 2.0 release]]></title>
            <link>https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/</link>
            <guid>https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/</guid>
            <pubDate>Thu, 05 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We are happy to announce the next major release of Arrow, version 2.0!]]></description>
            <content:encoded><![CDATA[<p>We are happy to announce the next major release of Arrow, version 2.0!</p>
<p>This release is built with the new K2 compiler, and this gives us the ability
to support a wider range of platforms, including WebAssembly. From now on, we shall
provide artifacts for every platform supported by Kotlin.</p>
<p>Apart from stabilization and general bug fixing, the theme of this release
is improving the different DSLs provided by Arrow libraries. Our goal is to
empower developers to write more succinct and readable code.</p>
<center><p><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/2sfnDkPWoUw?si=pLR9n67BSOzN1TGf" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe></p></center>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrading-to-20">Upgrading to 2.0<a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/#upgrading-to-20" class="hash-link" aria-label="Direct link to Upgrading to 2.0" title="Direct link to Upgrading to 2.0">​</a></h2>
<p>As previously announced, migrating your projects to this release should be hassle-free
if your code compiled in 1.2.x without any deprecation warnings. Note that we talk about
<strong>source</strong> compatibility here, we had to break <strong>binary</strong> compatibility in several places
to implement improvements, such as in <code>NonEmptyList</code> and <a href="https://github.com/arrow-kt/arrow/pull/3504" target="_blank" rel="noopener noreferrer"><code>Schedule</code></a>.</p>
<p>There are two exceptions to this seamless transition. First, it was discovered that some
functions for <code>Map</code> in <code>Raise</code> collide with those of the standard library. Furthermore,
Arrow's variants return other <code>Map</code>, whereas the ones in the standard library return <code>List</code>.
The decision was to <a href="https://github.com/arrow-kt/arrow/pull/3512/files#diff-b378045af72d02f1e5d4037d411102fcdb768239abeabedf69a4520b74ad0278" target="_blank" rel="noopener noreferrer">rename them</a>.</p>
<p>The second breaking change is related to <a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/#improved-optics">improved optics</a>, please
consult that section for further information.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="simple-accumulation-in-raise">Simple accumulation in Raise<a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/#simple-accumulation-in-raise" class="hash-link" aria-label="Direct link to Simple accumulation in Raise" title="Direct link to Simple accumulation in Raise">​</a></h2>
<p>One of the core concepts when working with typed errors is the distinction
between fail-first and <a href="https://arrow-kt.io/learn/typed-errors/working-with-typed-errors/#accumulating-different-computations">accumulation of errors</a>. Until now, the latter mode
required using <code>zipOrAccumulate</code> and <code>mapOrAccumulate</code>, which sometimes obscure the actual
flow of the computation.</p>
<p>In Arrow 2.0 we have sprinkled some DSL dust over <code>Raise</code>, and now you can
write your code in a more linear way. Inside an <code>accumulate</code> block (or in
general, any <code>RaiseAccumulate</code>) you use <code>by accumulating</code> to execute some
computation keeping all the errors.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token comment" style="color:#6b738a">// version with `zipOrAccumulate`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token function" style="color:#EDB368">zipOrAccumulate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">checkOneThing</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">checkOtherThing</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b </span><span class="token operator" style="color:rgb(212, 212, 212)">-&gt;</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">doSomething</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token comment" style="color:#6b738a">// version with `accumulate`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">accumulate </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> a </span><span class="token keyword" style="color:#82a2f3">by</span><span class="token plain"> accumulating </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">checkOneThing</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> b </span><span class="token keyword" style="color:#82a2f3">by</span><span class="token plain"> accumulating </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">checkOtherThing</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">doSomething</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This DSL also includes shortcuts for the most common operations, like
<code>bind</code>ing and accumulating any problem, or checking a single property
of some data.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">accumulate </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> name </span><span class="token keyword" style="color:#82a2f3">by</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">Name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">rawName</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">bindOrAccumulate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">ensureOrAccumulate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">age </span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#cfcd9a">18</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> UnderAge </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">Person</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that the API may still undergo some change. At this point you need <code>@OptIn(ExperimentalRaiseAccumulateApi::class)</code> to allow their usage in your code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="additions-to-fx">Additions to Fx<a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/#additions-to-fx" class="hash-link" aria-label="Direct link to Additions to Fx" title="Direct link to Additions to Fx">​</a></h2>
<p>Writing coroutine-heavy code may become cumbersome over time, especially if
one intends to use as much concurrency as possible. Arrow Fx includes a <code>parZip</code>
function, but not everybody enjoys having so many brackets.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token function" style="color:#EDB368">parZip</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">downloadFile</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">loadDataFromDatabase</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> file</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">data</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-&gt;</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">Result</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">file</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The new <a href="https://arrow-kt.io/learn/coroutines/parallel/#await-all--parallelism-experimental"><code>awaitAll</code> scope</a> tries to improve the situation by tweaking the
usual <code>async</code> mechanism, ensuring that all <code>Deferred</code> values are <code>await</code>ed
once the first one is requested. That means that the previous code behaves
identically to the following, that is, the call <code>file.await()</code> implicitly
awaits every <code>async</code> defined up to that point.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">awaitAll </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> file </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> async </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">downloadFile</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">data</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> async </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">loadDataFromDatabase</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:#EDB368">Result</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">file</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">await</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">await</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We've also improved the STM block by <a href="https://arrow-kt.io/learn/coroutines/stm/#reading-and-writing-concurrent-state">allowing delegation</a> as a means to
read or change the value of a <code>TVar</code>.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#82a2f3">fun</span><span class="token plain"> STM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">deposit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">accVar</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> TVar</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">Int</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> amount</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Unit </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> acc </span><span class="token keyword" style="color:#82a2f3">by</span><span class="token plain"> accVar       </span><span class="token comment" style="color:#6b738a">// delegation here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> current </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> acc       </span><span class="token comment" style="color:#6b738a">// implicit 'read'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    acc </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> current </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> amount  </span><span class="token comment" style="color:#6b738a">// implicit 'write'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="clearer-retries-for-particular-exceptions">Clearer retries for particular exceptions<a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/#clearer-retries-for-particular-exceptions" class="hash-link" aria-label="Direct link to Clearer retries for particular exceptions" title="Direct link to Clearer retries for particular exceptions">​</a></h2>
<p>Until now, the <a href="https://arrow-kt.io/learn/resilience/retry-and-repeat/"><code>retry</code> operation</a> in the Resilience module would capture
any <code>Throwable</code> exception. From version 2.0 on you can specify a subclass
of <code>Throwable</code> to be the target for retrying, whereas the rest of
exceptions will bubble as usual.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">Schedule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">recurs</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">Throwable</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:#cfcd9a">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retry</span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">IllegalArgumentException</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">..</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The subclass of exceptions must be given as a type argument.
Alas, Kotlin does not allow giving only a subset of those, and <code>retry</code>
has two type parameters (the second one represents the output type of
the <code>Schedule</code>). Fortunately, you can ask the compiler to infer the
second one using <code>_</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="improved-optics">Improved optics<a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/#improved-optics" class="hash-link" aria-label="Direct link to Improved optics" title="Direct link to Improved optics">​</a></h2>
<p>The largest <strong>breaking changes</strong> in Arrow 2.0 relate to optics.
First of all, the <a href="https://arrow-kt.io/learn/immutable-data/intro/#many-optics-to-rule-them-all">optics hierarchy</a> has been greatly simplified:
now we have traversals, optionals, lenses, prisms, and isos, and no more
intermediate types. This smaller amount of types means that the type of
optic compositions become easier to understand.</p>
<p>We have also changed the generation of optics via the compiler plug-in
(that is, the <code>@optics</code> annotation) with respect to nullable fields.
In the 1.x series, a value of type <code>String?</code> would be presented as
<code>Optional&lt;T, String&gt;</code>; this makes impossible to change the value from
<code>null</code> to an actual <code>String</code> using only optics operations. From version
2.0, that field is represented as <code>Lens&lt;T, String?&gt;</code>. To get the 1.x
behavior you should apply <code>.notNull</code> after the optic corresponding to
the field.</p>
<p>A smaller breaking change is that generated optics are no longer
<a href="https://github.com/arrow-kt/arrow/pull/3505" target="_blank" rel="noopener noreferrer">inlined by default</a>.
This should prevent a large amount of warnings in which the compiler
complain that inlining is not significant. Note that the previous behavior
is still available under a flag.</p>
<p>One pain point when building <a href="https://arrow-kt.io/learn/immutable-data/traversal/">traversals</a> was the need to provide an
argument to <code>.every</code>, like <code>.every(Every.list())</code>. This new version
brings an improved variant that requires no arguments if the type
of the <code>Iterable</code> is known. Similar improvements have been applied
to <code>.at</code> and <code>.index</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="better-support-for-kotlinxserialization">Better support for kotlinx.serialization<a href="https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/#better-support-for-kotlinxserialization" class="hash-link" aria-label="Direct link to Better support for kotlinx.serialization" title="Direct link to Better support for kotlinx.serialization">​</a></h2>
<p>Using Arrow Core data types as part of serialized data requires additional integration.
In 1.2.x we started providing compile-time <a href="https://arrow-kt.io/learn/quickstart/serialization/#kotlinxserialization">support for <code>kotlinx.serialization</code></a>.
From 2.0 on we also provide <code>ArrowModule</code> for
<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#contextual-serialization" target="_blank" rel="noopener noreferrer">contextual serialization</a>. This is needed, among others, when the data is processed
by Ktor.</p>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow Open Space @ Lambda World]]></title>
            <link>https://arrow-kt.io/community/blog/2024/10/03/arrow-open-space/</link>
            <guid>https://arrow-kt.io/community/blog/2024/10/03/arrow-open-space/</guid>
            <pubDate>Thu, 03 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[The first Arrow & Fuctional Kotlin Open Space is taking place as part of Lambda World! This post contains the preliminary schedule, and shall be updated after the Open Space takes place with additional material, slides, and videos.]]></description>
            <content:encoded><![CDATA[<p>The first <a href="https://www.lambda.world/workshops/Arrow%20%26%20Functional%20Kotlin%20Open%20Space/" target="_blank" rel="noopener noreferrer">Arrow &amp; Fuctional Kotlin Open Space</a> is taking place as part of <a href="https://lambda.world/" target="_blank" rel="noopener noreferrer">Lambda World</a>! This post contains the preliminary schedule, and shall be updated after the Open Space takes place with additional material, slides, and videos.</p>
<table><tbody><tr><td>14.30 - 15.00</td><td><i>Introduction to Arrow libraries</i> by <a href="https://nomisrev.github.io/">Simon Vergauwen</a></td></tr><tr><td>15.00 - 16.30</td><td><a href="https://arrow-kt.io/community/blog/2024/10/03/arrow-open-space/#unconference"><i>Unconference</i></a> and <a href="https://arrow-kt.io/community/blog/2024/10/03/arrow-open-space/#build-together"><i>Build together</i></a> (in parallel, see below)</td></tr><tr><td>16.30 - 16.50</td><td><i>Closing remarks</i></td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unconference">Unconference<a href="https://arrow-kt.io/community/blog/2024/10/03/arrow-open-space/#unconference" class="hash-link" aria-label="Direct link to Unconference" title="Direct link to Unconference">​</a></h2>
<p>We have a nice room, some sweets, and a nice projector. The perfect setup to share some knowledge about Arrow and Functional Kotlin! Our goal with the Unconference is to bring together people who can talk about something and people who want to learn about something.</p>
<p><em>How does it work?</em> Use the whiteboard!</p>
<ul>
<li>If you want to learn about a topic put a note in the <em>Hear</em> column if none is already in <em>Talk</em>.</li>
<li>If you want to talk about a topic put a note in the <em>Talk</em> column if none is already in <em>Hear</em>.</li>
<li>If there's a match, shout it out loud and let the talk begin!<!-- -->
<ul>
<li>Move the note to the <em>In progress</em> column, and once it's done, to the <em>Done</em> column.</li>
<li>It would be great if any material or code would be shared with the organizers, so we can later add it to this page.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-together">Build together<a href="https://arrow-kt.io/community/blog/2024/10/03/arrow-open-space/#build-together" class="hash-link" aria-label="Direct link to Build together" title="Direct link to Build together">​</a></h2>
<p>The goal of the Open Space is to learn. Many of us around are happy to help, so feel free to work in any project you want, and explore ways to use more functional features in your Kotlin. Once again, don't be shy to ask :)</p>
<p>If you are not sure about where to start, we have prepared a few tutorials and projects for you.</p>
<ul>
<li><a href="https://serranofp.com/poke-fun/" target="_blank" rel="noopener noreferrer">Poké-Fun with Kotlin and Arrow</a>: exercises about different parts of Arrow, and how you can apply them to a Compose Multiplatform project.</li>
<li><a href="https://arrow-kt.io/learn/design/projects/" target="_blank" rel="noopener noreferrer">Example projects</a> from the Arrow documentation</li>
</ul>]]></content:encoded>
            <category>articles</category>
            <category>community</category>
        </item>
        <item>
            <title><![CDATA[Arrow plug-in for IntelliJ 0.1 is here!]]></title>
            <link>https://arrow-kt.io/community/blog/2024/06/01/intellij-plugin/</link>
            <guid>https://arrow-kt.io/community/blog/2024/06/01/intellij-plugin/</guid>
            <pubDate>Sat, 01 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[One of the main goals of the Arrow project is to produce libraries]]></description>
            <content:encoded><![CDATA[<p>One of the main goals of the Arrow project is to produce libraries
that follow well-known Kotlin idioms, and we strive to make them
as discoverable as possible. Nevertheless, the surface of some
components, like <a href="https://arrow-kt.io/learn/typed-errors/">typed errors</a>,
is quite large.
For that reason, we have been busy in the last weeks preparing
the first release of the
<a href="https://plugins.jetbrains.com/plugin/24550-arrow" target="_blank" rel="noopener noreferrer">Arrow plug-in for IntelliJ-based IDEs</a>.</p>
<p>This first version already focuses on three different aspects of
Arrow usage where we found that an additional companion can make
a big difference. The first aspect is the usage of typed errors:
the IDE will now suggest missing <code>.bind()</code> or <code>.bindAll()</code>,
mapping of error using <code>withError</code>, and promoting idioms like
<code>ensure</code> whenever possible.</p>
<p>The second aspect is warning about wrong usages of Arrow APIs
which cannot be prevented by Kotlin's type system alone. This includes
escaping of <code>Raise</code> contexts -- for example, using <code>sequence</code> or
<code>flow</code> inside <code>either</code> --, using <code>Atomic</code> with primitive types
-- where <code>AtomicInt</code> or <code>AtomicBoolean</code> should be used instead --,
or matching on <code>Eval</code> instances directly instead of using the
provided API -- which can easily lead to broken invariants.</p>
<p>The third aspect is applying some known recipes which may be hard
to know upfront. The first release includes a suggestion to add
the corresponding <a href="https://arrow-kt.io/learn/quickstart/serialization/">serializer</a>
when a type marked as <code>@Serializable</code> includes an Arrow Core type.
This is an area which we would like to explore more, helping with
the difficulties raised by the community.</p>
<p>The plug-in lives in a <a href="https://github.com/arrow-kt/arrow-intellij" target="_blank" rel="noopener noreferrer">separate repository</a>.
Please let us know your experience, and don't be shy to open issues
with suggestions for more features. They would help not only you
but potentially every user of the Arrow library.</p>]]></content:encoded>
            <category>intellij</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow 1.2.3 release]]></title>
            <link>https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/</link>
            <guid>https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/</guid>
            <pubDate>Wed, 28 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We are happy to announce the availability of version 1.2.3 of the Arrow collection of libraries.]]></description>
            <content:encoded><![CDATA[<p>We are happy to announce the availability of version 1.2.3 of the Arrow collection of libraries.
According to our plan, this is the last non-bugfix release of the 1.x series.
From now on, our <code>main</code> branch targets Arrow 2.0, which should be the next major release.</p>
<p>We are incredibly thankful to the many people that have contributed to this release,
bringing new ideas and quite some code.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M12 23c6.075 0 11-4.925 11-11S18.075 1 12 1 1 5.925 1 12s4.925 11 11 11M9 11.5h2v4H9v2h6v-2h-2v-6H9zM13 8V6h-2v2z" clip-rule="evenodd"></path></svg></span>Please use 1.2.4</div><div class="admonitionContent_BuS1"><p>Version 1.2.3 of <code>arrow-core</code> changed the behavior of <code>Raise</code> computations returning
functions or sequences. This change <a href="https://github.com/arrow-kt/arrow/issues/3391" target="_blank" rel="noopener noreferrer">restricted some useful usages</a>,
so the team has decided to roll it back and keep the 1.2.1 behavior.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New features<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#new-features" class="hash-link" aria-label="Direct link to New features" title="Direct link to New features">​</a></h2>
<p>A version number like 1.2.3 sounds like a small bugfix release, but this is far from truth in
this case: this release is full of new modules to help you be productive when writing Kotlin.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="improved-focus-on-compose">Improved focus on Compose<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#improved-focus-on-compose" class="hash-link" aria-label="Direct link to Improved focus on Compose" title="Direct link to Improved focus on Compose">​</a></h3>
<p>Arrow provides building blocks relevant to many projects using Kotlin.
A large part of our community is doing frontend work, and during the latest months,
the team has been trying to understand their needs, in order to make Arrow
a relevant tool in that space.</p>
<p>From that journey, we have put together a new documentation page highlighting
different ways in which Arrow may be useful in your Compose application.
There is also a new <a href="https://arrow-kt.io/learn/immutable-data/lens/#integration-with-compose"><code>arrow-optics-compose</code> module</a>
that includes utilities to work with immutable data inside a <code>MutableState</code>
or <code>MutableStateFlow</code>.</p>
<p>We are eager to hear more use cases or needs where Arrow may help the lives
of Kotlin developers. Feel free to drop by the <code>#arrow</code> channel in the Kotlin Slack,
or open an issue or discussion in our <a href="https://github.com/arrow-kt/arrow" target="_blank" rel="noopener noreferrer">repository</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="non-suspend-resource-management">Non-<code>suspend</code> resource management<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#non-suspend-resource-management" class="hash-link" aria-label="Direct link to non-suspend-resource-management" title="Direct link to non-suspend-resource-management">​</a></h3>
<p><a href="https://arrow-kt.io/learn/coroutines/resource-safety/">Resource safety</a> in Arrow
has been traditionally tied to the use of coroutines and <code>suspend</code> functions.
This is the right choice for Kotlin-first libraries, like Ktor or Koin, but many
libraries still come from a Java background where no such feature exists.
Beginning with this version, we provide two "variations" of resource management:</p>
<ul>
<li><code>Resource</code>, from the <code>arrow-fx-coroutines</code> module, is based on <code>suspend</code>
and ensures the desired behavior alongside coroutines (including cancellation).</li>
<li><code>AutoClose</code>, from the new <code>arrow-autoclose</code> module, provides almost the
same API as <code>Resource</code>, but without the <code>suspend</code> requirement.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="forward-compatible-eval">Forward compatible <code>Eval</code><a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#forward-compatible-eval" class="hash-link" aria-label="Direct link to forward-compatible-eval" title="Direct link to forward-compatible-eval">​</a></h3>
<p>One of our goals is to make the transition to 2.0 as smooth as possible.
You can <a href="https://arrow-kt.io/learn/quickstart/migration/">already migrate</a>
to the new APIs by using Arrow 1.2.3, and then ensuring that you get no deprecation warnings.</p>
<p>During this process, we were <a href="https://github.com/arrow-kt/arrow/issues/3039" target="_blank" rel="noopener noreferrer">made aware</a> that
there was no clear story for the migration of <code>Eval</code>. On the other hand, the use cases are very narrow.
The decision was to create a new <a href="https://arrow-kt.io/learn/collections-functions/eval/"><code>arrow-eval</code> module</a>,
present since this release, and mark the one from <code>arrow-core</code> point the new module,
instead of entirely removing this functionality from Arrow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="collectors">Collectors<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#collectors" class="hash-link" aria-label="Direct link to Collectors" title="Direct link to Collectors">​</a></h3>
<p>The new <a href="https://arrow-kt.io/learn/collections-functions/collectors/"><code>arrow-collectors</code> module</a>
allows composing operations over sequences of values
(lists, flows, sequences) while ensuring that the sequence is traversed only once.
This property is especially relevant when building the sequence is expensive, or simply
cannot be reproduced, like a stream of data from a database or a flow of actions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="improved-features">Improved features<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#improved-features" class="hash-link" aria-label="Direct link to Improved features" title="Direct link to Improved features">​</a></h2>
<p>Several features in the library have been improved, to ensure that Arrow covers a variety
of use cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lenses-for-sealed-classes">Lenses for sealed classes<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#lenses-for-sealed-classes" class="hash-link" aria-label="Direct link to Lenses for sealed classes" title="Direct link to Lenses for sealed classes">​</a></h3>
<p>This was once of the <a href="https://github.com/arrow-kt/arrow/issues/2829" target="_blank" rel="noopener noreferrer">older feature requests</a>
still in our issue tracker, which is now closed thanks to a wonderful
<a href="https://github.com/arrow-kt/arrow/pull/3359" target="_blank" rel="noopener noreferrer">contribution</a>!</p>
<p>From now on, the Optics KSP plug-in can generate
<a href="https://arrow-kt.io/learn/immutable-data/lens/#sealed-class-hierarchies">lenses for sealed hierarchies</a>,
given that the field lives in the common parent. For example, the following code</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token label symbol" style="color:#c57a17">@optics</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">sealed</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">interface</span><span class="token plain"> User </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> name</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> String</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#82a2f3">data</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">class</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">Person</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:#82a2f3">override</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> name</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> String</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> age</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> User</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#82a2f3">data</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">class</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">Company</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:#82a2f3">override</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> name</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> String</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:#82a2f3">val</span><span class="token plain"> vat</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> VATNumber</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> User</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>generates from this version on both prisms for each choice, and a lens for <code>name</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="higher-arity-functions">Higher-arity functions<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#higher-arity-functions" class="hash-link" aria-label="Direct link to Higher-arity functions" title="Direct link to Higher-arity functions">​</a></h3>
<p>We have traditionally been reluctant to add variations of <code>zip</code> with more than
10 parameters, because we felt that the narrow use cases did not balance out
the increase in binary size. Since this release Arrow provides those functions
in a new <code>arrow-core-high-arity</code> module.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="more-accumulating-functions-for-raise">More accumulating functions for <code>Raise</code><a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#more-accumulating-functions-for-raise" class="hash-link" aria-label="Direct link to more-accumulating-functions-for-raise" title="Direct link to more-accumulating-functions-for-raise">​</a></h3>
<p><a href="https://arrow-kt.io/learn/typed-errors/working-with-typed-errors/">Typed errors</a>
provide two essential ways to <a href="https://arrow-kt.io/learn/typed-errors/working-with-typed-errors/#accumulating-errors">accumulate errors</a>: <code>zipOrAccumulate</code> and <code>mapOrAccumulate</code>. Those correspond
to accumulating over a fixed number of computations of different types, or
accumulating over an unknown quantity of computations with the same type.</p>
<p>The <code>mapOrAccumulate</code> function <em>always</em> returns a new list. In some cases, you
don't really care about this result, just about the iteration behavior.
This is similar to the different between <code>map</code> and <code>forEach</code> in the standard
library. From there Arrow takes the name of the new function: <code>forEachAccumulating</code>.</p>
<p>One potential use case is performing validation over elements of a list,
but keeping the values intact.</p>
<div class="language-kotlin codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#222E51"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-kotlin codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#222E51"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">people</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:#EDB368">forEachAccumulating</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> person </span><span class="token operator" style="color:rgb(212, 212, 212)">-&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token function" style="color:#EDB368">ensure</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">person</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">age </span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#cfcd9a">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token function" style="color:#EDB368">InvalidAge</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">person</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="better-memoization">Better memoization<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#better-memoization" class="hash-link" aria-label="Direct link to Better memoization" title="Direct link to Better memoization">​</a></h3>
<p><a href="https://arrow-kt.io/learn/collections-functions/recursive/#memoized-recursive-functions"><code>MemoizedDeepRecursiveFunction</code></a>
is a powerful tool to express recursive algorithms without worries over stack overflow or recomputation.
However, there was a lack of control over how memoized values were stored or evicted, which made the
type less useful than intended.</p>
<p>From this release on, there are new overloads to support custom memoization policies.
Furthermore, the new <a href="https://arrow-kt.io/learn/collections-functions/recursive/#memoization-takes-memory"><code>arrow-cache4k</code> module</a>
provides integration with the excellent
<a href="https://github.com/ReactiveCircus/cache4k" target="_blank" rel="noopener noreferrer">cache4k</a> library.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-integrations">More integrations<a href="https://arrow-kt.io/community/blog/2024/02/28/arrow-1-2-3/#more-integrations" class="hash-link" aria-label="Direct link to More integrations" title="Direct link to More integrations">​</a></h2>
<p>Although not part of this release, we would like to highlight that
<a href="https://akkurate.dev/" target="_blank" rel="noopener noreferrer">Akkurate</a>, which provides a wonderful DSL for validation over data,
has released an <a href="https://akkurate.dev/docs/arrow-integration.html" target="_blank" rel="noopener noreferrer">integration module for Arrow</a>.
This adds to the <a href="https://arrow-kt.io/learn/integrations/">rest of integrations</a>
and shows the collaborative spirit of the Kotlin community.</p>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow releases stable 1.2.0 version]]></title>
            <link>https://arrow-kt.io/community/blog/2023/07/12/arrow-1-2-0/</link>
            <guid>https://arrow-kt.io/community/blog/2023/07/12/arrow-1-2-0/</guid>
            <pubDate>Wed, 12 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We're excited to announce the stable Arrow 1.2.0 version. To briefly summarize, this release:]]></description>
            <content:encoded><![CDATA[<p>We're excited to announce the stable Arrow 1.2.0 version. To briefly summarize, this release:</p>
<ul>
<li>Improves the API for <a href="http://arrow-kt.io/learn/typed-errors/working-with-typed-errors/" target="_blank" rel="noopener noreferrer">typed errors</a>,
including <a href="https://apidocs.arrow-kt.io/arrow-core/arrow.core.raise/with-error.html" target="_blank" rel="noopener noreferrer"><code>withError</code></a>
and <a href="https://apidocs.arrow-kt.io/arrow-core/arrow.core.raise/merge.html" target="_blank" rel="noopener noreferrer"><code>merge</code></a>.</li>
<li>Adds <a href="https://apidocs.arrow-kt.io/arrow-core/arrow.core/-non-empty-collection/index.html" target="_blank" rel="noopener noreferrer"><code>NonEmptyCollection</code></a>
as common parent of <a href="https://apidocs.arrow-kt.io/arrow-core/arrow.core/-non-empty-list/index.html" target="_blank" rel="noopener noreferrer"><code>NonEmptyList</code></a>
and <a href="https://apidocs.arrow-kt.io/arrow-core/arrow.core/-non-empty-set/index.html" target="_blank" rel="noopener noreferrer"><code>NonEmptySet</code></a>.</li>
<li>Introduces <a href="https://arrow-kt.io/learn/quickstart/serialization/" target="_blank" rel="noopener noreferrer"><code>arrow-core-serialization</code></a>
to be used alongside KotlinX Serialization.</li>
<li>Fixes a few issues found in the Release Candidate.</li>
</ul>
<p>Read more details in the full <a href="https://xebia.com/blog/a-new-module-for-typed-errors-in-arrow-1-2-0/" target="_blank" rel="noopener noreferrer">Arrow 1.2.0 release announcement</a>.</p>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow 2.0's Trajectory - Video]]></title>
            <link>https://arrow-kt.io/community/blog/2023/05/04/arrow-trajectory-kotlinconf/</link>
            <guid>https://arrow-kt.io/community/blog/2023/05/04/arrow-trajectory-kotlinconf/</guid>
            <pubDate>Thu, 04 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Watch Simon Vergauwen's presentation from KotlinConf 2023 about the history of Arrow, and the trajectory for Arrow 2.0.]]></description>
            <content:encoded><![CDATA[<p>Watch <a href="https://twitter.com/vergauwen_simon" target="_blank" rel="noopener noreferrer">Simon Vergauwen</a>'s presentation from KotlinConf 2023 about the history of Arrow, and the trajectory for Arrow 2.0.</p>]]></content:encoded>
            <category>core</category>
            <category>videos</category>
        </item>
        <item>
            <title><![CDATA[Nicer data transformation with KopyKat and Optics]]></title>
            <link>https://arrow-kt.io/community/blog/2023/05/04/data-transformation-kotlinconf/</link>
            <guid>https://arrow-kt.io/community/blog/2023/05/04/data-transformation-kotlinconf/</guid>
            <pubDate>Thu, 04 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Watch Alejandro Serrano's presentation from KotlinConf 2023 about data transformation.]]></description>
            <content:encoded><![CDATA[<p>Watch <a href="https://twitter.com/trupill" target="_blank" rel="noopener noreferrer">Alejandro Serrano</a>'s presentation from KotlinConf 2023 about data transformation.</p>
<p>Data classes are incredibly useful when modeling our domain in an immutable way. The Kotlin compiler gives us many niceties, including 'copy' to create a new value based on a previous one. However, this 'copy' often falls short. This talk explores two alternatives: KopyKat, a plug-in to generate additional variations of 'copy', and Arrow Optics, a whole framework to transform this immutable data.</p>]]></content:encoded>
            <category>optics</category>
            <category>videos</category>
        </item>
        <item>
            <title><![CDATA[Typed Error Handling in Kotlin]]></title>
            <link>https://arrow-kt.io/community/blog/2023/04/17/typed-error-handling-in-kotlin/</link>
            <guid>https://arrow-kt.io/community/blog/2023/04/17/typed-error-handling-in-kotlin/</guid>
            <pubDate>Mon, 17 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[A comparative study about several typed-error handling practices in Kotlin.]]></description>
            <content:encoded><![CDATA[<p>A comparative study about several typed-error handling practices in Kotlin.</p>
<p>There are various approaches to error handling in the Kotlin community.
In this article we’ve explored a small subset of typed error handling practices in the community.</p>
<p>From the approaches explored, there were three patterns that aligns with Kotlin recommendation with
relatively low cognitive complexity including: Sealed class matching with early returns, Arrow's <code>either { }</code> builder,
and Arrow's <code>context(Raise&lt;E&gt;)</code> with context-receivers.</p>
<p>Arrow's <code>context(Raise&lt;E&gt;)</code> achieved the most optimized score on all aspects of
developer productivity. This includes having the lowest cognitive complexity, the lowest cyclomatic complexity
as well as the most succinct with the least lines of codes.</p>
<p>Read the full article: <a href="https://medium.com/@mitchellyuwono/typed-error-handling-in-kotlin-11ff25882880" target="_blank" rel="noopener noreferrer">Typed Error Handling in Kotlin</a>.</p>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Arrow 2.0's Trajectory]]></title>
            <link>https://arrow-kt.io/community/blog/2023/04/16/arrow-2-0-trajectory/</link>
            <guid>https://arrow-kt.io/community/blog/2023/04/16/arrow-2-0-trajectory/</guid>
            <pubDate>Sun, 16 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[A full transcript and the slides from Simon Vergauwen's presentation from KotlinConf 2023 about the history of Arrow and where it's going.]]></description>
            <content:encoded><![CDATA[<p>A full transcript and the slides from <a href="https://twitter.com/vergauwen_simon" target="_blank" rel="noopener noreferrer">Simon Vergauwen's</a> presentation from KotlinConf 2023 about the history of Arrow and where it's going.</p>]]></content:encoded>
            <category>core</category>
            <category>slidedecks</category>
        </item>
        <item>
            <title><![CDATA[Arrow 1.2.0-RC Release Summary]]></title>
            <link>https://arrow-kt.io/community/blog/2023/04/04/arrow-1-2-0-rc-summary/</link>
            <guid>https://arrow-kt.io/community/blog/2023/04/04/arrow-1-2-0-rc-summary/</guid>
            <pubDate>Tue, 04 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We're excited to announce Arrow 1.2.0-RC alongside a new Arrow website. To briefly summarize, this release:]]></description>
            <content:encoded><![CDATA[<p>We're excited to announce Arrow 1.2.0-RC alongside a new Arrow website. To briefly summarize, this release:</p>
<ul>
<li>Introduces a brand new <a href="http://arrow-kt.io/learn/typed-errors/working-with-typed-errors/" target="_blank" rel="noopener noreferrer">typed errors</a> module.</li>
<li>Adds more options for <a href="http://arrow-kt.io/learn/resilience/" target="_blank" rel="noopener noreferrer">resilience</a>.</li>
<li>Marks every function and type we intend to remove in 2.0 as <code>@Deprecated</code>.</li>
</ul>
<p>Read more details in the full <a href="https://xebia.com/blog/arrow-1-2-0-rc-is-now-available/" target="_blank" rel="noopener noreferrer">Arrow 1.2.0 release announcement</a>.</p>]]></content:encoded>
            <category>core</category>
            <category>articles</category>
        </item>
        <item>
            <title><![CDATA[Functional Fun in Kotlin]]></title>
            <link>https://arrow-kt.io/community/blog/2023/02/04/functional-fun-kotlin/</link>
            <guid>https://arrow-kt.io/community/blog/2023/02/04/functional-fun-kotlin/</guid>
            <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Simon Vergauwen shares why he thinks Kotlin is great language to do modern functional programming, and why he believes it's perhaps the best language to do modern mainstream (hardcore) functional programming.]]></description>
            <content:encoded><![CDATA[<p><a href="https://twitter.com/vergauwen_simon" target="_blank" rel="noopener noreferrer">Simon Vergauwen</a> shares why he thinks Kotlin is great language to do modern functional programming, and why he believes it's perhaps the best language to do modern mainstream (hardcore) functional programming.</p>]]></content:encoded>
            <category>core</category>
            <category>slidedecks</category>
        </item>
        <item>
            <title><![CDATA[CodelyTV Interview with Raul Raja]]></title>
            <link>https://arrow-kt.io/community/blog/2023/01/03/codelytv-interview/</link>
            <guid>https://arrow-kt.io/community/blog/2023/01/03/codelytv-interview/</guid>
            <pubDate>Tue, 03 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[An interview with Arrow maintainer Raúl Raja by Rafa Gómez on CodelyTV.]]></description>
            <content:encoded><![CDATA[<p>An interview with Arrow maintainer Raúl Raja by Rafa Gómez on CodelyTV.</p>]]></content:encoded>
            <category>core</category>
            <category>videos</category>
        </item>
        <item>
            <title><![CDATA[Actions as Data]]></title>
            <link>https://arrow-kt.io/community/blog/2022/12/01/actions-as-data/</link>
            <guid>https://arrow-kt.io/community/blog/2022/12/01/actions-as-data/</guid>
            <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[A presentation by Alejandro Serrano at Advanced Kotlin Dev Day 2022.]]></description>
            <content:encoded><![CDATA[<p>A presentation by Alejandro Serrano at Advanced Kotlin Dev Day 2022.</p>]]></content:encoded>
            <category>core</category>
            <category>videos</category>
        </item>
        <item>
            <title><![CDATA[Context Receivers: Kotlin's new secret sauce]]></title>
            <link>https://arrow-kt.io/community/blog/2022/12/01/context-receivers/</link>
            <guid>https://arrow-kt.io/community/blog/2022/12/01/context-receivers/</guid>
            <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Alejandro Serrano's presentation from Advanced Kotlin Dev Day 2022 about context receivers.]]></description>
            <content:encoded><![CDATA[<p>Alejandro Serrano's presentation from Advanced Kotlin Dev Day 2022 about context receivers.</p>]]></content:encoded>
            <category>core</category>
            <category>videos</category>
        </item>
        <item>
            <title><![CDATA[Functional Error Handling - A Practical Approach]]></title>
            <link>https://arrow-kt.io/community/blog/2022/12/01/functional-error-handling/</link>
            <guid>https://arrow-kt.io/community/blog/2022/12/01/functional-error-handling/</guid>
            <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[A presentation by Bas de Groot at Advanced Kotlin Dev Day 2022.]]></description>
            <content:encoded><![CDATA[<p>A presentation by Bas de Groot at Advanced Kotlin Dev Day 2022.</p>]]></content:encoded>
            <category>core</category>
            <category>videos</category>
        </item>
    </channel>
</rss>