"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[4417],{6299:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>w,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=r(85893),n=r(11151);const a={title:"Webflux with Kotlin and Arrow",image:"/img/blog-image-header.png",category:"articles",tags:["core","fx","articles"],link:"http://www.smartjava.org/content/webflux-arrow/"},i=void 0,c={permalink:"/community/blog/2019/02/03/arrow-webflux",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-02-03-arrow-webflux.md",source:"@site/content/blog/2019-02-03-arrow-webflux.md",title:"Webflux with Kotlin and Arrow",description:"Webflux with Kotlin and Arrow shows how you can use Arrow together with Spring Webflux to create a reactive REST application. This article explains how to use the MonoK and the FluxK Arrow extensions together with the binding function to make working with the Mono and Flux reactor constructs much easier and better understandable.",date:"2019-02-03T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"fx",permalink:"/community/blog/tags/fx"},{label:"articles",permalink:"/community/blog/tags/articles"}],readingTime:.27,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Webflux with Kotlin and Arrow",image:"/img/blog-image-header.png",category:"articles",tags:["core","fx","articles"],link:"http://www.smartjava.org/content/webflux-arrow/"},unlisted:!1,prevItem:{title:"From Imperative to Functional Programming using Arrow",permalink:"/community/blog/2019/02/10/imperative-functional-programming-arrow"},nextItem:{title:"Getting started with FP in Kotlin and Arrow: Typeclasses",permalink:"/community/blog/2019/01/03/getting-started"}},l={authorsImageUrls:[]},s=[];function u(t){const e={a:"a",code:"code",p:"p",...(0,n.a)(),...t.components};return(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:"http://www.smartjava.org/content/webflux-arrow/",children:"Webflux with Kotlin and Arrow"})," shows how you can use Arrow together with Spring Webflux to create a reactive REST application. This article explains how to use the ",(0,o.jsx)(e.code,{children:"MonoK"})," and the ",(0,o.jsx)(e.code,{children:"FluxK"})," Arrow extensions together with the ",(0,o.jsx)(e.code,{children:"binding"})," function to make working with the ",(0,o.jsx)(e.code,{children:"Mono"})," and ",(0,o.jsx)(e.code,{children:"Flux"})," reactor constructs much easier and better understandable."]})}function w(t={}){const{wrapper:e}={...(0,n.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(u,{...t})}):u(t)}},11151:(t,e,r)=>{r.d(e,{Z:()=>c,a:()=>i});var o=r(67294);const n={},a=o.createContext(n);function i(t){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:i(t.components),o.createElement(a.Provider,{value:e},t.children)}}}]);