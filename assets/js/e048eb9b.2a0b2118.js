"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[5995],{79116:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>n,metadata:()=>i,toc:()=>l});var o=s(85893),a=s(11151);const n={title:"Optics and Type Classes in Arrow",image:"https://speakerd.s3.amazonaws.com/presentations/4b938d99415a416c8f908ac5302a66cb/slide_0.jpg",category:"slidedecks",tags:["core","optics","slidedecks"],event:"Kotlin Brooklyn Meetup",link:"https://speakerdeck.com/heyitsmohit/functional-programming-with-arrow"},r=void 0,i={permalink:"/community/blog/2018/01/17/optics-type-classes-arrow",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-01-17-optics-type-classes-arrow.md",source:"@site/content/blog/2018-01-17-optics-type-classes-arrow.md",title:"Optics and Type Classes in Arrow",description:"@msya explains how to use various optics and type classes in Arrow. He discusses optics such as",date:"2018-01-17T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"optics",permalink:"/community/blog/tags/optics"},{label:"slidedecks",permalink:"/community/blog/tags/slidedecks"}],readingTime:.215,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Optics and Type Classes in Arrow",image:"https://speakerd.s3.amazonaws.com/presentations/4b938d99415a416c8f908ac5302a66cb/slide_0.jpg",category:"slidedecks",tags:["core","optics","slidedecks"],event:"Kotlin Brooklyn Meetup",link:"https://speakerdeck.com/heyitsmohit/functional-programming-with-arrow"},unlisted:!1,prevItem:{title:"It's all about morphisms",permalink:"/community/blog/2018/03/21/morphisms"},nextItem:{title:"Functional Programming in Kotlin with Arrow",permalink:"/community/blog/2017/11/29/fp-kotlin-arrow"}},c={authorsImageUrls:[]},l=[];function p(e){const t={a:"a",code:"code",p:"p",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/msya",children:"@msya"})," explains how to use various optics and type classes in Arrow. He discusses optics such as\n",(0,o.jsx)(t.a,{href:"https://arrow-kt.io/learn/immutable-data/lens/",children:(0,o.jsx)(t.code,{children:"Lens"})})," and ",(0,o.jsx)(t.a,{href:"https://arrow-kt.io/learn/immutable-data/prism-iso/",children:(0,o.jsx)(t.code,{children:"Iso"})}),". He also goes over the purpose for type classes and how ",(0,o.jsx)(t.a,{href:"https://github.com/Kotlin/KEEP/pull/87",children:"KEEP-87"})," will make it easier to implement them."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://speakerdeck.com/heyitsmohit/functional-programming-with-arrow",children:"Functional Programming with Arrow"})})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>i,a:()=>r});var o=s(67294);const a={},n=o.createContext(a);function r(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);