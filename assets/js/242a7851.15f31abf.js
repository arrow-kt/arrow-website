"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[7061],{76901:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(85893),o=n(11151);const a={title:"Super-charge your build with Arrow Analysis by Alejandro Serrano Mena",image:"http://i3.ytimg.com/vi/yCZtnzTnpRA/hqdefault.jpg",category:"videos",tags:["analysis","videos"],link:"https://youtu.be/yCZtnzTnpRA",event:"Kotlin Dev Day"},r=void 0,s={permalink:"/community/blog/2022/05/30/super-charge-build-arrow-analysis",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-05-30-super-charge-build-arrow-analysis.md",source:"@site/content/blog/2022-05-30-super-charge-build-arrow-analysis.md",title:"Super-charge your build with Arrow Analysis by Alejandro Serrano Mena",description:"Alejandro Serrano presents Arrow Analysis, a Kotlin compiler plug-in that does pre-and post-condition and type invariant checking at compile time.",date:"2022-05-30T00:00:00.000Z",tags:[{label:"analysis",permalink:"/community/blog/tags/analysis"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.1,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Super-charge your build with Arrow Analysis by Alejandro Serrano Mena",image:"http://i3.ytimg.com/vi/yCZtnzTnpRA/hqdefault.jpg",category:"videos",tags:["analysis","videos"],link:"https://youtu.be/yCZtnzTnpRA",event:"Kotlin Dev Day"},unlisted:!1,prevItem:{title:"Extending kotlinx.serialization functionality with Arrow Meta with Karin-Aleksandra Monoid",permalink:"/community/blog/2022/05/30/extending-kotlinx-serialization-functionality-arrow-meta"},nextItem:{title:"Functional programming in Kotlin: exploring Arrow by Ties Van de Ven",permalink:"/community/blog/2022/05/18/functional-programming-kotlin-exploring-arrow-ties-van-de-ven"}},l={authorsImageUrls:[]},c=[];function p(e){const t={p:"p",...(0,o.a)(),...e.components};return(0,i.jsx)(t.p,{children:"Alejandro Serrano presents Arrow Analysis, a Kotlin compiler plug-in that does pre-and post-condition and type invariant checking at compile time."})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var i=n(67294);const o={},a=i.createContext(o);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);