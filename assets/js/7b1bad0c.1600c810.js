"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[3012],{21278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=t(85893),o=t(11151);const i={title:"Arrow 2.2.0",category:"articles",image:"/img/arrow-release-ftr.jpg",no_image_on_post:!0,tags:["core","articles"]},s="Arrow 2.2.0",a={permalink:"/community/blog/2025/11/01/arrow-2-2",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2025-11-01-arrow-2-2.md",source:"@site/content/blog/2025-11-01-arrow-2-2.md",title:"Arrow 2.2.0",description:"Arrow 2.2.0 is out, with improved and new functionality.",date:"2025-11-01T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"articles",permalink:"/community/blog/tags/articles"}],readingTime:3.605,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Arrow 2.2.0",category:"articles",image:"/img/arrow-release-ftr.jpg",no_image_on_post:!0,tags:["core","articles"]},unlisted:!1,nextItem:{title:"Arrow Optics for Gradle in beta",permalink:"/community/blog/2025/11/01/arrow-optics-gradle"}},l={authorsImageUrls:[]},c=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Arrow 2.2.0 is out, with improved and new functionality.\nThis release builds on top of several ",(0,r.jsx)(n.a,{href:"https://kotlinlang.org/docs/whatsnew22.html",children:"new features in Kotlin 2.2"}),",\nin its self-imposed role of ",(0,r.jsx)(n.em,{children:"perfect companion for your Kotlin journey"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"Raise"})," with context parameters."]}),"\nThe new package ",(0,r.jsx)(n.code,{children:"arrow.core.raise.context"})," provides the same API as ",(0,r.jsx)(n.code,{children:"arrow.core.raise"}),",\nbut using context parameters instead of extension functions.\nThis package is intended to be a full 1-1 replacement the extension-based API."]}),"\n",(0,r.jsxs)(n.p,{children:["Unfortunately, currently mixing ",(0,r.jsx)(n.code,{children:"Raise"})," functions using extension-style and\ncontext-style doesn't lead to the better experience. Our advice is to fully migrate\nto the context-style API if possible, or stay completely within the extension style."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'// extension-style\nfun Raise<PersonValidationError>.buildPerson(name: String, age: Int): Person { ... }\n\n// context-style, "fake" constructor\ncontext(Raise<PersonValidationError>)\nfun Person(name: String, age: Int): Person { ... }\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Enabling context parameters",type:"info",children:(0,r.jsxs)(n.p,{children:["In order to define functions with context parameters, you need to enable the\ncorresponding language feature, as described in the\n",(0,r.jsx)(n.a,{href:"https://kotlinlang.org/docs/whatsnew22.html#preview-of-context-parameters",children:"Kotlin documentation"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["New ",(0,r.jsx)(n.code,{children:"Racing"})," DSL for concurrency."]}),"\nArrow Fx provides high-level concurrency combinators\nto succinctly describe how tasks should be interleaved in a computation.\nAlbeit useful, those combinators require nesting and writing your code in a\nparticular way. In Arrow 2.2.0 we introduce a new\n",(0,r.jsxs)(n.a,{href:"/learn/coroutines/racing/#racing-dsl-experimental",children:[(0,r.jsx)(n.code,{children:"Racing"})," DSL"]}),".\nCombined with the already existing\n",(0,r.jsxs)(n.a,{href:"/learn/coroutines/parallel/#await-all--parallelism-experimental",children:[(0,r.jsx)(n.code,{children:"AwaitAll"})," DSL"]}),",\nyou can write your coroutines code with little to no changes, while using as\nmuch concurrency as possible during execution."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"validate"})," for error values."]}),"\nWe have introduced a small utility function to bridge the world of validation functions\nworking on ",(0,r.jsx)(n.code,{children:"Raise"}),", and chained style using ",(0,r.jsx)(n.code,{children:"Either"})," or ",(0,r.jsx)(n.code,{children:"Option"}),". This function is\ncalled ",(0,r.jsx)(n.code,{children:"validate"}),", and it should be commonly used in conjunction with ",(0,r.jsx)(n.code,{children:"ensure"})," and similar functions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'fun failOnMoreConditionsWithBindMap(): Either<String, Int> =\n    randomNumber()\n        .validate { ensure(it != 10) { "Number 10 also not allowed" } }\n        .map { it + 100 }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This new function provides no functionality you could not get before.\nFor example, here is the code equivalent to the one above, but using the ",(0,r.jsx)(n.code,{children:"Either"})," DSL."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'fun failOnMoreConditionsWithBindMap(): Either<String, Int> = either {\n    val random = randomNumber().bind()\n    ensure(random != 10) { "Number 10 also not allowed" }\n    random + 100\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"We acknowledge that the chain-of-calls style is a common one, and we want the Arrow API\nto appeal to users using their preferred style."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:['"At most once" for ',(0,r.jsx)(n.code,{children:"Eval"}),"."]}),"\nArrow provides the ",(0,r.jsx)(n.code,{children:"Eval"})," type for ",(0,r.jsx)(n.a,{href:"/learn/collections-functions/eval/",children:"fine-grained control over evaluation"}),".\nThis is similar to ",(0,r.jsx)(n.code,{children:"lazy"})," in the standard library, but you can choose\nbetween eager, lazy, and repeated (computed every time) evaluation strategies.\nHowever, there was no (easy) way to ensure that a computation was evaluated\nat most once."]}),"\n",(0,r.jsxs)(n.p,{children:["The new ",(0,r.jsx)(n.code,{children:"Eval.atMostOnce"})," function (alongside ",(0,r.jsx)(n.code,{children:"SuspendEval.atMostOnce"}),")\nprovides this new behavior. You should be aware, though, that this means\nthat getting the value of an ",(0,r.jsx)(n.code,{children:"Eval"})," built this way may block (or suspend)\nif more than one thread does so concurrently."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Changes to ",(0,r.jsx)(n.code,{children:"toString"})," for non-empty collections."]}),"\nAfter a ",(0,r.jsx)(n.a,{href:"https://kotlinlang.slack.com/archives/C5UPMM0A0/p1757410910270849",children:"long discussion in Slack"}),"\nit became clear that the behavior of ",(0,r.jsx)(n.code,{children:"toString"})," for non-empty collections\nshould just reflect that of the wrapped collection. Until now, using\n",(0,r.jsx)(n.code,{children:"NonEmptyList"})," or ",(0,r.jsx)(n.code,{children:"NonEmptySet"})," added a prefix \u2014 from now on, we treat\nnon-emptiness as simply a property of the collection, no different than other\nsuch as their size, that are not reflected when turning into a string."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["New ",(0,r.jsx)(n.code,{children:"arrow-core-result4k"})," module."]}),"\n",(0,r.jsx)(n.a,{href:"https://github.com/fork-handles/forkhandles/tree/trunk/result4k",children:"Result4k"}),"\nis a popular library for computation that may succeed or fail.\nWe now provide support for it as part of ",(0,r.jsx)(n.a,{href:"/learn/typed-errors/working-with-typed-errors/",children:"typed errors"}),".\nYou can either consume them \u2014 that is, ",(0,r.jsx)(n.code,{children:".bind()"})," a ",(0,r.jsx)(n.code,{children:"Result"})," value \u2014\nor produce them \u2014 use the ",(0,r.jsx)(n.code,{children:"result4k"})," builder in a similar way to ",(0,r.jsx)(n.code,{children:"either"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arrow Optics for Gradle, beta."}),"\nWe have been working on a new approach to handle ",(0,r.jsx)(n.code,{children:"@optics"})," annotations\nwith much less configuration, and that removes the need for manually\nwriting ",(0,r.jsx)(n.code,{children:"companion object"}),"s. This new approach is in beta,\n",(0,r.jsx)(n.a,{href:"/community/blog/2025/11/01/arrow-optics-gradle/",children:"read here"})," all the details."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Migration to new plug-ins."}),"\nFollowing our ",(0,r.jsx)(n.em,{children:"eager dependency update policy"}),", we have moved to the new recommended\nplug-ins in the ecosystem."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We now use ",(0,r.jsx)(n.a,{href:"https://github.com/google/ksp/blob/main/docs/ksp2.md",children:"KSP2"}),","]}),"\n",(0,r.jsxs)(n.li,{children:["Android now uses the ",(0,r.jsx)(n.a,{href:"https://developer.android.com/kotlin/multiplatform/plugin",children:"Android Gradle Library Plugin for KMP"}),","]}),"\n",(0,r.jsxs)(n.li,{children:["Binary validation is done using the ",(0,r.jsx)(n.a,{href:"https://kotlinlang.org/docs/gradle-binary-compatibility-validation.html",children:"experimental built-in support"}),","]}),"\n",(0,r.jsxs)(n.li,{children:["We now publish a ",(0,r.jsx)(n.a,{href:"https://docs.gradle.org/current/userguide/version_catalogs.html#sec:importing-published-catalog",children:"version catalog"}),"\nfor consistent versioning of Arrow dependencies."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.a,{href:"https://plugins.jetbrains.com/plugin/24550-arrow",children:"Arrow plug-in for IntelliJ IDEs"}),"\nnow supports up to 2025.3, and understands code using context parameters\nand the new ",(0,r.jsx)(n.code,{children:"Racing"})," DSL."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var r=t(67294);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);