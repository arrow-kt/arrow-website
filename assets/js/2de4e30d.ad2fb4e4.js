"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[6866],{13845:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=s(85893),t=s(11151);const o={title:"Outcomes and in-progress",sidebar_position:6,description:"Describing more than success and failure."},i="Outcomes and in-progress values",a={id:"learn/typed-errors/outcome-progress",title:"Outcomes and in-progress",description:"Describing more than success and failure.",source:"@site/content/docs/learn/typed-errors/outcome-progress.md",sourceDirName:"learn/typed-errors",slug:"/learn/typed-errors/outcome-progress",permalink:"/learn/typed-errors/outcome-progress",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/typed-errors/outcome-progress.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Outcomes and in-progress",sidebar_position:6,description:"Describing more than success and failure."},sidebar:"learnSidebar",previous:{title:"Either & Ior (& Result)",permalink:"/learn/typed-errors/either-and-ior"},next:{title:"Your own error wrappers",permalink:"/learn/typed-errors/own-error-types"}},c={},l=[{value:"Outcomes: absence is not failure",id:"outcomes-absence-is-not-failure",level:2},{value:"In-progress values with Pedestal",id:"in-progress-values-with-pedestal",level:2},{value:"<code>Flow</code>s and <code>State</code>s",id:"flows-and-states",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"outcomes-and-in-progress-values",children:"Outcomes and in-progress values"}),"\n",(0,r.jsxs)(n.p,{children:["Arrow Core includes three different types to model success and failure:\n",(0,r.jsx)(n.code,{children:"Option"})," when no information is available on failure,\n",(0,r.jsx)(n.code,{children:"Either"})," when the success and failure cases are disjoint,\nand ",(0,r.jsx)(n.code,{children:"Ior"})," when success and failure may happen at the same time.\nBut sometimes life is a bit more complicated, and these type fall short.\nFortunately, the wonderful Kotlin community has developed libraries\nto cover other scenarios, with full integration with Arrow's ",(0,r.jsx)(n.code,{children:"Raise"})," approach."]}),"\n",(0,r.jsx)(n.h2,{id:"outcomes-absence-is-not-failure",children:"Outcomes: absence is not failure"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://block.github.io/quiver/",children:"Quiver"})," introduces the\n",(0,r.jsx)(n.a,{href:"https://block.github.io/quiver/-quiver%20-library/app.cash.quiver/index.html",children:(0,r.jsx)(n.code,{children:"Outcome"})}),"\nwith three states: ",(0,r.jsx)(n.code,{children:"Present"}),", ",(0,r.jsx)(n.code,{children:"Failure"}),", and ",(0,r.jsx)(n.code,{children:"Absent"}),". The last one is what\nsets it apart from ",(0,r.jsx)(n.code,{children:"Either"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'val good = 3.present()\nval bad  = "problem".failure()\nval whoKnows = Absent\n'})}),"\n",(0,r.jsx)(n.h2,{id:"in-progress-values-with-pedestal",children:"In-progress values with Pedestal"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://opensavvy.gitlab.io/groundwork/pedestal/api-docs/state/index.html",children:"Pedestal State"}),"\nintroduces ",(0,r.jsx)(n.a,{href:"https://opensavvy.gitlab.io/groundwork/pedestal/api-docs/state/opensavvy.state.progressive/-progressive-outcome/index.html",children:(0,r.jsx)(n.code,{children:"ProgressiveOutcome"})}),"\na type that combines the current state of a computation, and information\nabout how the corresponding task is evolving."]}),"\n",(0,r.jsxs)(n.admonition,{title:"Success does not mean stopped",type:"tip",children:[(0,r.jsxs)(n.p,{children:["The value ",(0,r.jsx)(n.code,{children:"Success(5, loading(0.4))"})," is perfectly valid,\nand describes a point in which:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The last successful value of a task is ",(0,r.jsx)(n.code,{children:"5"}),","]}),"\n",(0,r.jsx)(n.li,{children:"Retrieving the new value is at 40% completion."}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["To access the two components of a ",(0,r.jsx)(n.code,{children:"ProgressiveOutcome"})," you often\nuse Kotlin's destructuring.\nThe first part is very similar to ",(0,r.jsx)(n.code,{children:"Outcome"}),", in that it has ",(0,r.jsx)(n.code,{children:"Success"}),",\n",(0,r.jsx)(n.code,{children:"Failure"}),", and ",(0,r.jsx)(n.code,{children:"Incomplete"})," modes.\nThe second element describes the current progress. In this case we may\nbe ",(0,r.jsx)(n.code,{children:"Done"}),", or the task may be ",(0,r.jsx)(n.code,{children:"Loading"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'fun <E, A> printProgress(po: ProgressiveOutcome<E, A>) {\n    val (current, progress) = po\n    when {\n        current is Outcome.Success -> println("current value is ${current.value}!")\n        progress is Progress.Loading -> println("loading...")\n        progress is Progress.Done -> println("no value found :(")\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Pedestal State includes helper functions ",(0,r.jsx)(n.code,{children:"onState"})," that only execute when the\nvalue is in the corresponding state. These functions are especially useful\nto build a UI, where one often sees a component holding the current value\nand separate one describing the progress."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'fun <E, A> printProgress(po: ProgressiveOutcome<E, A>) {\n    po.onSuccess {\n        println("current value is $it")\n    }\n    po.onLoading {\n        println("loading...")\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"flows-and-states",children:[(0,r.jsx)(n.code,{children:"Flow"}),"s and ",(0,r.jsx)(n.code,{children:"State"}),"s"]}),"\n",(0,r.jsxs)(n.p,{children:["One useful pattern in frontend applications is to combine one of these\ntypes with a ",(0,r.jsx)(n.code,{children:"Flow"})," or a ",(0,r.jsx)(n.code,{children:"MutableState"})," (if using Compose), to model the\nevolution of a piece of data through time. In fact, Pedestal State has\na companion ",(0,r.jsx)(n.a,{href:"https://opensavvy.gitlab.io/groundwork/pedestal/api-docs/state-coroutines/index.html",children:"coroutines library"}),"\nincluding functions which help in using this pattern."]})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>i});var r=s(67294);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);