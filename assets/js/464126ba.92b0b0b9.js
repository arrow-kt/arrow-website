"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[6028],{92886:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var i=t(85893),s=t(11151),r=t(74866),o=t(85162);const a={title:"Quickstart",sidebar_position:1,sidebar_custom_props:{icon:"icon-quickstart.svg"}},l="Quickstart",c={id:"ecosystem/analysis/quickstart",title:"Quickstart",description:"This Quickstart explains how to set up Arrow Analysis in your Gradle project, and how to use it to get further insight in your code, and to introduce additional checks in your own functions and classes.",source:"@site/content/docs/ecosystem/analysis/quickstart.md",sourceDirName:"ecosystem/analysis",slug:"/ecosystem/analysis/quickstart",permalink:"/ecosystem/analysis/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/ecosystem/analysis/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Quickstart",sidebar_position:1,sidebar_custom_props:{icon:"icon-quickstart.svg"}},sidebar:"ecosystemSidebar",previous:{title:"Analysis",permalink:"/ecosystem/analysis/"},next:{title:"Pre and post-conditions",permalink:"/ecosystem/analysis/conditions"}},u={},d=[{value:"Adding the plug-in",id:"adding-the-plug-in",level:2},{value:"Arrow Analysis + Android",id:"arrow-analysis--android",level:3},{value:"Running the analysis",id:"running-the-analysis",level:2},{value:"Checks in functions",id:"checks-in-functions",level:2},{value:"Post-conditions",id:"post-conditions",level:3},{value:"Invariants in classes",id:"invariants-in-classes",level:2},{value:"Going further",id:"going-further",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"quickstart",children:(0,i.jsx)("decorated-text",{icon:a.sidebar_custom_props.icon,children:"Quickstart"})}),"\n",(0,i.jsx)(n.p,{children:"This Quickstart explains how to set up Arrow Analysis in your Gradle project, and how to use it to get further insight in your code, and to introduce additional checks in your own functions and classes."}),"\n",(0,i.jsx)(n.admonition,{title:"Media resources",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=yCZtnzTnpRA",children:(0,i.jsx)(n.em,{children:"Super-charge your build with Arrow Analysis"})})," by Alejandro Serrano"]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"adding-the-plug-in",children:"Adding the plug-in"}),"\n",(0,i.jsxs)(r.Z,{groupId:"build",children:[(0,i.jsx)(o.Z,{value:"gradleKotlin",label:"Gradle (Kotlin)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'plugins {\n  kotlin("multiplatform") version "1.8.10"\n  // other plugins\n  id("io.arrow-kt.analysis.kotlin") version "2.0.2"\n}\n\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n}\n'})})}),(0,i.jsx)(o.Z,{value:"gradleGroovy",label:"Gradle (Groovy)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"plugins {\n  id 'org.jetbrains.kotlin.multiplatform' version '1.8.10'\n  // other plugins\n  id 'io.arrow-kt.analysis.kotlin' version '2.0.2'\n}\n\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n}\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"This adds both the Kotlin compiler plug-in, which performs the checks, and the pre and post-conditions for the Kotlin standard library. You are ready to get your first analysis results."}),"\n",(0,i.jsx)(n.h3,{id:"arrow-analysis--android",children:"Arrow Analysis + Android"}),"\n",(0,i.jsxs)(n.p,{children:["If you want to use the plug-in in an Android project, you may run into ",(0,i.jsx)(n.a,{href:"https://youtrack.jetbrains.com/issue/KT-38576",children:"this Kotlin compiler issue"}),", characterized by the following error message:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"java.lang.AssertionError: Duplicated JavaClassDescriptor ... reported to IC\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To solve this problem you have to disable precise Java tracking, by adding the following line in your ",(0,i.jsx)(n.code,{children:"gradle.properties"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"kotlin.incremental.usePreciseJavaTracking=false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running-the-analysis",children:"Running the analysis"}),"\n",(0,i.jsx)(n.p,{children:"Open a new file and write the following line. This code is incorrect because you want to obtain the third element of an empty list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val wrong = emptyList<Int>().get(2)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Run the analysis by executing the corresponding Gradle task (usually ",(0,i.jsx)(n.code,{children:"build"})," or ",(0,i.jsx)(n.code,{children:"compileKotlin"}),"), and (if everything is correctly configured) you should get the following message:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"e: Example.kt: (1, 18): pre-condition `index within bounds` is not satisfied in `get(2)`\n  -> unsatisfiable constraint: `((2 >= 0) && (2 < emptyList<Int>().size))`\n  -> `2` bound to param `index` in `kotlin.collections.List.get` \n  -> main function body\n"})}),"\n",(0,i.jsx)(n.p,{children:"There's a lot of information there, so let's break it into pieces:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Example.kt: (1, 18)"}),": the place where the problem lies (but you already knew that \ud83d\ude1c);"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pre-condition 'index within bounds' is not satisfied"}),': this is the description of the problem. Something which should be true ("index within bounds") for the arguments of a function (',(0,i.jsx)(n.em,{children:"pre-condition"}),") is not true (not ",(0,i.jsx)(n.em,{children:"satisfied"}),");"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"((2 >= 0) && (2 < emptyList<Int>().size))"}),': this is the formula which expresses the "index within bounds" pre-condition more formally. By inspecting this formula, you can see that the first half (',(0,i.jsx)(n.code,{children:"2 >= 0"}),") is OK, but there are problems with the second half (",(0,i.jsx)(n.code,{children:"2 < emptyList<Int>().size"}),"), since that size is 0;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"'2' bound to param 'index'"}),": this is additional information about the function call;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"main function body"}),": the last part of the message describes branching information. For example, if we had an ",(0,i.jsx)(n.code,{children:"if"}),' expression, it would tell us whether we are in the "condition true" branch of the "condition false" branch. When there are no conditions, we just speak of ',(0,i.jsx)(n.em,{children:"main function body"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Errors arising from function calls whose pre-conditions are not safisfied are the ",(0,i.jsx)(n.strong,{children:"main"})," type of problems you'll encounter in the usage of Arrow Analysis."]}),"\n",(0,i.jsx)(n.h2,{id:"checks-in-functions",children:"Checks in functions"}),"\n",(0,i.jsx)(n.p,{children:"Arrow Analysis extends the contract mechanism provided by Kotlin, and attaches two pieces of information to each function:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["its ",(0,i.jsx)(n.em,{children:"pre-conditions"})," describe what should be true about the arguments given to a function call,"]}),"\n",(0,i.jsxs)(n.li,{children:["its ",(0,i.jsx)(n.em,{children:"post-conditions"})," describe what is true about the returned value of the function. Note that it only makes sense to talk about post-conditions once we know the pre-conditions hold."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's write a small function which increments an integral value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"fun increment(x: Int): Int = x + 1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, in our domain it only makes sense to call this function with positive numbers: the perfect job for a pre-condition. Alas, adding this pre-condition forces us to turn the simple function into a block and use ",(0,i.jsx)(n.code,{children:"return"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import arrow.analysis.pre\n\nfun increment(x: Int): Int {\n  pre(x > 0) { "value must be positive" }\n  return x + 1\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can check that the pre-condition works by calling the function with a negative number."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val example = increment(-1)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"e: pre-condition `value must be positive` is not satisfied in `increment(-1)`\n  -> unsatisfiable constraint: `(-1 > 0)`\n"})}),"\n",(0,i.jsx)(n.h3,{id:"post-conditions",children:"Post-conditions"}),"\n",(0,i.jsx)(n.p,{children:"But what about if we change the code to the following?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val example = increment(increment(1))\n"})}),"\n",(0,i.jsx)(n.p,{children:"A very similar error arises:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"e: pre-condition `value must be positive` is not satisfied in `increment(increment(1))`\n-> unsatisfiable constraint: `(increment(1) > 0)`\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This error tells us that Arrow Analysis was not able to deduce whether ",(0,i.jsx)(n.code,{children:"increment(1)"})," is positive or not. To fix the problem, we need to introduce a ",(0,i.jsx)(n.em,{children:"post-condition"}),", a ",(0,i.jsx)(n.strong,{children:"promise"})," about the result of the function. In this case, we know that given a positive number, the result of incrementing it is also positive."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import arrow.analysis.pre\nimport arrow.analysis.post\n\nfun increment(x: Int): Int {\n  pre(x > 0) { "value must be positive" }\n  return (x + 1).post({ it > 0 }) { "result is positive" }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The post-condition is attached to the result value of the function. The first argument works in a special way: it should be a lambda whose argument represents the return value. You'll often see ",(0,i.jsx)(n.code,{children:"{ it > 0 }"})," in this docs, but feel free to write it as ",(0,i.jsx)(n.code,{children:"{ result -> result > 0 }"})," if that looks better for you."]}),"\n",(0,i.jsxs)(n.p,{children:["Most importantly, the error in the double call of ",(0,i.jsx)(n.code,{children:"increment"})," is now gone! \ud83d\ude0c"]}),"\n",(0,i.jsxs)(n.p,{children:["Arrow Analysis does not blindly accept any post-condition you write, the tool ensure it's actually true. If you change it to ",(0,i.jsx)(n.code,{children:"{ it < 0 }"}),", you get an error:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"e: declaration `increment` fails to satisfy the post-condition: ($result < 0)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"invariants-in-classes",children:"Invariants in classes"}),"\n",(0,i.jsxs)(n.p,{children:["Imagine now that this notion of being positive occurs very often in your domain. It makes sense then to introduce a new ",(0,i.jsx)(n.em,{children:"type"})," for this concept, and to ensure that any usage obbeys the positiveness condition. In this case we talk about an ",(0,i.jsx)(n.em,{children:"invariant"}),", something which is always true when using that particular type."]}),"\n",(0,i.jsxs)(n.p,{children:["Arrow Analysis turns your ",(0,i.jsx)(n.code,{children:"require"}),"s in classes into checks at compile time."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class Positive(val value: Int) {\n  init { require(value > 0) }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following code is rejected with a very similar error to the ones above:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val positiveExample = Positive(-1)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The tool is powerful enough to track the invariants of every value involved in a computation. For example, we can introduce an addition operation with two ",(0,i.jsx)(n.code,{children:"Positive"})," numbers, and we can check statically that the result is again a positive number (otherwise we would not be allowed to construct an instance of ",(0,i.jsx)(n.code,{children:"Positive"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"fun Positive.add(other: Positive) =\n  Positive(this.value + other.value)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"going-further",children:"Going further"}),"\n",(0,i.jsx)(n.p,{children:"This Quickstart shows the basic features of Arrow Analysis. The rest of the documentation describes all its features in depth, including thorough explanations about how to track information about properties of an object, and how to deal with mutability."})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>o});t(67294);var i=t(90512);const s={tabItem:"tabItem_Ymn6"};var r=t(85893);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)(s.tabItem,o),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>w});var i=t(67294),s=t(90512),r=t(12466),o=t(16550),a=t(20469),l=t(91980),c=t(67392),u=t(50012);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:s}}=e;return{value:n,label:t,attributes:i,default:s}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[c,d]=m({queryString:t,groupId:s}),[f,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,u.Nk)(t);return[s,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),b=(()=>{const e=c??f;return p({value:e,tabValues:r})?e:null})();(0,a.Z)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),x(e)}),[d,x,r]),tabValues:r}}var x=t(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(85893);function y(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),s=a[t].value;s!==i&&(c(n),o(s))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...r,className:(0,s.Z)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:s}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=f(e);return(0,g.jsxs)("div",{className:(0,s.Z)("tabs-container",b.tabList),children:[(0,g.jsx)(y,{...n,...e}),(0,g.jsx)(j,{...n,...e})]})}function w(e){const n=(0,x.Z)();return(0,g.jsx)(v,{...e,children:d(e.children)},String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(67294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);