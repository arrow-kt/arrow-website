"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[3769],{30095:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var n=o(85893),i=o(11151);const a={title:"Roll your own Computation blocks in Kotlin",image:"https://img.youtube.com/vi/0_zatebXMDU/hqdefault.jpg",category:"videos",tags:["core","fx","videos"],link:"https://youtu.be/0_zatebXMDU",event:"Lambda Lille"},s=void 0,r={permalink:"/community/blog/2020/12/16/roll-your-own-computation-blocks-kotlin",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-12-16-roll-your-own-computation-blocks-kotlin.md",source:"@site/content/blog/2020-12-16-roll-your-own-computation-blocks-kotlin.md",title:"Roll your own Computation blocks in Kotlin",description:"Computation blocks empower library authors and users to build ad-hoc operators and DSLs over any data-type getting rid of API complexity and simplifying composition. In this talk, we will learn how we can build Computation blocks over Kotlin suspend functions & the Arrow Continuations library's reset / shift capabilities. We will demonstrate the composition of well known JVM data-types and patterns such as lists, futures, streams, and IOs, where callback chains can be simply replaced by a single",date:"2020-12-16T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"fx",permalink:"/community/blog/tags/fx"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.71,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Roll your own Computation blocks in Kotlin",image:"https://img.youtube.com/vi/0_zatebXMDU/hqdefault.jpg",category:"videos",tags:["core","fx","videos"],link:"https://youtu.be/0_zatebXMDU",event:"Lambda Lille"},unlisted:!1,prevItem:{title:"Advanced FP for the Enterprise Bee: Traverse",permalink:"/community/blog/2021/01/08/advanced-fp-enterprise-bee-traverse"},nextItem:{title:"Fight Complexity with Functional Programming",permalink:"/community/blog/2020/11/19/fight-complexity-with-functional-programming"}},l={authorsImageUrls:[]},c=[];function u(t){const e={code:"code",p:"p",...(0,i.a)(),...t.components};return(0,n.jsxs)(e.p,{children:["Computation blocks empower library authors and users to build ad-hoc operators and DSLs over any data-type getting rid of API complexity and simplifying composition. In this talk, we will learn how we can build Computation blocks over Kotlin suspend functions & the Arrow Continuations library's ",(0,n.jsx)(e.code,{children:"reset"})," / ",(0,n.jsx)(e.code,{children:"shift"})," capabilities. We will demonstrate the composition of well known JVM data-types and patterns such as lists, futures, streams, and IOs, where callback chains can be simply replaced by a single\nsuspended operator. The Kotlin suspension system provides enough capabilities to implement delimited continuations allowing us to ignore methods such as ",(0,n.jsx)(e.code,{children:"map"})," & ",(0,n.jsx)(e.code,{children:"flatMap"}),' on your favorite data-type in favor of direct imperative syntax. Leveraging Kotlin suspension & thinking of Continuations as "The Mother of all Monads", we will embark on this journey where we\'ll build and roll our own computation blocks with Arrow Continuations.']})}function p(t={}){const{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}},11151:(t,e,o)=>{o.d(e,{Z:()=>r,a:()=>s});var n=o(67294);const i={},a=n.createContext(i);function s(t){const e=n.useContext(a);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),n.createElement(a.Provider,{value:e},t.children)}}}]);