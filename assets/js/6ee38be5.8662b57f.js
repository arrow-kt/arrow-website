"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[6307],{57570:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=o(85893),i=o(11151);const r={title:"Asynchronisme et hexagone en Kotlin avec ArrowKt",image:"https://img.youtube.com/vi/moJpV-BgezM/hqdefault.jpg",category:"videos",tags:["core","videos"],link:"https://youtu.be/moJpV-BgezM",event:"Lambda Lille"},a=void 0,s={permalink:"/community/blog/2020/06/11/asynchronisme-et-hexagone-en-kotlin-avec-Arrow",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-06-11-asynchronisme-et-hexagone-en-kotlin-avec-Arrow.md",source:"@site/content/blog/2020-06-11-asynchronisme-et-hexagone-en-kotlin-avec-Arrow.md",title:"Asynchronisme et hexagone en Kotlin avec ArrowKt",description:"J'aime bien le DDD et surtout les architectures hexagonales. Avoir un domaine auto-portant et non coupl\xe9 \xe0 des blocs techniques comme Spring (ou autres) apporte beaucoup dans la testabilit\xe9 et l'\xe9volutivit\xe9 de l'application.",date:"2020-06-11T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.665,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Asynchronisme et hexagone en Kotlin avec ArrowKt",image:"https://img.youtube.com/vi/moJpV-BgezM/hqdefault.jpg",category:"videos",tags:["core","videos"],link:"https://youtu.be/moJpV-BgezM",event:"Lambda Lille"},unlisted:!1,prevItem:{title:"Type Proofs and FP for the Kotlin Type System",permalink:"/community/blog/2020/06/16/type-proofs-fp-kotlin-talk"},nextItem:{title:"Arrow Fx: Functional Domain Modeling with Kotlin",permalink:"/community/blog/2020/06/05/functional-domain-modeling-kotlin"}},l={authorsImageUrls:[]},c=[];function u(e){const t={li:"li",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"J'aime bien le DDD et surtout les architectures hexagonales. Avoir un domaine auto-portant et non coupl\xe9 \xe0 des blocs techniques comme Spring (ou autres) apporte beaucoup dans la testabilit\xe9 et l'\xe9volutivit\xe9 de l'application.\nLes mod\xe8les d'asynchronismes (programmation r\xe9active, retard\xe9e, coroutines...) emp\xeachent la dissociation stricte de notre mod\xe8le m\xe9tier et de notre code infra dans un langage comme Kotlin.\nOblig\xe9 d'utiliser une lib de coroutine ou autre programmation reactive.\nDeux solutions s'offrent alors :"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"D\xe9finir que les mod\xe8les d'asynchronisme sont des invariants de notre domaine et accepter ce couplage"}),"\n",(0,n.jsx)(t.li,{children:"Chercher comment mod\xe9liser notre domaine comme un ensemble de comportements asynchrones\nDans ce talk nous allons voir comment r\xe9aliser la deuxi\xe8me solution en utilisant la librairie Arrow et son mod\xe8le conceptuel d'asynchronisme pour nous permettre de d\xe9coupler notre domaine de toute logique d'infrastructure."}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>s,a:()=>a});var n=o(67294);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);