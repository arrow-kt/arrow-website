"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[1868],{7816:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=i(85893),t=i(11151);const o={title:"Your own error wrappers",description:"Writing your own DSLs with Raise.",sidebar_position:7},s="Creating your own error wrappers",a={id:"learn/typed-errors/own-error-types",title:"Your own error wrappers",description:"Writing your own DSLs with Raise.",source:"@site/content/docs/learn/typed-errors/own-error-types.md",sourceDirName:"learn/typed-errors",slug:"/learn/typed-errors/own-error-types",permalink:"/learn/typed-errors/own-error-types",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/typed-errors/own-error-types.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Your own error wrappers",description:"Writing your own DSLs with Raise.",sidebar_position:7},sidebar:"learnSidebar",previous:{title:"Outcomes and in-progress",permalink:"/learn/typed-errors/outcome-progress"},next:{title:"Coroutines",permalink:"/learn/coroutines/"}},c={},l=[{value:"Basic functionality",id:"basic-functionality",level:2},{value:"Reflections on <code>Failure</code>",id:"reflections-on-failure",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"creating-your-own-error-wrappers",children:"Creating your own error wrappers"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Raise"})," is a powerful tool that allows us to create our own DSLs to raise typed errors.\nIt easily allows integration with existing libraries and frameworks that offer similar data types like ",(0,r.jsx)(n.code,{children:"Either"})," or even your own custom types.\nFor example, let's take a popular ADT often used in the front end, a type that models ",(0,r.jsx)(n.code,{children:"Loading"}),", ",(0,r.jsx)(n.code,{children:"Content"}),", or ",(0,r.jsx)(n.code,{children:"Failure"}),", often abbreviated as ",(0,r.jsx)(n.code,{children:"LCE"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"sealed interface Lce<out E, out A> {\n  object Loading : Lce<Nothing, Nothing>\n  data class Content<A>(val value: A) : Lce<Nothing, A>\n  data class Failure<E>(val error: E) : Lce<E, Nothing>\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-functionality",children:"Basic functionality"}),"\n",(0,r.jsxs)(n.p,{children:["Let's say that once a ",(0,r.jsx)(n.code,{children:"Failure"})," or ",(0,r.jsx)(n.code,{children:"Loading"})," case is encountered, we want to short-circuit and not continue with the computation.\nIt's easy to define a ",(0,r.jsx)(n.code,{children:"Raise"})," instance for ",(0,r.jsx)(n.code,{children:"Lce"})," that does just that. We'll use the composition pattern to do this ",(0,r.jsx)(n.strong,{children:"without"})," context receivers.\nSince we need to ",(0,r.jsx)(n.em,{children:"raise"})," both ",(0,r.jsx)(n.code,{children:"Lce.Loading"})," and ",(0,r.jsx)(n.code,{children:"Lce.Failure"}),", our ",(0,r.jsx)(n.code,{children:"Raise"})," instance will need to be able to ",(0,r.jsx)(n.code,{children:"raise"})," ",(0,r.jsx)(n.code,{children:"Lce<E, Nothing>"}),", and we wrap that in a ",(0,r.jsx)(n.code,{children:"LceRaise"})," class.\nWithin that class, a ",(0,r.jsx)(n.code,{children:"bind"})," function can be defined to short-circuit any encountered ",(0,r.jsx)(n.code,{children:"Failure"})," or ",(0,r.jsx)(n.code,{children:"Loading"})," case or otherwise return the ",(0,r.jsx)(n.code,{children:"Content"})," value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@JvmInline\nvalue class LceRaise<E>(val raise: Raise<Lce<E, Nothing>>) : Raise<Lce<E, Nothing>> by raise {\n  fun <A> Lce<E, A>.bind(): A =  when (this) {\n    is Lce.Content -> value\n    is Lce.Failure -> raise.raise(this)\n    Lce.Loading -> raise.raise(Lce.Loading)\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["All that is required now is a DSL function. We can use the ",(0,r.jsx)(n.code,{children:"recover"})," or ",(0,r.jsx)(n.code,{children:"fold"})," function to obtain an instance of ",(0,r.jsx)(n.code,{children:"RaiseLce<E, Nothing>"})," from the ",(0,r.jsx)(n.code,{children:"Raise"})," type class.\nWe wrap the ",(0,r.jsx)(n.code,{children:"block"})," in an ",(0,r.jsx)(n.code,{children:"Lce.Content"})," value and return any encountered ",(0,r.jsx)(n.code,{children:"Lce<E, Nothing>"})," value. We can call ",(0,r.jsx)(n.code,{children:"block"})," by wrapping ",(0,r.jsx)(n.code,{children:"Raise<Lce<E, Nothing>>"})," in ",(0,r.jsx)(n.code,{children:"LceRaise"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@OptIn(ExperimentalTypeInference::class)\ninline fun <E, A> lce(@BuilderInference block: LceRaise<E>.() -> A): Lce<E, A> =\n  recover({ Lce.Content(block(LceRaise(this))) }) { e: Lce<E, Nothing> -> e }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can now use this DSL to compose our computations and ",(0,r.jsx)(n.code,{children:"Lce"})," values in the same way as we've discussed above in this document.\nFurthermore, since this DSL is built on top of ",(0,r.jsx)(n.code,{children:"Raise"}),", we can use all the functions we've discussed above."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'fun example() {\n  lce {\n    val a = Lce.Content(1).bind()\n    val b = Lce.Content(1).bind()\n    a + b\n  } shouldBe Lce.Content(2)\n\n  lce {\n    val a = Lce.Content(1).bind()\n    ensure(a > 1) { Lce.Failure("a is not greater than 1") }\n    a + 1\n  } shouldBe Lce.Failure("a is not greater than 1")\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If we'd used ",(0,r.jsx)(n.em,{children:"context parameters"}),", defining this DSL would be even more straightforward, and we could use the ",(0,r.jsx)(n.code,{children:"Raise"})," type class directly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"context(_: Raise<Lce<E, Nothing>>)\nfun <E, A> Lce<E, A>.bind(): A =  when (this) {\n  is Lce.Content -> value\n  is Lce.Failure -> raise(this)\n  Lce.Loading -> raise(Lce.Loading)\n}\n\ninline fun <E, A> lce(@BuilderInference block: Raise<Lce<E, Nothing>>.() -> A): Lce<E, A> =\n  recover({ Lce.Content(block(this)) }) { e: Lce<E, Nothing> -> e }\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"reflections-on-failure",children:["Reflections on ",(0,r.jsx)(n.code,{children:"Failure"})]}),"\n",(0,r.jsxs)(n.p,{children:["The reason to choose ",(0,r.jsx)(n.code,{children:"Lce<E, Nothing>"})," as type for ",(0,r.jsx)(n.code,{children:"Failure"})," allows for a DSL that has multiple errors.\nLet's consider now a type similar to ",(0,r.jsx)(n.code,{children:"Lce"}),", but with additional states which are not considered success."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"DialogResult<out T>\n \u251c Positive<out T>(value: T) : DialogResult<T>\n \u251c Neutral : DialogResult<Nothing>\n \u251c Negative : DialogResult<Nothing>\n \u2514 Cancelled: DialogResult<Nothing>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can not conveniently provide ",(0,r.jsx)(n.code,{children:"Raise"})," over this ",(0,r.jsx)(n.em,{children:"flat"})," type ",(0,r.jsx)(n.code,{children:"DialogResult"}),", and are kind-of forced to use ",(0,r.jsx)(n.code,{children:"DialogResult<Nothing>"}),". However, if we stratify our type differently,"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"DialogResult<out T>\n \u251c Positive<out T>(value: T) : DialogResult<T>\n \u2514 Error : DialogResult<Nothing>\n    \u251c Neutral : Error\n    \u251c Negative : Error\n    \u2514 Cancelled: Error\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can again benefit from ",(0,r.jsx)(n.code,{children:"Raise<DialogResult.Error>"}),", and the reason why that is ",(0,r.jsx)(n.strong,{children:"much"})," more desirable, is that you can now also interop with ",(0,r.jsx)(n.code,{children:"Either"}),"!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"dialogResult {\n  val x: DialogResult.Positive(1).bind()\n  val y: Int = DialogResult.Error.left().bind()\n  x + y\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["That can be useful if you want to for example ",(0,r.jsx)(n.em,{children:"accumulate errors"}),", now you can benefit from the default behavior in Kotlin."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun dialog(int: Int): DialogResult<Int> =\n  if(int % 2 == 0) DialogResult.Positive(it) else Dialog.Neutral\n\nval res: Either<NonEmptyList<DialogResult.Error>, NonEmptyList<Int>> =\n  listOf(1, 2, 3).mapOrAccumulate { i: Int ->\n    dialog(it).getOrElse { raise(it) }\n  }\n\ndialogResult {\n  res.mapLeft { ... }.bind()\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Further discussion",type:"info",children:(0,r.jsxs)(n.p,{children:["This section was created as a response to\n",(0,r.jsx)(n.a,{href:"https://github.com/arrow-kt/arrow-website/issues/161",children:"this issue in our repository"}),".\nLet's create great docs for Arrow together!"]})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>s});var r=i(67294);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);