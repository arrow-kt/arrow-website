"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[7381],{15381:(t,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var e=i(85893),o=i(11151);const a={title:"Domain Model Validation In Kotlin: Part 4",image:"https://miro.medium.com/max/1400/1*3jegLLY4GbGj71nauV2l_Q.png",category:"articles",tags:["core","articles"],link:"https://tibtof.medium.com/domain-model-validation-in-kotlin-part-4-2462b334ca6c"},r=void 0,l={permalink:"/community/blog/2022/03/31/domain-model-validation-in-kotlin-part-4",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-03-31-domain-model-validation-in-kotlin-part-4.md",source:"@site/content/blog/2022-03-31-domain-model-validation-in-kotlin-part-4.md",title:"Domain Model Validation In Kotlin: Part 4",description:"In this final part of the series, Tiberiu puts everything together in a small CLI application, using Arrow data types and computation blocks",date:"2022-03-31T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"articles",permalink:"/community/blog/tags/articles"}],readingTime:.175,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Domain Model Validation In Kotlin: Part 4",image:"https://miro.medium.com/max/1400/1*3jegLLY4GbGj71nauV2l_Q.png",category:"articles",tags:["core","articles"],link:"https://tibtof.medium.com/domain-model-validation-in-kotlin-part-4-2462b334ca6c"},unlisted:!1,prevItem:{title:"Functional programming in Kotlin: exploring Arrow by Ties Van de Ven",permalink:"/community/blog/2022/05/18/functional-programming-kotlin-exploring-arrow-ties-van-de-ven"},nextItem:{title:"Domain Model Validation In Kotlin: Part 3",permalink:"/community/blog/2022/03/10/domain-model-validation-in-kotlin-part-3"}},m={authorsImageUrls:[]},s=[];function c(t){const n={p:"p",...(0,o.a)(),...t.components};return(0,e.jsx)(n.p,{children:"In this final part of the series, Tiberiu puts everything together in a small CLI application, using Arrow data types and computation blocks\nto handle validation errors and exceptions in a unitary and composable way."})}function d(t={}){const{wrapper:n}={...(0,o.a)(),...t.components};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(c,{...t})}):c(t)}},11151:(t,n,i)=>{i.d(n,{Z:()=>l,a:()=>r});var e=i(67294);const o={},a=e.createContext(o);function r(t){const n=e.useContext(a);return e.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function l(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),e.createElement(a.Provider,{value:n},t.children)}}}]);