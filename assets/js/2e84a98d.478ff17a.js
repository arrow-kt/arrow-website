"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[1002],{53011:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=i(85893),t=i(11151);const o={sidebar_position:6},r="Reflection",a={id:"learn/immutable-data/reflection",title:"Reflection",description:"Although we strongly recommend generating optics using the DSL and @optics attribute, sometimes this is impossible. We provide the small utility package arrow-optics-reflect for those scenarios, which bridges Arrow Optics with Kotlin's reflection capabilities.",source:"@site/content/docs/learn/immutable-data/reflection.md",sourceDirName:"learn/immutable-data",slug:"/learn/immutable-data/reflection",permalink:"/learn/immutable-data/reflection",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/immutable-data/reflection.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"learnSidebar",previous:{title:"Prisms & Isos",permalink:"/learn/immutable-data/prism-iso"},next:{title:"Regular expressions",permalink:"/learn/immutable-data/regex"}},l={},c=[{value:"Nullables and collections",id:"nullables-and-collections",level:2},{value:"Prisms",id:"prisms",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"reflection",children:"Reflection"}),"\n",(0,s.jsxs)(n.p,{children:["Although we strongly recommend generating optics using the DSL and ",(0,s.jsx)(n.code,{children:"@optics"})," attribute, sometimes this is impossible. We provide the small utility package ",(0,s.jsx)(n.code,{children:"arrow-optics-reflect"})," for those scenarios, which bridges Arrow Optics with ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/reflection.html",children:"Kotlin's reflection"})," capabilities."]}),"\n",(0,s.jsxs)(n.p,{children:["Kotlin provides a simple way to obtain a reference to a class member by using ",(0,s.jsx)(n.code,{children:"ClassName::memberName"}),". For example, given the following class definition:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"data class Person(val name: String, val friends: List<String>)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["we can use ",(0,s.jsx)(n.code,{children:"Person::name"})," and ",(0,s.jsx)(n.code,{children:"Person::friends"})," to refer to each of the fields in the class. Those references are very similar to optics.\n",(0,s.jsx)(n.code,{children:"arrow-optics-reflect"})," provides extension methods that turn those references into optics. You can obtain a lens for the ",(0,s.jsx)(n.code,{children:"name"})," field in ",(0,s.jsx)(n.code,{children:"Person"})," by writing:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Person::name.lens\n"})}),"\n",(0,s.jsx)(n.p,{children:"which you can later use as any other lens:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun example() {\n  val p = Person("me", listOf("pat", "mat"))\n  val m = Person::name.lens.modify(p) { it.capitalize() }\n  m.name shouldBe "Me"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["This only works on ",(0,s.jsx)(n.code,{children:"data"})," classes with a public ",(0,s.jsx)(n.code,{children:"copy"})," method (which is the default). Remember that, as opposed to a mutable variable, optics will always create a ",(0,s.jsx)(n.em,{children:"new"})," copy when asking for modification."]})}),"\n",(0,s.jsx)(n.h2,{id:"nullables-and-collections",children:"Nullables and collections"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes it's preferable to expose a field using a different optic:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When the field type is nullable, you can use ",(0,s.jsx)(n.code,{children:"optional"})," to obtain an optional instead of a lens."]}),"\n",(0,s.jsxs)(n.li,{children:["When the field type is a ",(0,s.jsx)(n.code,{children:"List"})," or ",(0,s.jsx)(n.code,{children:"Map"}),", you can use ",(0,s.jsx)(n.code,{children:"every"})," and ",(0,s.jsx)(n.code,{children:"values"})," to obtain a traversal to the elements."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun example() {\n  val p = Person("me", listOf("pat", "mat"))\n  val m = Person::friends.every.modify(p) { it.capitalize() }\n  m.friends shouldBe listOf("Pat", "Mat")\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"prisms",children:"Prisms"}),"\n",(0,s.jsx)(n.p,{children:"A typical pattern in Kotlin programming is to define a sealed abstract class (or interface) with subclasses representing choices in a union."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"sealed interface Cutlery\nobject Fork: Cutlery\nobject Spoon: Cutlery\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We provide an ",(0,s.jsx)(n.code,{children:"instance"})," method that creates a prism focused only on a specific subclass of a parent class. Both ends are essential and must be provided when creating the optic:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"instance<Cutlery, Fork>()\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can compose this optic freely with others. Here's an example in which we obtain the number of forks in a list of cutlery using optics:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun example() {\n  val things = listOf(Fork, Spoon, Fork)\n  val forks = Every.list<Cutlery>() compose instance<Cutlery, Fork>()\n  val noOfForks = forks.size(things)\n  noOfForks shouldBe 2\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>r});var s=i(67294);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);