"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[2348],{22761:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/02/15/integration","metadata":{"permalink":"/community/blog/2025/02/15/integration","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2025-02-15-integration.md","source":"@site/content/blog/2025-02-15-integration.md","title":"Work on more integration","description":"Once Arrow 2.0 is finally released,","date":"2025-02-15T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":1.6,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Work on more integration","category":"articles","no_image_on_post":true,"tags":["core","articles"]},"unlisted":false,"nextItem":{"title":"Arrow 2.0 release","permalink":"/community/blog/2024/12/05/arrow-2-0"}},"content":"Once Arrow 2.0 is finally [released](https://arrow-kt.io/community/blog/2024/12/05/arrow-2-0/),\\na fair question is what are the new goals of the Arrow project.\\nThis post outlines some of the future plans of the maintainer team.\\nHaving said so, Arrow welcomes any contribution \u2014 code or ideas \u2014\\nthat fits its goal of being a _companion in the Kotlin journey_.\\n\\nApart from the any needed bugfixes, we aim to improve our integration\\nwith the broader Kotlin ecosystem, a line of work we started with\\nthe [optics module for Compose](https://arrow-kt.io/learn/quickstart/compose/#updating-the-model).\\nOne line of work already in progress is better integration with Ktor.\\nWe would really appreciate any input on what integrations you miss\\nas Arrow user.\\n\\nAt this point, the [`arrow-kt` organization](https://github.com/arrow-kt/)\\nhas more than 50 projects. Of those, only a handful have graduated\\nfrom a proof-of-concept into part of Arrow. To make this status\\nmore clear, the `arrow-integrations` and SuspendApp projects are\\nnow hosted in the main `arrow` repository. This means that those\\nprojects become part of the regular Arrow release schedule, instead\\nof the current model in which some libraries may be outdated for a\\nfew weeks. Furthermore, it removes some burden from maintainers, which\\nnow only need to care about one single repository.\\n\\nSpeaking of maintainance, in the past weeks we have been paying some\\nof the debt in our build files, that had grown too wild.\\nTechnically, we have moved from separate [`arrow-gradle-config`](https://github.com/arrow-kt/arrow-gradle-config)\\ninto a convention plug-in withing the same repository.\\nThis process has revealed some lack of uniformity between the\\ndifferent projects, especially with respect to supported platforms.\\nFrom now on, all Arrow libraries support Native targets in \\n[tiers 1 and 2](https://kotlinlang.org/docs/native-target-support.html),\\nplus Windows + MinGW.\\n\\nFrom the point of view of Arrow users, the only visible part of\\nthis transition is that the next version of Arrow integration modules\\nand SuspendApp should be 2.1.0, instead of 0.x. Note that no breaking\\nchanges are expected, regardless of the major version bump."},{"id":"/2024/12/05/arrow-2-0","metadata":{"permalink":"/community/blog/2024/12/05/arrow-2-0","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2024-12-05-arrow-2-0.md","source":"@site/content/blog/2024-12-05-arrow-2-0.md","title":"Arrow 2.0 release","description":"We are happy to announce the next major release of Arrow, version 2.0!","date":"2024-12-05T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":4.85,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow 2.0 release","image":"https://xebia.com/wp-content/uploads/2023/04/arrow-release-ftr.jpg","category":"articles","no_image_on_post":true,"tags":["core","articles"]},"unlisted":false,"prevItem":{"title":"Work on more integration","permalink":"/community/blog/2025/02/15/integration"},"nextItem":{"title":"Arrow Open Space @ Lambda World","permalink":"/community/blog/2024/10/03/arrow-open-space"}},"content":"We are happy to announce the next major release of Arrow, version 2.0!\\n\\nThis release is built with the new K2 compiler, and this gives us the ability\\nto support a wider range of platforms, including WebAssembly. From now on, we shall\\nprovide artifacts for every platform supported by Kotlin.\\n\\nApart from stabilization and general bug fixing, the theme of this release\\nis improving the different DSLs provided by Arrow libraries. Our goal is to\\nempower developers to write more succinct and readable code.\\n\\n<center>\\n<p>\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube-nocookie.com/embed/2sfnDkPWoUw?si=pLR9n67BSOzN1TGf\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n</p>\\n</center>\\n\\n## Upgrading to 2.0\\n\\nAs previously announced, migrating your projects to this release should be hassle-free\\nif your code compiled in 1.2.x without any deprecation warnings. Note that we talk about\\n**source** compatibility here, we had to break **binary** compatibility in several places\\nto implement improvements, such as in `NonEmptyList` and [`Schedule`](https://github.com/arrow-kt/arrow/pull/3504).\\n\\nThere are two exceptions to this seamless transition. First, it was discovered that some\\nfunctions for `Map` in `Raise` collide with those of the standard library. Furthermore,\\nArrow\'s variants return other `Map`, whereas the ones in the standard library return `List`.\\nThe decision was to [rename them](https://github.com/arrow-kt/arrow/pull/3512/files#diff-b378045af72d02f1e5d4037d411102fcdb768239abeabedf69a4520b74ad0278).\\n\\nThe second breaking change is related to [improved optics](#improved-optics), please\\nconsult that section for further information.\\n\\n## Simple accumulation in Raise\\n\\nOne of the core concepts when working with typed errors is the distinction\\nbetween fail-first and [accumulation of errors](/learn/typed-errors/working-with-typed-errors/#accumulating-different-computations). Until now, the latter mode\\nrequired using `zipOrAccumulate` and `mapOrAccumulate`, which sometimes obscure the actual\\nflow of the computation.\\n\\nIn Arrow 2.0 we have sprinkled some DSL dust over `Raise`, and now you can\\nwrite your code in a more linear way. Inside an `accumulate` block (or in\\ngeneral, any `RaiseAccumulate`) you use `by accumulating` to execute some\\ncomputation keeping all the errors.\\n\\n```kotlin\\n// version with `zipOrAccumulate`\\nzipOrAccumulate(\\n    { checkOneThing() },\\n    { checkOtherThing() }\\n) { a, b -> doSomething(a, b) }\\n\\n// version with `accumulate`\\naccumulate {\\n    val a by accumulating { checkOneThing() }\\n    val b by accumulating { checkOtherThing() }\\n    doSomething(a, b)\\n}\\n```\\n\\nThis DSL also includes shortcuts for the most common operations, like\\n`bind`ing and accumulating any problem, or checking a single property\\nof some data.\\n\\n```kotlin\\naccumulate {\\n    val name by Name(rawName).bindOrAccumulate()\\n    ensureOrAccumulate(age >= 18) { UnderAge }\\n    Person(name, age)\\n}\\n```\\n\\nNote that the API may still undergo some change. At this point you need `@OptIn(ExperimentalRaiseAccumulateApi::class)` to allow their usage in your code.\\n\\n## Additions to Fx\\n\\nWriting coroutine-heavy code may become cumbersome over time, especially if\\none intends to use as much concurrency as possible. Arrow Fx includes a `parZip`\\nfunction, but not everybody enjoys having so many brackets.\\n\\n```kotlin\\nparZip(\\n    { downloadFile() },\\n    { loadDataFromDatabase() }\\n) { file, data -> Result(file, data) }\\n```\\n\\nThe new [`awaitAll` scope](/learn/coroutines/parallel/#await-all-scopes) tries to improve the situation by tweaking the\\nusual `async` mechanism, ensuring that all `Deferred` values are `await`ed\\nonce the first one is requested. That means that the previous code behaves\\nidentically to the following, that is, the call `file.await()` implicitly\\nawaits every `async` defined up to that point.\\n\\n```kotlin\\nawaitAll {\\n    val file = async { downloadFile() }\\n    val data = async { loadDataFromDatabase() }\\n    Result(file.await(), data.await())\\n}\\n```\\n\\nWe\'ve also improved the STM block by [allowing delegation](/learn/coroutines/stm/#reading-and-writing-concurrent-state) as a means to\\nread or change the value of a `TVar`.\\n\\n```kotlin\\nfun STM.deposit(accVar: TVar<Int>, amount: Int): Unit {\\n    val acc by accVar       // delegation here\\n    val current = acc       // implicit \'read\'\\n    acc = current + amount  // implicit \'write\'\\n}\\n```\\n\\n## Clearer retries for particular exceptions\\n\\nUntil now, the [`retry` operation](/learn/resilience/retry-and-repeat/) in the Resilience module would capture\\nany `Throwable` exception. From version 2.0 on you can specify a subclass\\nof `Throwable` to be the target for retrying, whereas the rest of\\nexceptions will bubble as usual.\\n\\n```kotlin\\nSchedule.recurs<Throwable>(2)\\n        .retry<IllegalArgumentException, _> { ... }\\n```\\n\\nThe subclass of exceptions must be given as a type argument.\\nAlas, Kotlin does not allow giving only a subset of those, and `retry`\\nhas two type parameters (the second one represents the output type of\\nthe `Schedule`). Fortunately, you can ask the compiler to infer the\\nsecond one using `_`.\\n\\n## Improved optics\\n\\nThe largest **breaking changes** in Arrow 2.0 relate to optics.\\nFirst of all, the [optics hierarchy](/learn/immutable-data/intro/#many-optics-to-rule-them-all) has been greatly simplified:\\nnow we have traversals, optionals, lenses, prisms, and isos, and no more\\nintermediate types. This smaller amount of types means that the type of\\noptic compositions become easier to understand.\\n\\nWe have also changed the generation of optics via the compiler plug-in\\n(that is, the `@optics` annotation) with respect to nullable fields.\\nIn the 1.x series, a value of type `String?` would be presented as\\n`Optional<T, String>`; this makes impossible to change the value from\\n`null` to an actual `String` using only optics operations. From version\\n2.0, that field is represented as `Lens<T, String?>`. To get the 1.x\\nbehavior you should apply `.notNull` after the optic corresponding to\\nthe field.\\n\\nA smaller breaking change is that generated optics are no longer\\n[inlined by default](https://github.com/arrow-kt/arrow/pull/3505).\\nThis should prevent a large amount of warnings in which the compiler\\ncomplain that inlining is not significant. Note that the previous behavior\\nis still available under a flag.\\n\\nOne pain point when building [traversals](/learn/immutable-data/traversal/) was the need to provide an\\nargument to `.every`, like `.every(Every.list())`. This new version\\nbrings an improved variant that requires no arguments if the type\\nof the `Iterable` is known. Similar improvements have been applied\\nto `.at` and `.index`.\\n\\n## Better support for kotlinx.serialization\\n\\nUsing Arrow Core data types as part of serialized data requires additional integration.\\nIn 1.2.x we started providing compile-time [support for `kotlinx.serialization`](/learn/quickstart/serialization/#kotlinxserialization).\\nFrom 2.0 on we also provide `ArrowModule` for\\n[contextual serialization](https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#contextual-serialization). This is needed, among others, when the data is processed\\nby Ktor."},{"id":"/2024/10/03/arrow-open-space","metadata":{"permalink":"/community/blog/2024/10/03/arrow-open-space","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2024-10-03-arrow-open-space.md","source":"@site/content/blog/2024-10-03-arrow-open-space.md","title":"Arrow Open Space @ Lambda World","description":"The first Arrow & Fuctional Kotlin Open Space is taking place as part of Lambda World! This post contains the preliminary schedule, and shall be updated after the Open Space takes place with additional material, slides, and videos.","date":"2024-10-03T00:00:00.000Z","tags":[{"label":"articles","permalink":"/community/blog/tags/articles"},{"label":"community","permalink":"/community/blog/tags/community"}],"readingTime":1.64,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow Open Space @ Lambda World","category":"articles","tags":["articles","community"],"image":"https://pub-c7459893ae854bbdb5ad00855f44c0c8.r2.dev/LandingPage_Lambda/Lambda_Logo_Blue.svg"},"unlisted":false,"prevItem":{"title":"Arrow 2.0 release","permalink":"/community/blog/2024/12/05/arrow-2-0"},"nextItem":{"title":"Arrow plug-in for IntelliJ 0.1 is here!","permalink":"/community/blog/2024/06/01/intellij-plugin"}},"content":"The first [Arrow & Fuctional Kotlin Open Space](https://www.lambda.world/workshops/Arrow%20%26%20Functional%20Kotlin%20Open%20Space/) is taking place as part of [Lambda World](https://lambda.world)! This post contains the preliminary schedule, and shall be updated after the Open Space takes place with additional material, slides, and videos.\\n\\n<table>\\n<tr>\\n<td>14.30 - 15.00</td>\\n<td><i>Introduction to Arrow libraries</i> by <a href=\\"https://nomisrev.github.io/\\">Simon Vergauwen</a></td>\\n</tr>\\n<tr>\\n<td>15.00 - 16.30</td>\\n<td><a href=\\"#unconference\\"><i>Unconference</i></a> and <a href=\\"#build-together\\"><i>Build together</i></a> (in parallel, see below)</td>\\n</tr>\\n<tr>\\n<td>16.30 - 16.50</td>\\n<td><i>Closing remarks</i></td>\\n</tr>\\n</table>\\n\\n## Unconference\\n\\nWe have a nice room, some sweets, and a nice projector. The perfect setup to share some knowledge about Arrow and Functional Kotlin! Our goal with the Unconference is to bring together people who can talk about something and people who want to learn about something.\\n\\n_How does it work?_ Use the whiteboard!\\n\\n- If you want to learn about a topic put a note in the _Hear_ column if none is already in _Talk_.\\n- If you want to talk about a topic put a note in the _Talk_ column if none is already in _Hear_.\\n- If there\'s a match, shout it out loud and let the talk begin!\\n  - Move the note to the _In progress_ column, and once it\'s done, to the _Done_ column.\\n  - It would be great if any material or code would be shared with the organizers, so we can later add it to this page.\\n\\n\\n## Build together\\n\\nThe goal of the Open Space is to learn. Many of us around are happy to help, so feel free to work in any project you want, and explore ways to use more functional features in your Kotlin. Once again, don\'t be shy to ask :)\\n\\nIf you are not sure about where to start, we have prepared a few tutorials and projects for you.\\n\\n- [Pok\xe9-Fun with Kotlin and Arrow](https://serranofp.com/poke-fun/): exercises about different parts of Arrow, and how you can apply them to a Compose Multiplatform project.\\n- [Example projects](https://arrow-kt.io/learn/design/projects/) from the Arrow documentation"},{"id":"/2024/06/01/intellij-plugin","metadata":{"permalink":"/community/blog/2024/06/01/intellij-plugin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2024-06-01-intellij-plugin.md","source":"@site/content/blog/2024-06-01-intellij-plugin.md","title":"Arrow plug-in for IntelliJ 0.1 is here!","description":"One of the main goals of the Arrow project is to produce libraries","date":"2024-06-01T00:00:00.000Z","tags":[{"label":"intellij","permalink":"/community/blog/tags/intellij"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":1.41,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow plug-in for IntelliJ 0.1 is here!","category":"articles","tags":["intellij","articles"]},"unlisted":false,"prevItem":{"title":"Arrow Open Space @ Lambda World","permalink":"/community/blog/2024/10/03/arrow-open-space"},"nextItem":{"title":"Arrow 1.2.3 release","permalink":"/community/blog/2024/02/28/arrow-1-2-3"}},"content":"One of the main goals of the Arrow project is to produce libraries\\nthat follow well-known Kotlin idioms, and we strive to make them\\nas discoverable as possible. Nevertheless, the surface of some\\ncomponents, like [typed errors](/learn/typed-errors/),\\nis quite large.\\nFor that reason, we have been busy in the last weeks preparing\\nthe first release of the\\n[Arrow plug-in for IntelliJ-based IDEs](https://plugins.jetbrains.com/plugin/24550-arrow).\\n\\nThis first version already focuses on three different aspects of\\nArrow usage where we found that an additional companion can make\\na big difference. The first aspect is the usage of typed errors:\\nthe IDE will now suggest missing `.bind()` or `.bindAll()`,\\nmapping of error using `withError`, and promoting idioms like\\n`ensure` whenever possible.\\n\\nThe second aspect is warning about wrong usages of Arrow APIs\\nwhich cannot be prevented by Kotlin\'s type system alone. This includes\\nescaping of `Raise` contexts -- for example, using `sequence` or\\n`flow` inside `either` --, using `Atomic` with primitive types \\n-- where `AtomicInt` or `AtomicBoolean` should be used instead --,\\nor matching on `Eval` instances directly instead of using the\\nprovided API -- which can easily lead to broken invariants.\\n\\nThe third aspect is applying some known recipes which may be hard\\nto know upfront. The first release includes a suggestion to add\\nthe corresponding [serializer](/learn/quickstart/serialization/)\\nwhen a type marked as `@Serializable` includes an Arrow Core type.\\nThis is an area which we would like to explore more, helping with\\nthe difficulties raised by the community.\\n\\nThe plug-in lives in a [separate repository](https://github.com/arrow-kt/arrow-intellij).\\nPlease let us know your experience, and don\'t be shy to open issues\\nwith suggestions for more features. They would help not only you\\nbut potentially every user of the Arrow library."},{"id":"/2024/02/28/arrow-1-2-3","metadata":{"permalink":"/community/blog/2024/02/28/arrow-1-2-3","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2024-02-28-arrow-1-2-3.md","source":"@site/content/blog/2024-02-28-arrow-1-2-3.md","title":"Arrow 1.2.3 release","description":"We are happy to announce the availability of version 1.2.3 of the Arrow collection of libraries.","date":"2024-02-28T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":4.65,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow 1.2.3 release","category":"articles","tags":["core","articles"]},"unlisted":false,"prevItem":{"title":"Arrow plug-in for IntelliJ 0.1 is here!","permalink":"/community/blog/2024/06/01/intellij-plugin"},"nextItem":{"title":"Arrow releases stable 1.2.0 version","permalink":"/community/blog/2023/07/12/arrow-1-2-0"}},"content":"We are happy to announce the availability of version 1.2.3 of the Arrow collection of libraries.\\nAccording to our plan, this is the last non-bugfix release of the 1.x series.\\nFrom now on, our `main` branch targets Arrow 2.0, which should be the next major release.\\n\\nWe are incredibly thankful to the many people that have contributed to this release,\\nbringing new ideas and quite some code.\\n\\n:::info Please use 1.2.4\\n\\nVersion 1.2.3 of `arrow-core` changed the behavior of `Raise` computations returning\\nfunctions or sequences. This change [restricted some useful usages](https://github.com/arrow-kt/arrow/issues/3391),\\nso the team has decided to roll it back and keep the 1.2.1 behavior.\\n\\n:::\\n\\n## New features\\n\\nA version number like 1.2.3 sounds like a small bugfix release, but this is far from truth in\\nthis case: this release is full of new modules to help you be productive when writing Kotlin.\\n\\n### Improved focus on Compose\\n\\nArrow provides building blocks relevant to many projects using Kotlin.\\nA large part of our community is doing frontend work, and during the latest months,\\nthe team has been trying to understand their needs, in order to make Arrow\\na relevant tool in that space.\\n\\nFrom that journey, we have put together a new documentation page highlighting\\ndifferent ways in which Arrow may be useful in your Compose application.\\nThere is also a new [`arrow-optics-compose` module](/learn/immutable-data/lens/#integration-with-compose)\\nthat includes utilities to work with immutable data inside a `MutableState`\\nor `MutableStateFlow`.\\n\\nWe are eager to hear more use cases or needs where Arrow may help the lives\\nof Kotlin developers. Feel free to drop by the `#arrow` channel in the Kotlin Slack,\\nor open an issue or discussion in our [repository](https://github.com/arrow-kt/arrow).\\n\\n### Non-`suspend` resource management\\n\\n[Resource safety](/learn/coroutines/resource-safety/) in Arrow\\nhas been traditionally tied to the use of coroutines and `suspend` functions.\\nThis is the right choice for Kotlin-first libraries, like Ktor or Koin, but many\\nlibraries still come from a Java background where no such feature exists.\\nBeginning with this version, we provide two \\"variations\\" of resource management:\\n\\n- `Resource`, from the `arrow-fx-coroutines` module, is based on `suspend`\\n  and ensures the desired behavior alongside coroutines (including cancellation).\\n- `AutoClose`, from the new `arrow-autoclose` module, provides almost the\\n  same API as `Resource`, but without the `suspend` requirement.\\n\\n### Forward compatible `Eval`\\n\\nOne of our goals is to make the transition to 2.0 as smooth as possible.\\nYou can [already migrate](/learn/quickstart/migration/)\\nto the new APIs by using Arrow 1.2.3, and then ensuring that you get no deprecation warnings.\\n\\nDuring this process, we were [made aware](https://github.com/arrow-kt/arrow/issues/3039) that\\nthere was no clear story for the migration of `Eval`. On the other hand, the use cases are very narrow.\\nThe decision was to create a new [`arrow-eval` module](/learn/collections-functions/eval/),\\npresent since this release, and mark the one from `arrow-core` point the new module,\\ninstead of entirely removing this functionality from Arrow.\\n\\n### Collectors\\n\\nThe new [`arrow-collectors` module](/learn/collections-functions/collectors/)\\nallows composing operations over sequences of values\\n(lists, flows, sequences) while ensuring that the sequence is traversed only once.\\nThis property is especially relevant when building the sequence is expensive, or simply\\ncannot be reproduced, like a stream of data from a database or a flow of actions.\\n\\n## Improved features\\n\\nSeveral features in the library have been improved, to ensure that Arrow covers a variety\\nof use cases.\\n\\n### Lenses for sealed classes\\n\\nThis was once of the [older feature requests](https://github.com/arrow-kt/arrow/issues/2829)\\nstill in our issue tracker, which is now closed thanks to a wonderful\\n[contribution](https://github.com/arrow-kt/arrow/pull/3359)!\\n\\nFrom now on, the Optics KSP plug-in can generate\\n[lenses for sealed hierarchies](/learn/immutable-data/lens/#sealed-class-hierarchies),\\ngiven that the field lives in the common parent. For example, the following code\\n\\n```kotlin\\n@optics sealed interface User {\\n  val name: String\\n\\n  data class Person(override val name: String, val age: Int): User\\n  data class Company(override val name: String, val vat: VATNumber): User\\n}\\n```\\n\\ngenerates from this version on both prisms for each choice, and a lens for `name`.\\n\\n### Higher-arity functions\\n\\nWe have traditionally been reluctant to add variations of `zip` with more than\\n10 parameters, because we felt that the narrow use cases did not balance out\\nthe increase in binary size. Since this release Arrow provides those functions\\nin a new `arrow-core-high-arity` module.\\n\\n### More accumulating functions for `Raise`\\n\\n[Typed errors](/learn/typed-errors/working-with-typed-errors/)\\nprovide two essential ways to [accumulate errors](/learn/typed-errors/working-with-typed-errors/#accumulating-errors): `zipOrAccumulate` and `mapOrAccumulate`. Those correspond\\nto accumulating over a fixed number of computations of different types, or\\naccumulating over an unknown quantity of computations with the same type.\\n\\nThe `mapOrAccumulate` function _always_ returns a new list. In some cases, you\\ndon\'t really care about this result, just about the iteration behavior.\\nThis is similar to the different between `map` and `forEach` in the standard\\nlibrary. From there Arrow takes the name of the new function: `forEachAccumulating`.\\n\\nOne potential use case is performing validation over elements of a list,\\nbut keeping the values intact.\\n\\n```kotlin\\npeople.forEachAccumulating { person ->\\n  ensure(person.age >= 0) { InvalidAge(person.name) }\\n}\\n```\\n\\n### Better memoization\\n\\n[`MemoizedDeepRecursiveFunction`](/learn/collections-functions/recursive/#memoized-recursive-functions)\\nis a powerful tool to express recursive algorithms without worries over stack overflow or recomputation.\\nHowever, there was a lack of control over how memoized values were stored or evicted, which made the\\ntype less useful than intended.\\n\\nFrom this release on, there are new overloads to support custom memoization policies.\\nFurthermore, the new [`arrow-cache4k` module](/learn/collections-functions/recursive/#memoization-takes-memory)\\nprovides integration with the excellent\\n[cache4k](https://github.com/ReactiveCircus/cache4k) library.\\n\\n## More integrations\\n\\nAlthough not part of this release, we would like to highlight that\\n[Akkurate](https://akkurate.dev), which provides a wonderful DSL for validation over data,\\nhas released an [integration module for Arrow](https://akkurate.dev/docs/arrow-integration.html).\\nThis adds to the [rest of integrations](/learn/integrations/)\\nand shows the collaborative spirit of the Kotlin community."},{"id":"/2023/07/12/arrow-1-2-0","metadata":{"permalink":"/community/blog/2023/07/12/arrow-1-2-0","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-07-12-arrow-1-2-0.md","source":"@site/content/blog/2023-07-12-arrow-1-2-0.md","title":"Arrow releases stable 1.2.0 version","description":"We\'re excited to announce the stable Arrow 1.2.0 version. To briefly summarize, this release:","date":"2023-07-12T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.32,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow releases stable 1.2.0 version","image":"https://xebia.com/wp-content/uploads/2023/04/arrow-release-ftr.jpg","category":"articles","tags":["core","articles"],"link":"https://xebia.com/blog/a-new-module-for-typed-errors-in-arrow-1-2-0/"},"unlisted":false,"prevItem":{"title":"Arrow 1.2.3 release","permalink":"/community/blog/2024/02/28/arrow-1-2-3"},"nextItem":{"title":"Arrow 2.0\'s Trajectory - Video","permalink":"/community/blog/2023/05/04/arrow-trajectory-kotlinconf"}},"content":"We\'re excited to announce the stable Arrow 1.2.0 version. To briefly summarize, this release:\\n\\n- Improves the API for [typed errors](http://arrow-kt.io/learn/typed-errors/working-with-typed-errors/),\\n  including [`withError`](https://apidocs.arrow-kt.io/arrow-core/arrow.core.raise/with-error.html)\\n  and [`merge`](https://apidocs.arrow-kt.io/arrow-core/arrow.core.raise/merge.html).\\n- Adds [`NonEmptyCollection`](https://apidocs.arrow-kt.io/arrow-core/arrow.core/-non-empty-collection/index.html)\\n  as common parent of [`NonEmptyList`](https://apidocs.arrow-kt.io/arrow-core/arrow.core/-non-empty-list/index.html)\\n  and [`NonEmptySet`](https://apidocs.arrow-kt.io/arrow-core/arrow.core/-non-empty-set/index.html).\\n- Introduces [`arrow-core-serialization`](https://arrow-kt.io/learn/quickstart/serialization/)\\n  to be used alongside KotlinX Serialization.\\n- Fixes a few issues found in the Release Candidate.\\n\\nRead more details in the full [Arrow 1.2.0 release announcement](https://xebia.com/blog/a-new-module-for-typed-errors-in-arrow-1-2-0/)."},{"id":"/2023/05/04/arrow-trajectory-kotlinconf","metadata":{"permalink":"/community/blog/2023/05/04/arrow-trajectory-kotlinconf","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-05-04-arrow-trajectory-kotlinconf.md","source":"@site/content/blog/2023-05-04-arrow-trajectory-kotlinconf.md","title":"Arrow 2.0\'s Trajectory - Video","description":"Watch Simon Vergauwen\'s presentation from KotlinConf 2023 about the history of Arrow, and the trajectory for Arrow 2.0.","date":"2023-05-04T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.09,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow 2.0\'s Trajectory - Video","image":"https://img.youtube.com/vi/tplA17M9Y4Q/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/tplA17M9Y4Q","event":"KotlinConf"},"unlisted":false,"prevItem":{"title":"Arrow releases stable 1.2.0 version","permalink":"/community/blog/2023/07/12/arrow-1-2-0"},"nextItem":{"title":"Nicer data transformation with KopyKat and Optics","permalink":"/community/blog/2023/05/04/data-transformation-kotlinconf"}},"content":"Watch [Simon Vergauwen](https://twitter.com/vergauwen_simon)\'s presentation from KotlinConf 2023 about the history of Arrow, and the trajectory for Arrow 2.0."},{"id":"/2023/05/04/data-transformation-kotlinconf","metadata":{"permalink":"/community/blog/2023/05/04/data-transformation-kotlinconf","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-05-04-data-transformation-kotlinconf.md","source":"@site/content/blog/2023-05-04-data-transformation-kotlinconf.md","title":"Nicer data transformation with KopyKat and Optics","description":"Watch Alejandro Serrano\'s presentation from KotlinConf 2023 about data transformation.","date":"2023-05-04T00:00:00.000Z","tags":[{"label":"optics","permalink":"/community/blog/tags/optics"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.365,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Nicer data transformation with KopyKat and Optics","image":"https://img.youtube.com/vi/atV8liVgd3w/maxresdefault.jpg","category":"videos","tags":["optics","videos"],"link":"https://youtu.be/atV8liVgd3w","event":"KotlinConf"},"unlisted":false,"prevItem":{"title":"Arrow 2.0\'s Trajectory - Video","permalink":"/community/blog/2023/05/04/arrow-trajectory-kotlinconf"},"nextItem":{"title":"Typed Error Handling in Kotlin","permalink":"/community/blog/2023/04/17/typed-error-handling-in-kotlin"}},"content":"Watch [Alejandro Serrano](https://twitter.com/trupill)\'s presentation from KotlinConf 2023 about data transformation.\\n\\nData classes are incredibly useful when modeling our domain in an immutable way. The Kotlin compiler gives us many niceties, including \'copy\' to create a new value based on a previous one. However, this \'copy\' often falls short. This talk explores two alternatives: KopyKat, a plug-in to generate additional variations of \'copy\', and Arrow Optics, a whole framework to transform this immutable data."},{"id":"/2023/04/17/typed-error-handling-in-kotlin","metadata":{"permalink":"/community/blog/2023/04/17/typed-error-handling-in-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-04-17-typed-error-handling-in-kotlin.md","source":"@site/content/blog/2023-04-17-typed-error-handling-in-kotlin.md","title":"Typed Error Handling in Kotlin","description":"A comparative study about several typed-error handling practices in Kotlin.","date":"2023-04-17T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.585,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Typed Error Handling in Kotlin","image":"https://miro.medium.com/v2/resize:fit:4800/0*kOFUN-7oR7gyGXu_","category":"articles","tags":["core","articles"],"link":"https://medium.com/@mitchellyuwono/typed-error-handling-in-kotlin-11ff25882880"},"unlisted":false,"prevItem":{"title":"Nicer data transformation with KopyKat and Optics","permalink":"/community/blog/2023/05/04/data-transformation-kotlinconf"},"nextItem":{"title":"Arrow 2.0\'s Trajectory","permalink":"/community/blog/2023/04/16/arrow-2-0-trajectory"}},"content":"A comparative study about several typed-error handling practices in Kotlin.\\n\\nThere are various approaches to error handling in the Kotlin community. \\nIn this article we\u2019ve explored a small subset of typed error handling practices in the community. \\n\\nFrom the approaches explored, there were three patterns that aligns with Kotlin recommendation with \\nrelatively low cognitive complexity including: Sealed class matching with early returns, Arrow\'s `either { }` builder, \\nand Arrow\'s `context(Raise<E>)` with context-receivers. \\n\\nArrow\'s `context(Raise<E>)` achieved the most optimized score on all aspects of \\ndeveloper productivity. This includes having the lowest cognitive complexity, the lowest cyclomatic complexity \\nas well as the most succinct with the least lines of codes.\\n\\nRead the full article: [Typed Error Handling in Kotlin](https://medium.com/@mitchellyuwono/typed-error-handling-in-kotlin-11ff25882880)."},{"id":"/2023/04/16/arrow-2-0-trajectory","metadata":{"permalink":"/community/blog/2023/04/16/arrow-2-0-trajectory","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-04-16-arrow-2-0-trajectory.md","source":"@site/content/blog/2023-04-16-arrow-2-0-trajectory.md","title":"Arrow 2.0\'s Trajectory","description":"A full transcript and the slides from Simon Vergauwen\'s presentation from KotlinConf 2023 about the history of Arrow and where it\'s going.","date":"2023-04-16T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"slidedecks","permalink":"/community/blog/tags/slidedecks"}],"readingTime":0.11,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow 2.0\'s Trajectory","image":"https://nomisrev.github.io/assets/KotlinConf%20-%20Arrow\'s%202.0%20Trajectory/KotlinConf%20-%20Arrow\'s%202.0%20Trajectory%20-%20Simon.001.png","category":"slidedecks","tags":["core","slidedecks"],"link":"https://nomisrev.github.io/arrows-2-0-trajectory/","event":"Kotlin Conf"},"unlisted":false,"prevItem":{"title":"Typed Error Handling in Kotlin","permalink":"/community/blog/2023/04/17/typed-error-handling-in-kotlin"},"nextItem":{"title":"Arrow 1.2.0-RC Release Summary","permalink":"/community/blog/2023/04/04/arrow-1-2-0-rc-summary"}},"content":"A full transcript and the slides from [Simon Vergauwen\'s](https://twitter.com/vergauwen_simon) presentation from KotlinConf 2023 about the history of Arrow and where it\'s going."},{"id":"/2023/04/04/arrow-1-2-0-rc-summary","metadata":{"permalink":"/community/blog/2023/04/04/arrow-1-2-0-rc-summary","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-04-04-arrow-1-2-0-rc-summary.md","source":"@site/content/blog/2023-04-04-arrow-1-2-0-rc-summary.md","title":"Arrow 1.2.0-RC Release Summary","description":"We\'re excited to announce Arrow 1.2.0-RC alongside a new Arrow website. To briefly summarize, this release:","date":"2023-04-04T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow 1.2.0-RC Release Summary","image":"https://xebia.com/wp-content/uploads/2023/04/arrow-1-2-0-rc-twitter.jpg","category":"articles","tags":["core","articles"],"link":"https://xebia.com/blog/arrow-1-2-0-rc-is-now-available/"},"unlisted":false,"prevItem":{"title":"Arrow 2.0\'s Trajectory","permalink":"/community/blog/2023/04/16/arrow-2-0-trajectory"},"nextItem":{"title":"Functional Fun in Kotlin","permalink":"/community/blog/2023/02/04/functional-fun-kotlin"}},"content":"We\'re excited to announce Arrow 1.2.0-RC alongside a new Arrow website. To briefly summarize, this release:\\n\\n- Introduces a brand new [typed errors](http://arrow-kt.io/learn/typed-errors/working-with-typed-errors/) module.\\n- Adds more options for [resilience](http://arrow-kt.io/learn/resilience/).\\n- Marks every function and type we intend to remove in 2.0 as `@Deprecated`.\\n\\nRead more details in the full [Arrow 1.2.0 release announcement](https://xebia.com/blog/arrow-1-2-0-rc-is-now-available/)."},{"id":"/2023/02/04/functional-fun-kotlin","metadata":{"permalink":"/community/blog/2023/02/04/functional-fun-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-02-04-functional-fun-kotlin.md","source":"@site/content/blog/2023-02-04-functional-fun-kotlin.md","title":"Functional Fun in Kotlin","description":"Simon Vergauwen shares why he thinks Kotlin is great language to do modern functional programming, and why he believes it\'s perhaps the best language to do modern mainstream (hardcore) functional programming.","date":"2023-02-04T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"slidedecks","permalink":"/community/blog/tags/slidedecks"}],"readingTime":0.155,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Fun in Kotlin","image":"https://files.speakerdeck.com/presentations/717144e6f3f54fd7aca2215fff36c2b3/preview_slide_0.jpg","category":"slidedecks","tags":["core","slidedecks"],"link":"https://speakerdeck.com/nomisrev/functional-fun-in-kotlin","event":"FOSDEM"},"unlisted":false,"prevItem":{"title":"Arrow 1.2.0-RC Release Summary","permalink":"/community/blog/2023/04/04/arrow-1-2-0-rc-summary"},"nextItem":{"title":"CodelyTV Interview with Raul Raja","permalink":"/community/blog/2023/01/03/codelytv-interview"}},"content":"[Simon Vergauwen](https://twitter.com/vergauwen_simon) shares why he thinks Kotlin is great language to do modern functional programming, and why he believes it\'s perhaps the best language to do modern mainstream (hardcore) functional programming."},{"id":"/2023/01/03/codelytv-interview","metadata":{"permalink":"/community/blog/2023/01/03/codelytv-interview","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-01-03-codelytv-interview.md","source":"@site/content/blog/2023-01-03-codelytv-interview.md","title":"CodelyTV Interview with Raul Raja","description":"An interview with Arrow maintainer Ra\xfal Raja by Rafa G\xf3mez on CodelyTV.","date":"2023-01-03T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"CodelyTV Interview with Raul Raja","image":"https://img.youtube.com/vi/8WdprhzmQe4/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/8WdprhzmQe4"},"unlisted":false,"prevItem":{"title":"Functional Fun in Kotlin","permalink":"/community/blog/2023/02/04/functional-fun-kotlin"},"nextItem":{"title":"Actions as Data","permalink":"/community/blog/2022/12/01/actions-as-data"}},"content":"An interview with Arrow maintainer Ra\xfal Raja by Rafa G\xf3mez on CodelyTV."},{"id":"/2022/12/01/actions-as-data","metadata":{"permalink":"/community/blog/2022/12/01/actions-as-data","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-12-01-actions-as-data.md","source":"@site/content/blog/2022-12-01-actions-as-data.md","title":"Actions as Data","description":"A presentation by Alejandro Serrano at Advanced Kotlin Dev Day 2022.","date":"2022-12-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.055,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Actions as Data","image":"https://img.youtube.com/vi/ujzZITapUwA/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/ujzZITapUwA"},"unlisted":false,"prevItem":{"title":"CodelyTV Interview with Raul Raja","permalink":"/community/blog/2023/01/03/codelytv-interview"},"nextItem":{"title":"Context Receivers: Kotlin\'s new secret sauce","permalink":"/community/blog/2022/12/01/context-receivers"}},"content":"A presentation by Alejandro Serrano at Advanced Kotlin Dev Day 2022."},{"id":"/2022/12/01/context-receivers","metadata":{"permalink":"/community/blog/2022/12/01/context-receivers","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-12-01-context-receivers.md","source":"@site/content/blog/2022-12-01-context-receivers.md","title":"Context Receivers: Kotlin\'s new secret sauce","description":"Alejandro Serrano\'s presentation from Advanced Kotlin Dev Day 2022 about context receivers.","date":"2022-12-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Context Receivers: Kotlin\'s new secret sauce","image":"https://img.youtube.com/vi/2oiRCYnqhDs/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/2oiRCYnqhDs"},"unlisted":false,"prevItem":{"title":"Actions as Data","permalink":"/community/blog/2022/12/01/actions-as-data"},"nextItem":{"title":"Functional Error Handling - A Practical Approach","permalink":"/community/blog/2022/12/01/functional-error-handling"}},"content":"Alejandro Serrano\'s presentation from Advanced Kotlin Dev Day 2022 about context receivers."},{"id":"/2022/12/01/functional-error-handling","metadata":{"permalink":"/community/blog/2022/12/01/functional-error-handling","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-12-01-functional-error-handling.md","source":"@site/content/blog/2022-12-01-functional-error-handling.md","title":"Functional Error Handling - A Practical Approach","description":"A presentation by Bas de Groot at Advanced Kotlin Dev Day 2022.","date":"2022-12-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Error Handling - A Practical Approach","image":"https://img.youtube.com/vi/T04ynq2IVFs/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/T04ynq2IVFs"},"unlisted":false,"prevItem":{"title":"Context Receivers: Kotlin\'s new secret sauce","permalink":"/community/blog/2022/12/01/context-receivers"},"nextItem":{"title":"Functional Flowing","permalink":"/community/blog/2022/12/01/functional-flowing"}},"content":"A presentation by Bas de Groot at Advanced Kotlin Dev Day 2022."},{"id":"/2022/12/01/functional-flowing","metadata":{"permalink":"/community/blog/2022/12/01/functional-flowing","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-12-01-functional-flowing.md","source":"@site/content/blog/2022-12-01-functional-flowing.md","title":"Functional Flowing","description":"Simon Vergauwen shows how to leverage KotlinX Flow to describe powerful programs and build pipelines to transform and manipulate data in an efficient streaming way.","date":"2022-12-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.125,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Flowing","image":"https://img.youtube.com/vi/Mj9B0rhN1RE/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/Mj9B0rhN1RE"},"unlisted":false,"prevItem":{"title":"Functional Error Handling - A Practical Approach","permalink":"/community/blog/2022/12/01/functional-error-handling"},"nextItem":{"title":"Graceful Shutdown with Structured Concurrency","permalink":"/community/blog/2022/12/01/graceful-shutdown-structured-concurrency"}},"content":"Simon Vergauwen shows how to leverage KotlinX Flow to describe powerful programs and build pipelines to transform and manipulate data in an efficient streaming way."},{"id":"/2022/12/01/graceful-shutdown-structured-concurrency","metadata":{"permalink":"/community/blog/2022/12/01/graceful-shutdown-structured-concurrency","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-12-01-graceful-shutdown-structured-concurrency.md","source":"@site/content/blog/2022-12-01-graceful-shutdown-structured-concurrency.md","title":"Graceful Shutdown with Structured Concurrency","description":"A presentation by Simon Vergauwen at Advanced Kotlin Dev Day 2022.","date":"2022-12-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.055,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Graceful Shutdown with Structured Concurrency","image":"https://img.youtube.com/vi/A69_t_oEP_E/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/A69_t_oEP_E"},"unlisted":false,"prevItem":{"title":"Functional Flowing","permalink":"/community/blog/2022/12/01/functional-flowing"},"nextItem":{"title":"Functional Programming in Kotlin: Exploring Arrow","permalink":"/community/blog/2022/07/01/exploring-arrow"}},"content":"A presentation by Simon Vergauwen at Advanced Kotlin Dev Day 2022."},{"id":"/2022/07/01/exploring-arrow","metadata":{"permalink":"/community/blog/2022/07/01/exploring-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-07-01-exploring-arrow.md","source":"@site/content/blog/2022-07-01-exploring-arrow.md","title":"Functional Programming in Kotlin: Exploring Arrow","description":"A presentation by Ties van de Veen at Voxxed Days Luxembourg 2022.","date":"2022-07-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Programming in Kotlin: Exploring Arrow","image":"https://img.youtube.com/vi/xxePZQlNyYY/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/xxePZQlNyYY"},"unlisted":false,"prevItem":{"title":"Graceful Shutdown with Structured Concurrency","permalink":"/community/blog/2022/12/01/graceful-shutdown-structured-concurrency"},"nextItem":{"title":"Turbocharging Kotlin: Arrow Analysis, Optics, and Meta","permalink":"/community/blog/2022/06/28/turbocharging-kotlin-talking-kotlin"}},"content":"A presentation by Ties van de Veen at Voxxed Days Luxembourg 2022."},{"id":"/2022/06/28/turbocharging-kotlin-talking-kotlin","metadata":{"permalink":"/community/blog/2022/06/28/turbocharging-kotlin-talking-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-06-28-turbocharging-kotlin-talking-kotlin.md","source":"@site/content/blog/2022-06-28-turbocharging-kotlin-talking-kotlin.md","title":"Turbocharging Kotlin: Arrow Analysis, Optics, and Meta","description":"Raul Raja, Simon Vergauwen, and Alejandro Serrano appeared on Talking Kotlin to chat about Arrow.","date":"2022-06-28T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"optics","permalink":"/community/blog/tags/optics"},{"label":"analysis","permalink":"/community/blog/tags/analysis"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.075,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Turbocharging Kotlin: Arrow Analysis, Optics, and Meta","image":"https://img.youtube.com/vi/tX4nLqcW2JA/maxresdefault.jpg","category":"videos","tags":["core","meta","optics","analysis","videos"],"link":"https://youtu.be/tX4nLqcW2JA"},"unlisted":false,"prevItem":{"title":"Functional Programming in Kotlin: Exploring Arrow","permalink":"/community/blog/2022/07/01/exploring-arrow"},"nextItem":{"title":"Arrow put on a big show at Kotlin Dev Day","permalink":"/community/blog/2022/06/14/arrow-kotlin-dev-day"}},"content":"Raul Raja, Simon Vergauwen, and Alejandro Serrano appeared on Talking Kotlin to chat about Arrow."},{"id":"/2022/06/14/arrow-kotlin-dev-day","metadata":{"permalink":"/community/blog/2022/06/14/arrow-kotlin-dev-day","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-06-14-arrow-kotlin-dev-day.md","source":"@site/content/blog/2022-06-14-arrow-kotlin-dev-day.md","title":"Arrow put on a big show at Kotlin Dev Day","description":"A recap of the attention Arrow received at Kotlin Dev Day.","date":"2022-06-14T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.055,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow put on a big show at Kotlin Dev Day","image":"https://www.47deg.com/assets/img/blog/featured_images/2022-06-13-arrow-put-on-big-show-at-kotlin-dev-day.jpg","category":"articles","tags":["core","fx","articles"],"link":"https://www.47deg.com/blog/arrow-put-on-big-show-at-kotlindevday/"},"unlisted":false,"prevItem":{"title":"Turbocharging Kotlin: Arrow Analysis, Optics, and Meta","permalink":"/community/blog/2022/06/28/turbocharging-kotlin-talking-kotlin"},"nextItem":{"title":"Building applications with Kotlin and Arrow.kt in style","permalink":"/community/blog/2022/05/31/building-applications-with-kotlin-and-arrow-kt-in-style"}},"content":"A recap of the attention Arrow received at Kotlin Dev Day."},{"id":"/2022/05/31/building-applications-with-kotlin-and-arrow-kt-in-style","metadata":{"permalink":"/community/blog/2022/05/31/building-applications-with-kotlin-and-arrow-kt-in-style","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-05-31-building-applications-with-kotlin-and-arrow-kt-in-style.md","source":"@site/content/blog/2022-05-31-building-applications-with-kotlin-and-arrow-kt-in-style.md","title":"Building applications with Kotlin and Arrow.kt in style","description":"A presentation by Simon Vergauwen presented on the official Kotlin YouTube channel.","date":"2022-05-31T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Building applications with Kotlin and Arrow.kt in style","image":"https://img.youtube.com/vi/g79A6HmbW5M/hqdefault.jpg","category":"videos","tags":["core","fx","videos"],"link":"https://youtu.be/g79A6HmbW5M"},"unlisted":false,"prevItem":{"title":"Arrow put on a big show at Kotlin Dev Day","permalink":"/community/blog/2022/06/14/arrow-kotlin-dev-day"},"nextItem":{"title":"Extending kotlinx.serialization functionality with Arrow Meta with Karin-Aleksandra Monoid","permalink":"/community/blog/2022/05/30/extending-kotlinx-serialization-functionality-arrow-meta"}},"content":"A presentation by Simon Vergauwen presented on the official Kotlin YouTube channel."},{"id":"/2022/05/30/extending-kotlinx-serialization-functionality-arrow-meta","metadata":{"permalink":"/community/blog/2022/05/30/extending-kotlinx-serialization-functionality-arrow-meta","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-05-30-extending-kotlinx-serialization-functionality-arrow-meta.md","source":"@site/content/blog/2022-05-30-extending-kotlinx-serialization-functionality-arrow-meta.md","title":"Extending kotlinx.serialization functionality with Arrow Meta with Karin-Aleksandra Monoid","description":"Karin-Aleksandra Monoid provides an overview of Arrow Meta features.","date":"2022-05-30T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.045,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Extending kotlinx.serialization functionality with Arrow Meta with Karin-Aleksandra Monoid","image":"http://i3.ytimg.com/vi/eHSepXJPKZ0/hqdefault.jpg","category":"videos","tags":["meta","videos"],"link":"https://youtu.be/eHSepXJPKZ0","event":"Kotlin Dev Day"},"unlisted":false,"prevItem":{"title":"Building applications with Kotlin and Arrow.kt in style","permalink":"/community/blog/2022/05/31/building-applications-with-kotlin-and-arrow-kt-in-style"},"nextItem":{"title":"Super-charge your build with Arrow Analysis by Alejandro Serrano Mena","permalink":"/community/blog/2022/05/30/super-charge-build-arrow-analysis"}},"content":"Karin-Aleksandra Monoid provides an overview of Arrow Meta features."},{"id":"/2022/05/30/super-charge-build-arrow-analysis","metadata":{"permalink":"/community/blog/2022/05/30/super-charge-build-arrow-analysis","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-05-30-super-charge-build-arrow-analysis.md","source":"@site/content/blog/2022-05-30-super-charge-build-arrow-analysis.md","title":"Super-charge your build with Arrow Analysis by Alejandro Serrano Mena","description":"Alejandro Serrano presents Arrow Analysis, a Kotlin compiler plug-in that does pre-and post-condition and type invariant checking at compile time.","date":"2022-05-30T00:00:00.000Z","tags":[{"label":"analysis","permalink":"/community/blog/tags/analysis"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.1,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Super-charge your build with Arrow Analysis by Alejandro Serrano Mena","image":"http://i3.ytimg.com/vi/yCZtnzTnpRA/hqdefault.jpg","category":"videos","tags":["analysis","videos"],"link":"https://youtu.be/yCZtnzTnpRA","event":"Kotlin Dev Day"},"unlisted":false,"prevItem":{"title":"Extending kotlinx.serialization functionality with Arrow Meta with Karin-Aleksandra Monoid","permalink":"/community/blog/2022/05/30/extending-kotlinx-serialization-functionality-arrow-meta"},"nextItem":{"title":"Functional programming in Kotlin: exploring Arrow by Ties Van de Ven","permalink":"/community/blog/2022/05/18/functional-programming-kotlin-exploring-arrow-ties-van-de-ven"}},"content":"Alejandro Serrano presents Arrow Analysis, a Kotlin compiler plug-in that does pre-and post-condition and type invariant checking at compile time."},{"id":"/2022/05/18/functional-programming-kotlin-exploring-arrow-ties-van-de-ven","metadata":{"permalink":"/community/blog/2022/05/18/functional-programming-kotlin-exploring-arrow-ties-van-de-ven","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-05-18-functional-programming-kotlin-exploring-arrow-ties-van-de-ven.md","source":"@site/content/blog/2022-05-18-functional-programming-kotlin-exploring-arrow-ties-van-de-ven.md","title":"Functional programming in Kotlin: exploring Arrow by Ties Van de Ven","description":"A talk by Ties van de Ven that shows how Arrow helps to unleash the full FP power of Kotlin.","date":"2022-05-18T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"optics","permalink":"/community/blog/tags/optics"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.1,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional programming in Kotlin: exploring Arrow by Ties Van de Ven","image":"http://i3.ytimg.com/vi/eFheAErqJzA/hqdefault.jpg","category":"videos","tags":["core","optics","videos"],"link":"https://youtu.be/eFheAErqJzA","event":"Devoxx UK"},"unlisted":false,"prevItem":{"title":"Super-charge your build with Arrow Analysis by Alejandro Serrano Mena","permalink":"/community/blog/2022/05/30/super-charge-build-arrow-analysis"},"nextItem":{"title":"Domain Model Validation In Kotlin: Part 4","permalink":"/community/blog/2022/03/31/domain-model-validation-in-kotlin-part-4"}},"content":"A talk by Ties van de Ven that shows how Arrow helps to unleash the full FP power of Kotlin."},{"id":"/2022/03/31/domain-model-validation-in-kotlin-part-4","metadata":{"permalink":"/community/blog/2022/03/31/domain-model-validation-in-kotlin-part-4","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-03-31-domain-model-validation-in-kotlin-part-4.md","source":"@site/content/blog/2022-03-31-domain-model-validation-in-kotlin-part-4.md","title":"Domain Model Validation In Kotlin: Part 4","description":"In this final part of the series, Tiberiu puts everything together in a small CLI application, using Arrow data types and computation blocks","date":"2022-03-31T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Domain Model Validation In Kotlin: Part 4","image":"https://miro.medium.com/max/1400/1*3jegLLY4GbGj71nauV2l_Q.png","category":"articles","tags":["core","articles"],"link":"https://tibtof.medium.com/domain-model-validation-in-kotlin-part-4-2462b334ca6c"},"unlisted":false,"prevItem":{"title":"Functional programming in Kotlin: exploring Arrow by Ties Van de Ven","permalink":"/community/blog/2022/05/18/functional-programming-kotlin-exploring-arrow-ties-van-de-ven"},"nextItem":{"title":"Domain Model Validation In Kotlin: Part 3","permalink":"/community/blog/2022/03/10/domain-model-validation-in-kotlin-part-3"}},"content":"In this final part of the series, Tiberiu puts everything together in a small CLI application, using Arrow data types and computation blocks\\nto handle validation errors and exceptions in a unitary and composable way."},{"id":"/2022/03/10/domain-model-validation-in-kotlin-part-3","metadata":{"permalink":"/community/blog/2022/03/10/domain-model-validation-in-kotlin-part-3","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-03-10-domain-model-validation-in-kotlin-part-3.md","source":"@site/content/blog/2022-03-10-domain-model-validation-in-kotlin-part-3.md","title":"Domain Model Validation In Kotlin: Part 3","description":"In the third part of the series, Tiberiu Tofan explores multiple techniques of using a context when doing validations","date":"2022-03-10T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.2,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Domain Model Validation In Kotlin: Part 3","image":"https://miro.medium.com/max/1400/1*6RXLldOxvMR3nKi_k_wYTA.png","category":"articles","tags":["core","articles"],"link":"https://tibtof.medium.com/domain-model-validation-in-kotlin-part-3-96c3fd4af342"},"unlisted":false,"prevItem":{"title":"Domain Model Validation In Kotlin: Part 4","permalink":"/community/blog/2022/03/31/domain-model-validation-in-kotlin-part-4"},"nextItem":{"title":"Domain Model Validation In Kotlin: Part 2","permalink":"/community/blog/2022/03/03/domain-model-validation-in-kotlin-part-2"}},"content":"In the third part of the series, Tiberiu Tofan explores multiple techniques of using a context when doing validations \\nand how the context can be changed in the tests to simulate success or failure. All using just Kotlin standard library."},{"id":"/2022/03/03/domain-model-validation-in-kotlin-part-2","metadata":{"permalink":"/community/blog/2022/03/03/domain-model-validation-in-kotlin-part-2","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-03-03-domain-model-validation-in-kotlin-part-2.md","source":"@site/content/blog/2022-03-03-domain-model-validation-in-kotlin-part-2.md","title":"Domain Model Validation In Kotlin: Part 2","description":"In the second article in this series, Tiberiu Tofan writes how Validated type can be","date":"2022-03-03T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.195,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Domain Model Validation In Kotlin: Part 2","image":"https://miro.medium.com/max/1400/1*vf0byE6Kp5wGwmDqxRbUOg.png","category":"articles","tags":["core","articles"],"link":"https://medium.com/@tibtof/domain-model-validation-in-kotlin-part-2-fb4726ef8f8d"},"unlisted":false,"prevItem":{"title":"Domain Model Validation In Kotlin: Part 3","permalink":"/community/blog/2022/03/10/domain-model-validation-in-kotlin-part-3"},"nextItem":{"title":"Domain Model Validation In Kotlin: Part 1","permalink":"/community/blog/2022/02/22/domain-model-validation-in-kotlin-part-1"}},"content":"In the second article in this series, Tiberiu Tofan writes how Validated type can be \\nused to validate multiple properties, accumulate the errors, apply individual \\nelement validations to lists of elements, and create rules that \\ndepend on numerous properties."},{"id":"/2022/02/22/domain-model-validation-in-kotlin-part-1","metadata":{"permalink":"/community/blog/2022/02/22/domain-model-validation-in-kotlin-part-1","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-02-22-domain-model-validation-in-kotlin-part-1.md","source":"@site/content/blog/2022-02-22-domain-model-validation-in-kotlin-part-1.md","title":"Domain Model Validation In Kotlin: Part 1","description":"In the first article in this series, Tiberiu Tofan describes his team\'s journey using Kotlin and Arrow for domain model validation,","date":"2022-02-22T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.16,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Domain Model Validation In Kotlin: Part 1","image":"https://miro.medium.com/max/1400/1*Xc0B4542z3WHiQ3DvLXcYg.png","category":"articles","tags":["core","articles"],"link":"https://medium.com/@tibtof/domain-model-validation-in-kotlin-part-1-21fa44c60ef3"},"unlisted":false,"prevItem":{"title":"Domain Model Validation In Kotlin: Part 2","permalink":"/community/blog/2022/03/03/domain-model-validation-in-kotlin-part-2"},"nextItem":{"title":"Announcing Arrow Analysis - a Kotlin compiler plug-in","permalink":"/community/blog/2022/02/02/announcing-arrow-analysis"}},"content":"In the first article in this series, Tiberiu Tofan describes his team\'s journey using Kotlin and Arrow for domain model validation, \\nstarting by setting the domain model\'s foundation in a type-safe way."},{"id":"/2022/02/02/announcing-arrow-analysis","metadata":{"permalink":"/community/blog/2022/02/02/announcing-arrow-analysis","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-02-02-announcing-arrow-analysis.md","source":"@site/content/blog/2022-02-02-announcing-arrow-analysis.md","title":"Announcing Arrow Analysis - a Kotlin compiler plug-in","description":"Announcing Arrow Analysis - a Kotlin compiler plug-in.","date":"2022-02-02T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.04,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Announcing Arrow Analysis - a Kotlin compiler plug-in","image":"https://www.47deg.com/assets/img/blog/featured_images/2022-01-25-arrow-analysis-is-available.jpg","category":"articles","tags":["meta","articles"],"link":"https://www.47deg.com/blog/arrow-analysis-kotlin-compiler-plugin/"},"unlisted":false,"prevItem":{"title":"Domain Model Validation In Kotlin: Part 1","permalink":"/community/blog/2022/02/22/domain-model-validation-in-kotlin-part-1"},"nextItem":{"title":"Functional programming in Kotlin with Arrow","permalink":"/community/blog/2021/12/15/functional-programming-in-kotlin-with-arrow"}},"content":"Announcing Arrow Analysis - a Kotlin compiler plug-in."},{"id":"/2021/12/15/functional-programming-in-kotlin-with-arrow","metadata":{"permalink":"/community/blog/2021/12/15/functional-programming-in-kotlin-with-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-12-15-functional-programming-in-kotlin-with-arrow.md","source":"@site/content/blog/2021-12-15-functional-programming-in-kotlin-with-arrow.md","title":"Functional programming in Kotlin with Arrow","description":"A presentation by Simon Vergauwen and Alejandro Serrano presented on the official Kotlin YouTube channel.","date":"2021-12-15T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.075,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional programming in Kotlin with Arrow","image":"https://img.youtube.com/vi/IDMmmrRhUvQ/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/IDMmmrRhUvQ"},"unlisted":false,"prevItem":{"title":"Announcing Arrow Analysis - a Kotlin compiler plug-in","permalink":"/community/blog/2022/02/02/announcing-arrow-analysis"},"nextItem":{"title":"Functional programming in Kotlin: Exploring Arrow","permalink":"/community/blog/2021/11/30/functional-programming-kotlin-exploring-arrow"}},"content":"A presentation by Simon Vergauwen and Alejandro Serrano presented on the official Kotlin YouTube channel."},{"id":"/2021/11/30/functional-programming-kotlin-exploring-arrow","metadata":{"permalink":"/community/blog/2021/11/30/functional-programming-kotlin-exploring-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-11-30-functional-programming-kotlin-exploring-arrow.md","source":"@site/content/blog/2021-11-30-functional-programming-kotlin-exploring-arrow.md","title":"Functional programming in Kotlin: Exploring Arrow","description":"A talk by Ties van de Ven explaining how to use the Either monad in practice, and how to use Arrow Optics lenses.","date":"2021-11-30T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"optics","permalink":"/community/blog/tags/optics"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.115,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional programming in Kotlin: Exploring Arrow","image":"http://i3.ytimg.com/vi/Wojgv2MeMGU/hqdefault.jpg","category":"videos","tags":["core","optics","videos"],"link":"https://youtu.be/Wojgv2MeMGU","event":"Kotlin Dev Day Amsterdam"},"unlisted":false,"prevItem":{"title":"Functional programming in Kotlin with Arrow","permalink":"/community/blog/2021/12/15/functional-programming-in-kotlin-with-arrow"},"nextItem":{"title":"Arrow of Outrageous Error Handling","permalink":"/community/blog/2021/08/12/arrow-of-outrageous-error-handling"}},"content":"A talk by Ties van de Ven explaining how to use the Either monad in practice, and how to use Arrow Optics lenses."},{"id":"/2021/08/12/arrow-of-outrageous-error-handling","metadata":{"permalink":"/community/blog/2021/08/12/arrow-of-outrageous-error-handling","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-08-12-arrow-of-outrageous-error-handling.md","source":"@site/content/blog/2021-08-12-arrow-of-outrageous-error-handling.md","title":"Arrow of Outrageous Error Handling","description":"An Android Worldwide talk by David Rawson about error handling on Android using Arrow.","date":"2021-08-12T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.07,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow of Outrageous Error Handling","image":"http://i3.ytimg.com/vi/OiN79vpPM08/hqdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/OiN79vpPM08","event":"Android Worldwide"},"unlisted":false,"prevItem":{"title":"Functional programming in Kotlin: Exploring Arrow","permalink":"/community/blog/2021/11/30/functional-programming-kotlin-exploring-arrow"},"nextItem":{"title":"Functional Domain Modeling in Kotlin - Validation","permalink":"/community/blog/2021/04/13/functional-domain-modeling-kotlin-validation"}},"content":"An Android Worldwide talk by David Rawson about error handling on Android using Arrow."},{"id":"/2021/04/13/functional-domain-modeling-kotlin-validation","metadata":{"permalink":"/community/blog/2021/04/13/functional-domain-modeling-kotlin-validation","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-04-13-functional-domain-modeling-kotlin-validation.md","source":"@site/content/blog/2021-04-13-functional-domain-modeling-kotlin-validation.md","title":"Functional Domain Modeling in Kotlin - Validation","description":"In part two of Functional Domain Modeling in Kotlin, Simon Vergauwen shows how to improve a domain with validation.","date":"2021-04-13T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.095,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Domain Modeling in Kotlin - Validation","image":"https://www.47deg.com/assets/img/blog/featured_images/2021-04-07-functional-domain-modeling-in-kotlin-validation.jpg","category":"articles","tags":["core","articles"],"link":"https://www.47deg.com/blog/functional-domain-modeling-part-2/"},"unlisted":false,"prevItem":{"title":"Arrow of Outrageous Error Handling","permalink":"/community/blog/2021/08/12/arrow-of-outrageous-error-handling"},"nextItem":{"title":"Functional Domain Modeling in Kotlin","permalink":"/community/blog/2021/04/11/functional-domain-modeling-kotlin"}},"content":"In part two of Functional Domain Modeling in Kotlin, Simon Vergauwen shows how to improve a domain with validation."},{"id":"/2021/04/11/functional-domain-modeling-kotlin","metadata":{"permalink":"/community/blog/2021/04/11/functional-domain-modeling-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-04-11-functional-domain-modeling-kotlin.md","source":"@site/content/blog/2021-04-11-functional-domain-modeling-kotlin.md","title":"Functional Domain Modeling in Kotlin","description":"Learn how to leverage Functional Domain Modeling to fully utilize the Kotlin type system and prevent bugs.","date":"2021-04-11T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.085,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Domain Modeling in Kotlin","image":"https://www.47deg.com/assets/img/blog/featured_images/2021-02-05-functional-domain-modeling-in-kotlin.jpg","category":"articles","tags":["core","articles"],"link":"https://www.47deg.com/blog/functional-domain-modeling/"},"unlisted":false,"prevItem":{"title":"Functional Domain Modeling in Kotlin - Validation","permalink":"/community/blog/2021/04/13/functional-domain-modeling-kotlin-validation"},"nextItem":{"title":"Your own custom Spring Data repository","permalink":"/community/blog/2021/04/11/your-own-custom-spring-data-repository"}},"content":"Learn how to leverage Functional Domain Modeling to fully utilize the Kotlin type system and prevent bugs."},{"id":"/2021/04/11/your-own-custom-spring-data-repository","metadata":{"permalink":"/community/blog/2021/04/11/your-own-custom-spring-data-repository","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-04-11-your-own-custom-spring-data-repository.md","source":"@site/content/blog/2021-04-11-your-own-custom-spring-data-repository.md","title":"Your own custom Spring Data repository","description":"How to integrate Spring Data Repository with Arrow.","date":"2021-04-11T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.04,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Your own custom Spring Data repository","image":"https://blog.frankel.ch/assets/resources/custom-spring-data-repository/spring-data.svg","category":"articles","tags":["core","articles"],"link":"https://blog.frankel.ch/custom-spring-data-repository/"},"unlisted":false,"prevItem":{"title":"Functional Domain Modeling in Kotlin","permalink":"/community/blog/2021/04/11/functional-domain-modeling-kotlin"},"nextItem":{"title":"Arrow 0.12.0 & 0.13.1 are now available","permalink":"/community/blog/2021/04/01/arrow-0-12-0-0-13-1-release"}},"content":"How to integrate Spring Data Repository with Arrow."},{"id":"/2021/04/01/arrow-0-12-0-0-13-1-release","metadata":{"permalink":"/community/blog/2021/04/01/arrow-0-12-0-0-13-1-release","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-04-01-arrow-0-12-0-0-13-1-release.md","source":"@site/content/blog/2021-04-01-arrow-0-12-0-0-13-1-release.md","title":"Arrow 0.12.0 & 0.13.1 are now available","description":"Arrow 0.12.0 & 0.13.1 are now available, featuring streamlining of the library for 1.0.0.","date":"2021-04-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.07,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow 0.12.0 & 0.13.1 are now available","image":"https://www.47deg.com/assets/img/blog/featured_images/2021-03-30-arrow-0-13-1.jpg","category":"articles","tags":["core","articles"],"link":"https://www.47deg.com/blog/arrow-0.13.0-release/"},"unlisted":false,"prevItem":{"title":"Your own custom Spring Data repository","permalink":"/community/blog/2021/04/11/your-own-custom-spring-data-repository"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: Shiny Things","permalink":"/community/blog/2021/02/26/advanced-fp-enterprise-bee-shiny-things"}},"content":"Arrow 0.12.0 & 0.13.1 are now available, featuring streamlining of the library for 1.0.0."},{"id":"/2021/02/26/advanced-fp-enterprise-bee-shiny-things","metadata":{"permalink":"/community/blog/2021/02/26/advanced-fp-enterprise-bee-shiny-things","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-02-26-advanced-fp-enterprise-bee-shiny-things.md","source":"@site/content/blog/2021-02-26-advanced-fp-enterprise-bee-shiny-things.md","title":"Advanced FP for the Enterprise Bee: Shiny Things","description":"Garth Gilmour concludes his 8-part series introducing advanced FP concepts via Kotlin and Arrow.","date":"2021-02-26T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.07,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: Shiny Things","image":"https://miro.medium.com/max/675/0*2D7qyemVVsa0Aldp.jpg","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-shiny-things-770ae9c27472"},"unlisted":false,"prevItem":{"title":"Arrow 0.12.0 & 0.13.1 are now available","permalink":"/community/blog/2021/04/01/arrow-0-12-0-0-13-1-release"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: State","permalink":"/community/blog/2021/02/19/advanced-fp-enterprise-bee-state"}},"content":"Garth Gilmour concludes his 8-part series introducing advanced FP concepts via Kotlin and Arrow."},{"id":"/2021/02/19/advanced-fp-enterprise-bee-state","metadata":{"permalink":"/community/blog/2021/02/19/advanced-fp-enterprise-bee-state","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-02-19-advanced-fp-enterprise-bee-state.md","source":"@site/content/blog/2021-02-19-advanced-fp-enterprise-bee-state.md","title":"Advanced FP for the Enterprise Bee: State","description":"This is the seventh post in a series written by Garth Gilmour introducing advanced FP concepts via Kotlin and Arrow. This article explores the world of Monads, and, in particular, the State type.","date":"2021-02-19T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.165,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: State","image":"https://miro.medium.com/max/460/0*rMk9skNj5L-1E6cs","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-state-4f8fd2d8098b"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: Shiny Things","permalink":"/community/blog/2021/02/26/advanced-fp-enterprise-bee-shiny-things"},"nextItem":{"title":"Hands-on Arrow","permalink":"/community/blog/2021/02/12/hands-on-arrow"}},"content":"This is the seventh post in a series written by Garth Gilmour introducing advanced FP concepts via Kotlin and Arrow. This article explores the world of Monads, and, in particular, the State type."},{"id":"/2021/02/12/hands-on-arrow","metadata":{"permalink":"/community/blog/2021/02/12/hands-on-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-02-12-hands-on-arrow.md","source":"@site/content/blog/2021-02-12-hands-on-arrow.md","title":"Hands-on Arrow","description":"A video from the meetup of the Google Developer Group based in Nuremberg with a presentation by Karin-Aleksandra Monoid about using Arrow.","date":"2021-02-12T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.11,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Hands-on Arrow","image":"http://i3.ytimg.com/vi/tkl9EaUMfm8/hqdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/tkl9EaUMfm8?t=2136","event":"GDG Nuremberg"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: State","permalink":"/community/blog/2021/02/19/advanced-fp-enterprise-bee-state"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: Optics","permalink":"/community/blog/2021/02/10/advanced-fp-enterprise-bee-optics"}},"content":"A video from the meetup of the Google Developer Group based in Nuremberg with a presentation by Karin-Aleksandra Monoid about using Arrow."},{"id":"/2021/02/10/advanced-fp-enterprise-bee-optics","metadata":{"permalink":"/community/blog/2021/02/10/advanced-fp-enterprise-bee-optics","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-02-10-advanced-fp-enterprise-bee-optics.md","source":"@site/content/blog/2021-02-10-advanced-fp-enterprise-bee-optics.md","title":"Advanced FP for the Enterprise Bee: Optics","description":"This is the sixth post in a series introducing advanced FP concepts via Kotlin and Arrow. This article covers Optics with Kotlin and Arrow.","date":"2021-02-10T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: Optics","image":"https://miro.medium.com/max/700/1*7Q3EXosiX4YmLGYQWOllmQ.jpeg","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-optics-2ccc444d409b"},"unlisted":false,"prevItem":{"title":"Hands-on Arrow","permalink":"/community/blog/2021/02/12/hands-on-arrow"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: Typeclasses","permalink":"/community/blog/2021/02/05/advanced-fp-enterprise-bee-typeclasses"}},"content":"This is the sixth post in a series introducing advanced FP concepts via Kotlin and Arrow. This article covers Optics with Kotlin and Arrow."},{"id":"/2021/02/05/advanced-fp-enterprise-bee-typeclasses","metadata":{"permalink":"/community/blog/2021/02/05/advanced-fp-enterprise-bee-typeclasses","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-02-05-advanced-fp-enterprise-bee-typeclasses.md","source":"@site/content/blog/2021-02-05-advanced-fp-enterprise-bee-typeclasses.md","title":"Advanced FP for the Enterprise Bee: Typeclasses","description":"This fifth post in a series introduces advanced FP concepts via Kotlin and Arrow. This article introduces Typeclasses, and reviews a practical example of Typeclasses from the Arrow library.","date":"2021-02-05T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.145,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: Typeclasses","image":"https://miro.medium.com/max/700/0*oOFUf_kkNWyHzS8Q.jpg","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-typeclasses-2addc232ae23"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: Optics","permalink":"/community/blog/2021/02/10/advanced-fp-enterprise-bee-optics"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: Kleisli","permalink":"/community/blog/2021/01/29/advanced-fp-enterprise-bee-kleisli"}},"content":"This fifth post in a series introduces advanced FP concepts via Kotlin and Arrow. This article introduces Typeclasses, and reviews a practical example of Typeclasses from the Arrow library."},{"id":"/2021/01/29/advanced-fp-enterprise-bee-kleisli","metadata":{"permalink":"/community/blog/2021/01/29/advanced-fp-enterprise-bee-kleisli","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-01-29-advanced-fp-enterprise-bee-kleisli.md","source":"@site/content/blog/2021-01-29-advanced-fp-enterprise-bee-kleisli.md","title":"Advanced FP for the Enterprise Bee: Kleisli","description":"This fourth post in a series introduces advanced FP concepts via Kotlin and Arrow. This article looks at the Kleisli type.","date":"2021-01-29T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.105,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: Kleisli","image":"https://miro.medium.com/max/397/1*ALuwNIY0UvXaBzk_zaBXTA.png","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-kleisli-1d0de0fa82d9"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: Typeclasses","permalink":"/community/blog/2021/02/05/advanced-fp-enterprise-bee-typeclasses"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: Higher Kinded Types","permalink":"/community/blog/2021/01/22/advanced-fp-enterprise-bee-higher-kinded-types"}},"content":"This fourth post in a series introduces advanced FP concepts via Kotlin and Arrow. This article looks at the Kleisli type."},{"id":"/2021/01/22/advanced-fp-enterprise-bee-higher-kinded-types","metadata":{"permalink":"/community/blog/2021/01/22/advanced-fp-enterprise-bee-higher-kinded-types","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-01-22-advanced-fp-enterprise-bee-higher-kinded-types.md","source":"@site/content/blog/2021-01-22-advanced-fp-enterprise-bee-higher-kinded-types.md","title":"Advanced FP for the Enterprise Bee: Higher Kinded Types","description":"This third post in a series introduces advanced FP concepts via Kotlin and Arrow. This article shows the usefulness of Higher Kinded Types.","date":"2021-01-22T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.115,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: Higher Kinded Types","image":"https://miro.medium.com/max/700/0*cXrhKidxYGGJABB1.jpg","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-higher-kinded-types-c6742e24527"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: Kleisli","permalink":"/community/blog/2021/01/29/advanced-fp-enterprise-bee-kleisli"},"nextItem":{"title":"FP concepts with Arrow","permalink":"/community/blog/2021/01/20/fp-concepts-with-arrow"}},"content":"This third post in a series introduces advanced FP concepts via Kotlin and Arrow. This article shows the usefulness of Higher Kinded Types."},{"id":"/2021/01/20/fp-concepts-with-arrow","metadata":{"permalink":"/community/blog/2021/01/20/fp-concepts-with-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-01-20-fp-concepts-with-arrow.md","source":"@site/content/blog/2021-01-20-fp-concepts-with-arrow.md","title":"FP concepts with Arrow","description":"A video from the Belfast Kotlin User Group with a presentation by Katie Levy and Shelby Cohen covering FP concepts with Arrow.","date":"2021-01-20T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.11,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"FP concepts with Arrow","image":"http://i3.ytimg.com/vi/IZlMQXLySz4/hqdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/IZlMQXLySz4","event":"Belfast KUG"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: Higher Kinded Types","permalink":"/community/blog/2021/01/22/advanced-fp-enterprise-bee-higher-kinded-types"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: Applicatives","permalink":"/community/blog/2021/01/15/advanced-fp-enterprise-bee-applicatives"}},"content":"A video from the Belfast Kotlin User Group with a presentation by Katie Levy and Shelby Cohen covering FP concepts with Arrow."},{"id":"/2021/01/15/advanced-fp-enterprise-bee-applicatives","metadata":{"permalink":"/community/blog/2021/01/15/advanced-fp-enterprise-bee-applicatives","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-01-15-advanced-fp-enterprise-bee-applicatives.md","source":"@site/content/blog/2021-01-15-advanced-fp-enterprise-bee-applicatives.md","title":"Advanced FP for the Enterprise Bee: Applicatives","description":"This second post in a series introduces advanced FP concepts via Kotlin and Arrow. This article takes a deep dive into Applicatives.","date":"2021-01-15T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.11,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: Applicatives","image":"https://miro.medium.com/max/650/0*M1mKM3l9OCuW5bgC.png","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-applicatives-be76e4b6803c"},"unlisted":false,"prevItem":{"title":"FP concepts with Arrow","permalink":"/community/blog/2021/01/20/fp-concepts-with-arrow"},"nextItem":{"title":"Functional Android","permalink":"/community/blog/2021/01/13/functional-android"}},"content":"This second post in a series introduces advanced FP concepts via Kotlin and Arrow. This article takes a deep dive into Applicatives."},{"id":"/2021/01/13/functional-android","metadata":{"permalink":"/community/blog/2021/01/13/functional-android","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-01-13-functional-android.md","source":"@site/content/blog/2021-01-13-functional-android.md","title":"Functional Android","description":"In this talk from the January 13th, 2021 Kotlin London User Group meetup, Jorge Castillo shows how to seamlessly integrate the functional programming paradigm with our Android architecture to get the most out of both worlds.","date":"2021-01-13T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.18,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Android","image":"https://www.47deg.com/assets/img/events/featured_images/2021-01-13-kotlin-london-meetup.jpg","category":"videos","tags":["fx","videos"],"link":"https://youtu.be/XhijgrEG1tI","event":"Kotlin London"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: Applicatives","permalink":"/community/blog/2021/01/15/advanced-fp-enterprise-bee-applicatives"},"nextItem":{"title":"Advanced FP for the Enterprise Bee: Traverse","permalink":"/community/blog/2021/01/08/advanced-fp-enterprise-bee-traverse"}},"content":"In this talk from the January 13th, 2021 Kotlin London User Group meetup, Jorge Castillo shows how to seamlessly integrate the functional programming paradigm with our Android architecture to get the most out of both worlds."},{"id":"/2021/01/08/advanced-fp-enterprise-bee-traverse","metadata":{"permalink":"/community/blog/2021/01/08/advanced-fp-enterprise-bee-traverse","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2021-01-08-advanced-fp-enterprise-bee-traverse.md","source":"@site/content/blog/2021-01-08-advanced-fp-enterprise-bee-traverse.md","title":"Advanced FP for the Enterprise Bee: Traverse","description":"This first post in a series introduces advanced FP concepts via Kotlin and Arrow. This article takes a deep dive into the Traverse operation.","date":"2021-01-08T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Advanced FP for the Enterprise Bee: Traverse","image":"https://miro.medium.com/max/700/1*GAhKVPMXbQExcEhYho3XzQ.jpeg","category":"articles","tags":["core","articles"],"link":"https://medium.com/google-developer-experts/advanced-fp-for-the-enterprise-bee-traverse-b5e4e8b7b8e4"},"unlisted":false,"prevItem":{"title":"Functional Android","permalink":"/community/blog/2021/01/13/functional-android"},"nextItem":{"title":"Roll your own Computation blocks in Kotlin","permalink":"/community/blog/2020/12/16/roll-your-own-computation-blocks-kotlin"}},"content":"This first post in a series introduces advanced FP concepts via Kotlin and Arrow. This article takes a deep dive into the Traverse operation."},{"id":"/2020/12/16/roll-your-own-computation-blocks-kotlin","metadata":{"permalink":"/community/blog/2020/12/16/roll-your-own-computation-blocks-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-12-16-roll-your-own-computation-blocks-kotlin.md","source":"@site/content/blog/2020-12-16-roll-your-own-computation-blocks-kotlin.md","title":"Roll your own Computation blocks in Kotlin","description":"Computation blocks empower library authors and users to build ad-hoc operators and DSLs over any data-type getting rid of API complexity and simplifying composition. In this talk, we will learn how we can build Computation blocks over Kotlin suspend functions & the Arrow Continuations library\'s reset / shift capabilities. We will demonstrate the composition of well known JVM data-types and patterns such as lists, futures, streams, and IOs, where callback chains can be simply replaced by a single","date":"2020-12-16T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.71,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Roll your own Computation blocks in Kotlin","image":"https://img.youtube.com/vi/0_zatebXMDU/hqdefault.jpg","category":"videos","tags":["core","fx","videos"],"link":"https://youtu.be/0_zatebXMDU","event":"Lambda Lille"},"unlisted":false,"prevItem":{"title":"Advanced FP for the Enterprise Bee: Traverse","permalink":"/community/blog/2021/01/08/advanced-fp-enterprise-bee-traverse"},"nextItem":{"title":"Fight Complexity with Functional Programming","permalink":"/community/blog/2020/11/19/fight-complexity-with-functional-programming"}},"content":"Computation blocks empower library authors and users to build ad-hoc operators and DSLs over any data-type getting rid of API complexity and simplifying composition. In this talk, we will learn how we can build Computation blocks over Kotlin suspend functions & the Arrow Continuations library\'s `reset` / `shift` capabilities. We will demonstrate the composition of well known JVM data-types and patterns such as lists, futures, streams, and IOs, where callback chains can be simply replaced by a single\\nsuspended operator. The Kotlin suspension system provides enough capabilities to implement delimited continuations allowing us to ignore methods such as `map` & `flatMap` on your favorite data-type in favor of direct imperative syntax. Leveraging Kotlin suspension & thinking of Continuations as \\"The Mother of all Monads\\", we will embark on this journey where we\'ll build and roll our own computation blocks with Arrow Continuations."},{"id":"/2020/11/19/fight-complexity-with-functional-programming","metadata":{"permalink":"/community/blog/2020/11/19/fight-complexity-with-functional-programming","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-11-19-fight-complexity-with-functional-programming.md","source":"@site/content/blog/2020-11-19-fight-complexity-with-functional-programming.md","title":"Fight Complexity with Functional Programming","description":"A Metric-driven approach to reduce Cognitive Complexity in a code base, using Functional Programming, demoed hands-on, by solving a complex real-world ubiquitous design challenge - REST API Bulk Request Validation, with an extensible Framework that separates what-to-do (Validations) from how-to-do (Validation Orchestration). Let\'s do a case study of a successful implementation done by our team in the world\'s largest SaaS org, Salesforce, using Kotlin and Arrow.","date":"2020-11-19T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.33,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Fight Complexity with Functional Programming","image":"https://img.youtube.com/vi/Dvr6gx4XaD8/hqdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/Dvr6gx4XaD8","event":"All Things Open 2020"},"unlisted":false,"prevItem":{"title":"Roll your own Computation blocks in Kotlin","permalink":"/community/blog/2020/12/16/roll-your-own-computation-blocks-kotlin"},"nextItem":{"title":"Arrow Promoted to Adopt by Technology Radar","permalink":"/community/blog/2020/10/28/arrow-promoted-to-adopt"}},"content":"A Metric-driven approach to reduce Cognitive Complexity in a code base, using Functional Programming, demoed hands-on, by solving a complex real-world ubiquitous design challenge - REST API Bulk Request Validation, with an extensible Framework that separates what-to-do (Validations) from how-to-do (Validation Orchestration). Let\'s do a case study of a successful implementation done by our team in the world\'s largest SaaS org, Salesforce, using Kotlin and Arrow."},{"id":"/2020/10/28/arrow-promoted-to-adopt","metadata":{"permalink":"/community/blog/2020/10/28/arrow-promoted-to-adopt","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-10-28-arrow-promoted-to-adopt.md","source":"@site/content/blog/2020-10-28-arrow-promoted-to-adopt.md","title":"Arrow Promoted to Adopt by Technology Radar","description":"Arrow is promoted as the functional companion for Kotlin\'s standard library. Indeed, the package of ready-to-use higher-level abstractions delivered by Arrow has proven so useful that our teams now consider Arrow a sensible default when working with Kotlin. Recently, in preparation for the 1.0 release, the Arrow team introduced several changes, including the addition of new modules but also some deprecations and removals.","date":"2020-10-28T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.315,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow Promoted to Adopt by Technology Radar","image":"https://static.thoughtworks.com/images/radar/2020-10/en/tech-radar-card.png","category":"articles","tags":["core","articles"],"link":"https://www.thoughtworks.com/radar/languages-and-frameworks/arrow"},"unlisted":false,"prevItem":{"title":"Fight Complexity with Functional Programming","permalink":"/community/blog/2020/11/19/fight-complexity-with-functional-programming"},"nextItem":{"title":"How to fix the pain of modifying Kotlin nested data classes","permalink":"/community/blog/2020/10/28/modifying-kotlin-nested-data-classes"}},"content":"Arrow is promoted as the functional companion for Kotlin\'s standard library. Indeed, the package of ready-to-use higher-level abstractions delivered by Arrow has proven so useful that our teams now consider Arrow a sensible default when working with Kotlin. Recently, in preparation for the 1.0 release, the Arrow team introduced several changes, including the addition of new modules but also some deprecations and removals."},{"id":"/2020/10/28/modifying-kotlin-nested-data-classes","metadata":{"permalink":"/community/blog/2020/10/28/modifying-kotlin-nested-data-classes","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-10-28-modifying-kotlin-nested-data-classes.md","source":"@site/content/blog/2020-10-28-modifying-kotlin-nested-data-classes.md","title":"How to fix the pain of modifying Kotlin nested data classes","description":"Lenses are not part of the Kotlin Standard Library yet, so we will need to use an Open Source library called Arrow-kt. Arrow-kt is a huge community effort to bring some of the missing functional programming features to Kotlin.","date":"2020-10-28T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.195,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"How to fix the pain of modifying Kotlin nested data classes","image":"https://i2.wp.com/ivanmorgillo.com/wp-content/uploads/2020/10/pexels-photo-712786.jpeg","category":"articles","tags":["core","articles"],"link":"https://ivanmorgillo.com/2020/10/28/how-to-fix-the-pain-of-modifying-kotlin-nested-data-classes/"},"unlisted":false,"prevItem":{"title":"Arrow Promoted to Adopt by Technology Radar","permalink":"/community/blog/2020/10/28/arrow-promoted-to-adopt"},"nextItem":{"title":"Technology Radar Promotes Arrow to \'Adopt\'","permalink":"/community/blog/2020/10/28/technology-radar-promotes-arrow"}},"content":"Lenses are not part of the Kotlin Standard Library yet, so we will need to use an Open Source library called Arrow-kt. Arrow-kt is a huge community effort to bring some of the missing functional programming features to Kotlin."},{"id":"/2020/10/28/technology-radar-promotes-arrow","metadata":{"permalink":"/community/blog/2020/10/28/technology-radar-promotes-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-10-28-technology-radar-promotes-arrow.md","source":"@site/content/blog/2020-10-28-technology-radar-promotes-arrow.md","title":"Technology Radar Promotes Arrow to \'Adopt\'","description":"Arrow has been promoted to \u201cAdopt\u201d by ThoughtWorks\u2019 technology guide Technology Radar.","date":"2020-10-28T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Technology Radar Promotes Arrow to \'Adopt\'","image":"https://www.47deg.com/assets/img/blog/featured_images/2020-10-28-arrow-promoted-to-adopt.jpg","category":"articles","tags":["core","articles"],"link":"https://www.47deg.com/blog/arrow-promoted-to-adopt/"},"unlisted":false,"prevItem":{"title":"How to fix the pain of modifying Kotlin nested data classes","permalink":"/community/blog/2020/10/28/modifying-kotlin-nested-data-classes"},"nextItem":{"title":"Writing Kotlin Compiler Plugins with Arrow Meta","permalink":"/community/blog/2020/10/08/writing-kotlin-compiler-plugins-talk"}},"content":"Arrow has been promoted to \u201cAdopt\u201d by ThoughtWorks\u2019 technology guide *Technology Radar*."},{"id":"/2020/10/08/writing-kotlin-compiler-plugins-talk","metadata":{"permalink":"/community/blog/2020/10/08/writing-kotlin-compiler-plugins-talk","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-10-08-writing-kotlin-compiler-plugins-talk.md","source":"@site/content/blog/2020-10-08-writing-kotlin-compiler-plugins-talk.md","title":"Writing Kotlin Compiler Plugins with Arrow Meta","description":"Lean how to write and test compiler plugins and IDE plugins with Arrow Meta.","date":"2020-10-08T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.07,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Writing Kotlin Compiler Plugins with Arrow Meta","image":"https://codingwithmohit.com/assets/images/talks/writing_kotlin_compiler_plugins_with_arrow_meta.jpg","category":"videos","tags":["meta","videos"],"link":"https://www.droidcon.com/media-detail?video=470216591","event":"Droidcon EMEA 2020"},"unlisted":false,"prevItem":{"title":"Technology Radar Promotes Arrow to \'Adopt\'","permalink":"/community/blog/2020/10/28/technology-radar-promotes-arrow"},"nextItem":{"title":"Type Proofs and FP for the Kotlin Type System","permalink":"/community/blog/2020/06/16/type-proofs-fp-kotlin-talk"}},"content":"Lean how to write and test compiler plugins and IDE plugins with Arrow Meta."},{"id":"/2020/06/16/type-proofs-fp-kotlin-talk","metadata":{"permalink":"/community/blog/2020/06/16/type-proofs-fp-kotlin-talk","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-06-16-type-proofs-fp-kotlin-talk.md","source":"@site/content/blog/2020-06-16-type-proofs-fp-kotlin-talk.md","title":"Type Proofs and FP for the Kotlin Type System","description":"Type Proofs is a new compiler plugin built on Arrow Meta enabling new features in the Kotlin type system, such as Type Classes, Union Types, Type Refinements, and many other extensions that make Functional Programming easier in Kotlin.","date":"2020-06-16T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.495,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Type Proofs and FP for the Kotlin Type System","image":"https://img.youtube.com/vi/ETn_6LmMjho/hqdefault.jpg","category":"videos","tags":["meta","videos"],"link":"https://youtu.be/ETn_6LmMjho","event":"KTUG Munich June Meetup"},"unlisted":false,"prevItem":{"title":"Writing Kotlin Compiler Plugins with Arrow Meta","permalink":"/community/blog/2020/10/08/writing-kotlin-compiler-plugins-talk"},"nextItem":{"title":"Asynchronisme et hexagone en Kotlin avec ArrowKt","permalink":"/community/blog/2020/06/11/asynchronisme-et-hexagone-en-kotlin-avec-Arrow"}},"content":"Type Proofs is a new compiler plugin built on Arrow Meta enabling new features in the Kotlin type system, such as Type Classes, Union Types, Type Refinements, and many other extensions that make Functional Programming easier in Kotlin.\\n\\nType Proofs propositions are expressed as extension functions that unlock new relationships between types ad-hoc whilst remaining fully compatible with subtype polymorphism and the existing inheritance type system.\\n\\nThis talk demonstrates some of the new features the Arrow team is introducing in Arrow at the type level and IDE and how others can benefit from them when building libraries and applications."},{"id":"/2020/06/11/asynchronisme-et-hexagone-en-kotlin-avec-Arrow","metadata":{"permalink":"/community/blog/2020/06/11/asynchronisme-et-hexagone-en-kotlin-avec-Arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-06-11-asynchronisme-et-hexagone-en-kotlin-avec-Arrow.md","source":"@site/content/blog/2020-06-11-asynchronisme-et-hexagone-en-kotlin-avec-Arrow.md","title":"Asynchronisme et hexagone en Kotlin avec ArrowKt","description":"J\'aime bien le DDD et surtout les architectures hexagonales. Avoir un domaine auto-portant et non coupl\xe9 \xe0 des blocs techniques comme Spring (ou autres) apporte beaucoup dans la testabilit\xe9 et l\'\xe9volutivit\xe9 de l\'application.","date":"2020-06-11T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.665,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Asynchronisme et hexagone en Kotlin avec ArrowKt","image":"https://img.youtube.com/vi/moJpV-BgezM/hqdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/moJpV-BgezM","event":"Lambda Lille"},"unlisted":false,"prevItem":{"title":"Type Proofs and FP for the Kotlin Type System","permalink":"/community/blog/2020/06/16/type-proofs-fp-kotlin-talk"},"nextItem":{"title":"Arrow Fx: Functional Domain Modeling with Kotlin","permalink":"/community/blog/2020/06/05/functional-domain-modeling-kotlin"}},"content":"J\'aime bien le DDD et surtout les architectures hexagonales. Avoir un domaine auto-portant et non coupl\xe9 \xe0 des blocs techniques comme Spring (ou autres) apporte beaucoup dans la testabilit\xe9 et l\'\xe9volutivit\xe9 de l\'application.\\nLes mod\xe8les d\'asynchronismes (programmation r\xe9active, retard\xe9e, coroutines...) emp\xeachent la dissociation stricte de notre mod\xe8le m\xe9tier et de notre code infra dans un langage comme Kotlin.\\nOblig\xe9 d\'utiliser une lib de coroutine ou autre programmation reactive.\\nDeux solutions s\'offrent alors :\\n- D\xe9finir que les mod\xe8les d\'asynchronisme sont des invariants de notre domaine et accepter ce couplage\\n- Chercher comment mod\xe9liser notre domaine comme un ensemble de comportements asynchrones\\nDans ce talk nous allons voir comment r\xe9aliser la deuxi\xe8me solution en utilisant la librairie Arrow et son mod\xe8le conceptuel d\'asynchronisme pour nous permettre de d\xe9coupler notre domaine de toute logique d\'infrastructure."},{"id":"/2020/06/05/functional-domain-modeling-kotlin","metadata":{"permalink":"/community/blog/2020/06/05/functional-domain-modeling-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-06-05-functional-domain-modeling-kotlin.md","source":"@site/content/blog/2020-06-05-functional-domain-modeling-kotlin.md","title":"Arrow Fx: Functional Domain Modeling with Kotlin","description":"Arrow Fx is a purely functional concurrency framework for Kotlin\u2019s suspend system.","date":"2020-06-05T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow Fx: Functional Domain Modeling with Kotlin","image":"https://img.youtube.com/vi/6sw8GAhUJz0/maxresdefault.jpg","category":"videos","tags":["fx","videos"],"link":"https://youtu.be/6sw8GAhUJz0","event":"Kotliners 2020"},"unlisted":false,"prevItem":{"title":"Asynchronisme et hexagone en Kotlin avec ArrowKt","permalink":"/community/blog/2020/06/11/asynchronisme-et-hexagone-en-kotlin-avec-Arrow"},"nextItem":{"title":"Type Proofs and FP for the Kotlin Type System","permalink":"/community/blog/2020/05/27/type-proofs-fp-kotlin-talk"}},"content":"Arrow Fx is a purely functional concurrency framework for Kotlin\u2019s suspend system.\\n\\nIn this talk, we will learn how typed functional programming and functional domain modeling powered by Arrow Optics, Fx, and Meta can be applied to assemble powerful applications and architectures from small and simple building blocks.\\n\\nSimon and Raul will cover important topics and patterns such as optics, union types, refined types, type classes, automatic task cancellation, safe resource handling, and compare how Arrow Fx differs from KotlinX coroutines."},{"id":"/2020/05/27/type-proofs-fp-kotlin-talk","metadata":{"permalink":"/community/blog/2020/05/27/type-proofs-fp-kotlin-talk","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-05-27-type-proofs-fp-kotlin-talk.md","source":"@site/content/blog/2020-05-27-type-proofs-fp-kotlin-talk.md","title":"Type Proofs and FP for the Kotlin Type System","description":"Type Proofs is a new compiler plugin built on Arrow Meta enabling new features in the Kotlin type system, such as Type Classes, Union Types, Type Refinements, and many other extensions that make Functional Programming easier in Kotlin.","date":"2020-05-27T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.495,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Type Proofs and FP for the Kotlin Type System","image":"https://img.youtube.com/vi/lK80dPcsNUg/hqdefault.jpg","category":"videos","tags":["meta","videos"],"link":"https://www.youtube.com/watch?v=lK80dPcsNUg&t=353s","event":"Chicago Kotlin User Group Meetup"},"unlisted":false,"prevItem":{"title":"Arrow Fx: Functional Domain Modeling with Kotlin","permalink":"/community/blog/2020/06/05/functional-domain-modeling-kotlin"},"nextItem":{"title":"Android architectures with Arrow Fx","permalink":"/community/blog/2020/05/06/android-architectures-arrow-fx"}},"content":"Type Proofs is a new compiler plugin built on Arrow Meta enabling new features in the Kotlin type system, such as Type Classes, Union Types, Type Refinements, and many other extensions that make Functional Programming easier in Kotlin.\\n\\nType Proofs propositions are expressed as extension functions that unlock new relationships between types ad-hoc whilst remaining fully compatible with subtype polymorphism and the existing inheritance type system.\\n\\nThis talk demonstrates some of the new features the Arrow team is introducing in Arrow at the type level and IDE and how others can benefit from them when building libraries and applications."},{"id":"/2020/05/06/android-architectures-arrow-fx","metadata":{"permalink":"/community/blog/2020/05/06/android-architectures-arrow-fx","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-05-06-android-architectures-arrow-fx.md","source":"@site/content/blog/2020-05-06-android-architectures-arrow-fx.md","title":"Android architectures with Arrow Fx","description":"May 2020 Online Kotlin Meetup","date":"2020-05-06T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.43,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Android architectures with Arrow Fx","image":"https://img.youtube.com/vi/r4D-oFd6wmY/maxresdefault.jpg","category":"videos","tags":["fx","videos"],"link":"https://youtu.be/r4D-oFd6wmY","event":"May 2020 Online Kotlin Meetup"},"unlisted":false,"prevItem":{"title":"Type Proofs and FP for the Kotlin Type System","permalink":"/community/blog/2020/05/27/type-proofs-fp-kotlin-talk"},"nextItem":{"title":"Writing a Kotlin Compiler Plugin with Arrow Meta","permalink":"/community/blog/2020/04/08/writing-compiler-plugin-with-with-arrow-meta"}},"content":"May 2020 Online Kotlin Meetup\\n\\nDaniel Montoya Ramos - Senior Software Engineer @47deg\\nAndroid Jetpack Compose\\n\\nDani will show a new way of building UI\'s in Android using Jetpack Compose, comparing Imperative vs Declarative approaches. He\'ll look at managing state changes, composing functions as well as some of the gotchas and wishes for the future.\\n\\nAlberto Ballano - Senior Software Engineer @47deg\\nAndroid architectures with Arrow Fx\\n\\nAlberto will talk about typical Android architectures, and how can they benefit from Functional Programming techniques available in Arrow."},{"id":"/2020/04/08/writing-compiler-plugin-with-with-arrow-meta","metadata":{"permalink":"/community/blog/2020/04/08/writing-compiler-plugin-with-with-arrow-meta","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-04-08-writing-compiler-plugin-with-with-arrow-meta.md","source":"@site/content/blog/2020-04-08-writing-compiler-plugin-with-with-arrow-meta.md","title":"Writing a Kotlin Compiler Plugin with Arrow Meta","description":"Learn how to write and test the debuglog compiler plugin in Arrow Meta. Here is the compiler plugin debulog-arrow-meta explained in the article.","date":"2020-04-08T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.115,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Writing a Kotlin Compiler Plugin with Arrow Meta","image":"https://meta.arrow-kt.io/img/demos/hello-world-compiler-plugin.gif","category":"articles","tags":["meta","articles"],"link":"https://medium.com/@heyitsmohit/writing-kotlin-compiler-plugin-with-arrow-meta-cf7b3689aa3e"},"unlisted":false,"prevItem":{"title":"Android architectures with Arrow Fx","permalink":"/community/blog/2020/05/06/android-architectures-arrow-fx"},"nextItem":{"title":"Template-Oriented-Programming to Ship Faster, Part-1","permalink":"/community/blog/2020/04/06/template-oriented-programming-talk"}},"content":"Learn how to write and test the [debuglog](https://github.com/kevinmost/debuglog) compiler plugin in Arrow Meta. Here is the compiler plugin [debulog-arrow-meta](https://github.com/msya/debuglog-arrow-meta) explained in the article."},{"id":"/2020/04/06/template-oriented-programming-talk","metadata":{"permalink":"/community/blog/2020/04/06/template-oriented-programming-talk","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-04-06-template-oriented-programming-talk.md","source":"@site/content/blog/2020-04-06-template-oriented-programming-talk.md","title":"Template-Oriented-Programming to Ship Faster, Part-1","description":"Learn about the magic of Ad-hoc polymorphism using Arrow typeclasses with simple examples.","date":"2020-04-06T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.065,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Template-Oriented-Programming to Ship Faster, Part-1","image":"https://img.youtube.com/vi/_QBlKtUY6ac/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/_QBlKtUY6ac","event":"Kotlin User Group, Hyderabad, Online Meetup"},"unlisted":false,"prevItem":{"title":"Writing a Kotlin Compiler Plugin with Arrow Meta","permalink":"/community/blog/2020/04/08/writing-compiler-plugin-with-with-arrow-meta"},"nextItem":{"title":"Template-Oriented-Programming to Ship Faster","permalink":"/community/blog/2020/04/06/template-oriented-programming"}},"content":"Learn about the magic of Ad-hoc polymorphism using Arrow typeclasses with simple examples."},{"id":"/2020/04/06/template-oriented-programming","metadata":{"permalink":"/community/blog/2020/04/06/template-oriented-programming","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-04-06-template-oriented-programming.md","source":"@site/content/blog/2020-04-06-template-oriented-programming.md","title":"Template-Oriented-Programming to Ship Faster","description":"With a POC using Spring-fu + Kotlin + Arrow, let\'s Convert Monomorphic code (for common use-cases such as Auth, Validation) to Polymorphic reusable templates, to be reused among heterogeneous services built on different tech-stacks (blocking/non-blocking). This helps accelerate feature development.","date":"2020-04-06T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.2,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Template-Oriented-Programming to Ship Faster","image":"https://img.youtube.com/vi/_QBlKtUY6ac/maxresdefault.jpg","category":"articles","tags":["core","articles"],"link":"https://overfullstack.github.io/posts/top-with-ad-hoc-polymorphism/"},"unlisted":false,"prevItem":{"title":"Template-Oriented-Programming to Ship Faster, Part-1","permalink":"/community/blog/2020/04/06/template-oriented-programming-talk"},"nextItem":{"title":"Explaining the Arrow Android sample","permalink":"/community/blog/2020/04/01/explaining-arrow-android-sample"}},"content":"With a POC using Spring-fu + Kotlin + Arrow, let\'s Convert Monomorphic code (for common use-cases such as Auth, Validation) to Polymorphic reusable templates, to be reused among heterogeneous services built on different tech-stacks (blocking/non-blocking). This helps accelerate feature development."},{"id":"/2020/04/01/explaining-arrow-android-sample","metadata":{"permalink":"/community/blog/2020/04/01/explaining-arrow-android-sample","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-04-01-explaining-arrow-android-sample.md","source":"@site/content/blog/2020-04-01-explaining-arrow-android-sample.md","title":"Explaining the Arrow Android sample","description":"Arrow is an exciting development for Kotlin developers interested in functional programming and, more broadly, pushing the limits of the Kotlin compiler.","date":"2020-04-01T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.11,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Explaining the Arrow Android sample","image":"https://blog.frankel.ch/assets/resources/imperative-functional-programming/arrow-brand.svg","category":"articles","tags":["core","articles"],"link":"https://medium.com/default-to-open/explaining-the-arrow-android-sample-ee5c8bdfe88a"},"unlisted":false,"prevItem":{"title":"Template-Oriented-Programming to Ship Faster","permalink":"/community/blog/2020/04/06/template-oriented-programming"},"nextItem":{"title":"IO integration with kotlinx.coroutines","permalink":"/community/blog/2020/03/02/io-integration-kotlinx-coroutines"}},"content":"Arrow is an exciting development for Kotlin developers interested in functional programming and, more broadly, pushing the limits of the Kotlin compiler."},{"id":"/2020/03/02/io-integration-kotlinx-coroutines","metadata":{"permalink":"/community/blog/2020/03/02/io-integration-kotlinx-coroutines","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-03-02-io-integration-kotlinx-coroutines.md","source":"@site/content/blog/2020-03-02-io-integration-kotlinx-coroutines.md","title":"IO integration with kotlinx.coroutines","description":"This article showcases the brand new Arrow integration module for KotlinX Coroutines included in the Arrow 0.10.5 release.","date":"2020-03-02T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.09,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"IO integration with kotlinx.coroutines","image":"https://www.47deg.com/assets/img/blog/featured_images/2020-03-26-io-integration-kotlinx-coroutines.jpg","category":"articles","tags":["fx","articles"],"link":"https://www.47deg.com/blog/arrow-kotlinx-integration/"},"unlisted":false,"prevItem":{"title":"Explaining the Arrow Android sample","permalink":"/community/blog/2020/04/01/explaining-arrow-android-sample"},"nextItem":{"title":"FP with Kotlin/Arrow: Monad Comprehensions & Parallel Processing","permalink":"/community/blog/2020/02/26/fp-with-kotlin-arrow"}},"content":"This article showcases the brand new Arrow integration module for KotlinX Coroutines included in the Arrow 0.10.5 release."},{"id":"/2020/02/26/fp-with-kotlin-arrow","metadata":{"permalink":"/community/blog/2020/02/26/fp-with-kotlin-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-02-26-fp-with-kotlin-arrow.md","source":"@site/content/blog/2020-02-26-fp-with-kotlin-arrow.md","title":"FP with Kotlin/Arrow: Monad Comprehensions & Parallel Processing","description":"Arrow has multiple libraries available for functional programming. In this talk we\'ll focus on Arrow FX and learn how to handle IO in a functional way with an introduction to monadic composition. Then we\'ll examine how to compose monads in a cleaner fashion with Arrow FX\'s monad comprehensions. Finally, we\'ll take a look at how to parallelize IO monads with parallel map strategies.","date":"2020-02-26T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.315,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"FP with Kotlin/Arrow: Monad Comprehensions & Parallel Processing","image":"https://img.youtube.com/vi/nAtzuIRryuE/maxresdefault.jpg","category":"videos","tags":["fx","videos"],"link":"https://youtu.be/nAtzuIRryuE"},"unlisted":false,"prevItem":{"title":"IO integration with kotlinx.coroutines","permalink":"/community/blog/2020/03/02/io-integration-kotlinx-coroutines"},"nextItem":{"title":"What could possibly go wrong? - A safer programming with Arrow","permalink":"/community/blog/2020/02/26/safer-programming-with-arrow"}},"content":"Arrow has multiple libraries available for functional programming. In this talk we\'ll focus on Arrow FX and learn how to handle IO in a functional way with an introduction to monadic composition. Then we\'ll examine how to compose monads in a cleaner fashion with Arrow FX\'s monad comprehensions. Finally, we\'ll take a look at how to parallelize IO monads with parallel map strategies."},{"id":"/2020/02/26/safer-programming-with-arrow","metadata":{"permalink":"/community/blog/2020/02/26/safer-programming-with-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-02-26-safer-programming-with-arrow.md","source":"@site/content/blog/2020-02-26-safer-programming-with-arrow.md","title":"What could possibly go wrong? - A safer programming with Arrow","description":"Your Kotlin app grabs data from an API, transforms it and saves the processed data in a database. However, there are so many things that could go wrong at runtime treat your impure functions as computations with context, pass them around just like other values, and make the necessary unsafe invocation from a single point of your app, your main function.","date":"2020-02-26T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.785,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"What could possibly go wrong? - A safer programming with Arrow","image":"https://img.youtube.com/vi/C9SmleSSeGk/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://youtu.be/C9SmleSSeGk"},"unlisted":false,"prevItem":{"title":"FP with Kotlin/Arrow: Monad Comprehensions & Parallel Processing","permalink":"/community/blog/2020/02/26/fp-with-kotlin-arrow"},"nextItem":{"title":"Kotlin Functional Programming: Cleaner Composition with Monad Comprehensions in Arrow Fx","permalink":"/community/blog/2020/01/29/cleaner-composition-with-monad-comprehensions-arrow-fx"}},"content":"Your Kotlin app grabs data from an API, transforms it and saves the processed data in a database. However, there are so many things that could go wrong at runtime: the API might be inaccessible, the data is not what you expected or the data can\'t be persisted in the database. You can start adding try catch blocks to your function in your objects, but there is a better way to do it: treat your impure functions as computations with context, pass them around just like other values, and make the necessary unsafe invocation from a single point of your app, your main function.\\n\\nThis talk will walk you through the core functional concepts of Arrow, you will learn how Some, Either and even IO are functor, applicative and monad. You can use the code example from this talk as a starting point for your Arrow-learning, to write safer, simpler and more elegant functional code in Kotlin."},{"id":"/2020/01/29/cleaner-composition-with-monad-comprehensions-arrow-fx","metadata":{"permalink":"/community/blog/2020/01/29/cleaner-composition-with-monad-comprehensions-arrow-fx","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-01-29-cleaner-composition-with-monad-comprehensions-arrow-fx.md","source":"@site/content/blog/2020-01-29-cleaner-composition-with-monad-comprehensions-arrow-fx.md","title":"Kotlin Functional Programming: Cleaner Composition with Monad Comprehensions in Arrow Fx","description":"Learn how to write cleaner monadic composition in Kotlin with Arrow\u2019s monad comprehensions, available in Arrow FX.","date":"2020-01-29T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.085,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Kotlin Functional Programming: Cleaner Composition with Monad Comprehensions in Arrow Fx","image":"https://raw.githubusercontent.com/arrow-kt/arrow-site/master/docs/img/fx/arrow-fx-brand-sidebar.svg?sanitize=true","category":"articles","tags":["fx","articles"],"link":"https://lambda.show/blog/arrow-io-monad-comprehensions-cleaner-monadic-composition"},"unlisted":false,"prevItem":{"title":"What could possibly go wrong? - A safer programming with Arrow","permalink":"/community/blog/2020/02/26/safer-programming-with-arrow"},"nextItem":{"title":"Kotlin Functional Programming: Monads & Composition with Arrow Fx","permalink":"/community/blog/2020/01/29/monads-and-composition-with-arrow-fx"}},"content":"Learn how to write cleaner monadic composition in Kotlin with Arrow\u2019s monad comprehensions, available in Arrow FX."},{"id":"/2020/01/29/monads-and-composition-with-arrow-fx","metadata":{"permalink":"/community/blog/2020/01/29/monads-and-composition-with-arrow-fx","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-01-29-monads-and-composition-with-arrow-fx.md","source":"@site/content/blog/2020-01-29-monads-and-composition-with-arrow-fx.md","title":"Kotlin Functional Programming: Monads & Composition with Arrow Fx","description":"Arrow is a library created by folks over at a company called  47 degrees . In a nutshell, Arrow brings a slew of functional programming features to Kotlin. It is heavily inspired by Scala and Haskell, and emphasizes a lot of the concepts that those languages started","date":"2020-01-29T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.235,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Kotlin Functional Programming: Monads & Composition with Arrow Fx","image":"https://raw.githubusercontent.com/arrow-kt/arrow-site/master/docs/img/fx/arrow-fx-brand-sidebar.svg?sanitize=true","category":"articles","tags":["fx","articles"],"link":"https://lambda.show/blog/arrow-io-monad"},"unlisted":false,"prevItem":{"title":"Kotlin Functional Programming: Cleaner Composition with Monad Comprehensions in Arrow Fx","permalink":"/community/blog/2020/01/29/cleaner-composition-with-monad-comprehensions-arrow-fx"},"nextItem":{"title":"Kotlin Functional Programming: Parallel Processing The Functional Way with Arrow Fx","permalink":"/community/blog/2020/01/29/parallel-processing-the-functional-way-with-arrow-fx"}},"content":"Arrow is a library created by folks over at a company called  47 degrees . In a nutshell, Arrow brings a slew of functional programming features to Kotlin. It is heavily inspired by Scala and Haskell, and emphasizes a lot of the concepts that those languages started"},{"id":"/2020/01/29/parallel-processing-the-functional-way-with-arrow-fx","metadata":{"permalink":"/community/blog/2020/01/29/parallel-processing-the-functional-way-with-arrow-fx","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-01-29-parallel-processing-the-functional-way-with-arrow-fx.md","source":"@site/content/blog/2020-01-29-parallel-processing-the-functional-way-with-arrow-fx.md","title":"Kotlin Functional Programming: Parallel Processing The Functional Way with Arrow Fx","description":"Learn how to handle parallel processing in Kotlin with Arrow IO monads.","date":"2020-01-29T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Kotlin Functional Programming: Parallel Processing The Functional Way with Arrow Fx","image":"https://raw.githubusercontent.com/arrow-kt/arrow-site/master/docs/img/fx/arrow-fx-brand-sidebar.svg?sanitize=true","category":"articles","tags":["fx","articles"],"link":"https://lambda.show/blog/arrow-io-parallel"},"unlisted":false,"prevItem":{"title":"Kotlin Functional Programming: Monads & Composition with Arrow Fx","permalink":"/community/blog/2020/01/29/monads-and-composition-with-arrow-fx"},"nextItem":{"title":"Arrow Comonad Approach for GameOfLife with Android Compose","permalink":"/community/blog/2020/01/14/Arrow-Comonad-Android-Compose-gameOfLife"}},"content":"Learn how to handle parallel processing in Kotlin with Arrow IO monads."},{"id":"/2020/01/14/Arrow-Comonad-Android-Compose-gameOfLife","metadata":{"permalink":"/community/blog/2020/01/14/Arrow-Comonad-Android-Compose-gameOfLife","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-01-14-Arrow-Comonad-Android-Compose-gameOfLife.md","source":"@site/content/blog/2020-01-14-Arrow-Comonad-Android-Compose-gameOfLife.md","title":"Arrow Comonad Approach for GameOfLife with Android Compose","description":"The purpose of this article is complement the bow + SwifUi solution for the game of live we can find here https://www.47deg.com/blog/conway-swift/ with the arrow + compose version.","date":"2020-01-14T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.14,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow Comonad Approach for GameOfLife with Android Compose","image":"https://user-images.githubusercontent.com/39838885/72436632-a95c6380-377f-11ea-8a31-fe0c05d49946.gif","category":"articles","tags":["fx","articles"],"link":"https://github.com/matiaslev/ArrowComposeLifeGame/tree/master"},"unlisted":false,"prevItem":{"title":"Kotlin Functional Programming: Parallel Processing The Functional Way with Arrow Fx","permalink":"/community/blog/2020/01/29/parallel-processing-the-functional-way-with-arrow-fx"},"nextItem":{"title":"Kotlin coroutines with arrow-fx","permalink":"/community/blog/2019/12/15/Kotlin-coroutines-with-arrow-fx"}},"content":"The purpose of this article is complement the bow + SwifUi solution for the game of live we can find here https://www.47deg.com/blog/conway-swift/ with the arrow + compose version."},{"id":"/2019/12/15/Kotlin-coroutines-with-arrow-fx","metadata":{"permalink":"/community/blog/2019/12/15/Kotlin-coroutines-with-arrow-fx","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-12-15-Kotlin-coroutines-with-arrow-fx.md","source":"@site/content/blog/2019-12-15-Kotlin-coroutines-with-arrow-fx.md","title":"Kotlin coroutines with arrow-fx","description":"The purpose of this article is to summarize the approaches from questions at Slack about the usage of Either, Option and other datatypes and to give a tour of arrow-fx usage and APIs.","date":"2019-12-15T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.165,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Kotlin coroutines with arrow-fx","image":"https://www.pacoworks.com/content/images/2016/05/banner_v2.png","category":"articles","tags":["fx","articles"],"link":"https://www.pacoworks.com/2019/12/15/kotlin-coroutines-with-arrow-fx/"},"unlisted":false,"prevItem":{"title":"Arrow Comonad Approach for GameOfLife with Android Compose","permalink":"/community/blog/2020/01/14/Arrow-Comonad-Android-Compose-gameOfLife"},"nextItem":{"title":"Conway\'s Game of Life using Kotlin and Arrow","permalink":"/community/blog/2019/12/12/GOL-using-Kotlin-and-Arrow"}},"content":"The purpose of this article is to summarize the approaches from questions at Slack about the usage of Either, Option and other datatypes and to give a tour of arrow-fx usage and APIs."},{"id":"/2019/12/12/GOL-using-Kotlin-and-Arrow","metadata":{"permalink":"/community/blog/2019/12/12/GOL-using-Kotlin-and-Arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-12-12-GOL-using-Kotlin-and-Arrow.md","source":"@site/content/blog/2019-12-12-GOL-using-Kotlin-and-Arrow.md","title":"Conway\'s Game of Life using Kotlin and Arrow","description":"An article of a series on Functional Programming solutions for the Global Day of Coderetreat challenge. In this case, it shows an approach for it using Kotlin and Functional Programming provided by the Arrow library.","date":"2019-12-12T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Conway\'s Game of Life using Kotlin and Arrow","image":"https://www.47deg.com/assets/img/blog/featured_images/2019-12-12-game-of-life-kotlin.jpg","category":"articles","tags":["core","fx","articles"],"link":"https://www.47deg.com/blog/conway-kotlin/"},"unlisted":false,"prevItem":{"title":"Kotlin coroutines with arrow-fx","permalink":"/community/blog/2019/12/15/Kotlin-coroutines-with-arrow-fx"},"nextItem":{"title":"Keep insisting - Arrow Meta","permalink":"/community/blog/2019/12/06/kotlinconf-arrow-meta"}},"content":"An article of a series on Functional Programming solutions for the Global Day of Coderetreat challenge. In this case, it shows an approach for it using Kotlin and Functional Programming provided by the Arrow library."},{"id":"/2019/12/06/kotlinconf-arrow-meta","metadata":{"permalink":"/community/blog/2019/12/06/kotlinconf-arrow-meta","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-12-06-kotlinconf-arrow-meta.md","source":"@site/content/blog/2019-12-06-kotlinconf-arrow-meta.md","title":"Keep insisting - Arrow Meta","description":"Arrow Meta is a library that empowers library and application authors with the ability to write plugins for the Kotlin compiler. Compiler plugins have access to all compiler phases and can intercept and modify the AST, descriptors, and IR intermediate lang for bytecode generation.","date":"2019-12-06T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.22,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Keep insisting - Arrow Meta","image":"https://img.youtube.com/vi/n9smQNxUyBI/maxresdefault.jpg","category":"videos","tags":["meta","videos"],"link":"https://youtu.be/n9smQNxUyBI","event":"KotlinConf, Copenhagen"},"unlisted":false,"prevItem":{"title":"Conway\'s Game of Life using Kotlin and Arrow","permalink":"/community/blog/2019/12/12/GOL-using-Kotlin-and-Arrow"},"nextItem":{"title":"Arrow Fx & Arrow Meta - Functional Programming for the masses","permalink":"/community/blog/2019/11/27/functional-jvm-arrow-fx-meta"}},"content":"Arrow Meta is a library that empowers library and application authors with the ability to write plugins for the Kotlin compiler. Compiler plugins have access to all compiler phases and can intercept and modify the AST, descriptors, and IR intermediate lang for bytecode generation."},{"id":"/2019/11/27/functional-jvm-arrow-fx-meta","metadata":{"permalink":"/community/blog/2019/11/27/functional-jvm-arrow-fx-meta","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-11-27-functional-jvm-arrow-fx-meta.md","source":"@site/content/blog/2019-11-27-functional-jvm-arrow-fx-meta.md","title":"Arrow Fx & Arrow Meta - Functional Programming for the masses","description":"In this meetup we discuss the new features of Arrow Fx to write \u201ceffectful\u201d programs with an emphasis on simple and declarative programming for everyone.","date":"2019-11-27T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.235,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow Fx & Arrow Meta - Functional Programming for the masses","image":"https://img.youtube.com/vi/DaognWtZCbs/maxresdefault.jpg","category":"videos","tags":["meta","fx","videos"],"link":"https://www.youtube.com/watch?v=DaognWtZCbs","event":"Functional JVM Meetup, Prague"},"unlisted":false,"prevItem":{"title":"Keep insisting - Arrow Meta","permalink":"/community/blog/2019/12/06/kotlinconf-arrow-meta"},"nextItem":{"title":"Arrow Meta - Enabling Functional Programming in the Kotlin Compiler","permalink":"/community/blog/2019/10/18/lambda-world-arrow-meta"}},"content":"In this meetup we discuss the new features of Arrow Fx to write \u201ceffectful\u201d programs with an emphasis on simple and declarative programming for everyone.\\nAdditionally, we see how Arrow Meta works and how we can use it to improve the ergonomics of Functional Programming in Kotlin."},{"id":"/2019/10/18/lambda-world-arrow-meta","metadata":{"permalink":"/community/blog/2019/10/18/lambda-world-arrow-meta","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-10-18-lambda-world-arrow-meta.md","source":"@site/content/blog/2019-10-18-lambda-world-arrow-meta.md","title":"Arrow Meta - Enabling Functional Programming in the Kotlin Compiler","description":"Arrow Meta is a library that empowers library and application authors with the ability to write plugins for the Kotlin compiler. Compiler plugins have access to all compiler phases and can intercept and modify the AST, descriptors, and IR intermediate lang for bytecode generation.","date":"2019-10-18T00:00:00.000Z","tags":[{"label":"meta","permalink":"/community/blog/tags/meta"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.22,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow Meta - Enabling Functional Programming in the Kotlin Compiler","image":"https://img.youtube.com/vi/WKR384ZeBgk/maxresdefault.jpg","category":"videos","tags":["meta","videos"],"link":"https://www.youtube.com/watch?v=WKR384ZeBgk","event":"Lambda World, C\xe1diz, Spain"},"unlisted":false,"prevItem":{"title":"Arrow Fx & Arrow Meta - Functional Programming for the masses","permalink":"/community/blog/2019/11/27/functional-jvm-arrow-fx-meta"},"nextItem":{"title":"Kotlin and Arrow: the functional way","permalink":"/community/blog/2019/08/08/kotlin-and-arrow-the-functional-way"}},"content":"Arrow Meta is a library that empowers library and application authors with the ability to write plugins for the Kotlin compiler. Compiler plugins have access to all compiler phases and can intercept and modify the AST, descriptors, and IR intermediate lang for bytecode generation."},{"id":"/2019/08/08/kotlin-and-arrow-the-functional-way","metadata":{"permalink":"/community/blog/2019/08/08/kotlin-and-arrow-the-functional-way","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-08-08-kotlin-and-arrow-the-functional-way.md","source":"@site/content/blog/2019-08-08-kotlin-and-arrow-the-functional-way.md","title":"Kotlin and Arrow: the functional way","description":"Kotlin is a great language for developing server-side applications; it\'s an object-oriented language and also a functional one, supporting features such as function types, lambdas or higher order functions. But...is this enough to switch completely from an imperative paradigm to a functional paradigm?","date":"2019-08-08T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.33,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Kotlin and Arrow: the functional way","image":"https://pbs.twimg.com/media/D8xN-4jWkAAceCW.jpg","category":"videos","tags":["core","videos"],"link":"https://thoughtworks.wistia.com/medias/ifra1gzrho","event":"xConf, Barcelona, Spain"},"unlisted":false,"prevItem":{"title":"Arrow Meta - Enabling Functional Programming in the Kotlin Compiler","permalink":"/community/blog/2019/10/18/lambda-world-arrow-meta"},"nextItem":{"title":"Effect polymorphism with Arrow FX","permalink":"/community/blog/2019/07/22/polymorphic-fx"}},"content":"Kotlin is a great language for developing server-side applications; it\'s an object-oriented language and also a functional one, supporting features such as function types, lambdas or higher order functions. But...is this enough to switch completely from an imperative paradigm to a functional paradigm?\\n\\nIn this talk by Noe Luaces, we\'ll see how features from Arrow library completes Kotlin in order to follow a pure functional way."},{"id":"/2019/07/22/polymorphic-fx","metadata":{"permalink":"/community/blog/2019/07/22/polymorphic-fx","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-07-22-polymorphic-fx.md","source":"@site/content/blog/2019-07-22-polymorphic-fx.md","title":"Effect polymorphism with Arrow FX","description":"Wonder how to handle side effects in a very clean way while abstracting the real effect implementation? #Arrow #FX provides an easy way to do this, without the burden of Higher-Kinded Types.","date":"2019-07-22T00:00:00.000Z","tags":[{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.16,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Effect polymorphism with Arrow FX","image":"https://blog.frankel.ch/assets/resources/imperative-functional-programming/arrow-brand.svg","category":"articles","tags":["fx","articles"],"link":"https://www.msec.it/blog/effect-polymorphism-with-arrow-fx/"},"unlisted":false,"prevItem":{"title":"Kotlin and Arrow: the functional way","permalink":"/community/blog/2019/08/08/kotlin-and-arrow-the-functional-way"},"nextItem":{"title":"Self-contained example of testing with modules and Arrow FX","permalink":"/community/blog/2019/07/05/testing-with-modules"}},"content":"Wonder how to handle side effects in a very clean way while abstracting the real effect implementation? #Arrow #FX provides an easy way to do this, without the burden of Higher-Kinded Types."},{"id":"/2019/07/05/testing-with-modules","metadata":{"permalink":"/community/blog/2019/07/05/testing-with-modules","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-07-05-testing-with-modules.md","source":"@site/content/blog/2019-07-05-testing-with-modules.md","title":"Self-contained example of testing with modules and Arrow FX","description":"This post shows a porting with Kotlin and Arrow FX of a self-contained testing example with Scala ZIO","date":"2019-07-05T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.09,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Self-contained example of testing with modules and Arrow FX","image":"https://blog.frankel.ch/assets/resources/imperative-functional-programming/arrow-brand.svg","category":"articles","tags":["core","fx","articles"],"link":"https://www.msec.it/blog/self-contained-example-of-testing-with-modules-and-arrow-fx/"},"unlisted":false,"prevItem":{"title":"Effect polymorphism with Arrow FX","permalink":"/community/blog/2019/07/22/polymorphic-fx"},"nextItem":{"title":"Modular functional programming with Kotlin","permalink":"/community/blog/2019/07/02/modular-app-kotlin"}},"content":"This post shows a porting with Kotlin and Arrow FX of a self-contained testing example with Scala ZIO"},{"id":"/2019/07/02/modular-app-kotlin","metadata":{"permalink":"/community/blog/2019/07/02/modular-app-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-07-02-modular-app-kotlin.md","source":"@site/content/blog/2019-07-02-modular-app-kotlin.md","title":"Modular functional programming with Kotlin","description":"This post proposes a possible solution in order to structure and compose a pure functional Kotlin application, in order to better manage and decouple modules, get simpler tests and manage the Dependency Injection at compile time.","date":"2019-07-02T00:00:00.000Z","tags":[],"readingTime":0.18,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Modular functional programming with Kotlin","image":"https://blog.frankel.ch/assets/resources/imperative-functional-programming/arrow-brand.svg","category":"articles","tag":["core","articles"],"link":"https://www.msec.it/blog/modular-functional-programming-composition-with-kotlin/"},"unlisted":false,"prevItem":{"title":"Self-contained example of testing with modules and Arrow FX","permalink":"/community/blog/2019/07/05/testing-with-modules"},"nextItem":{"title":"ArrowFx: Functional Programming for the masses","permalink":"/community/blog/2019/06/07/kotliners-arrow-fx"}},"content":"This post proposes a possible solution in order to structure and compose a pure functional Kotlin application, in order to better manage and decouple modules, get simpler tests and manage the Dependency Injection at compile time."},{"id":"/2019/06/07/kotliners-arrow-fx","metadata":{"permalink":"/community/blog/2019/06/07/kotliners-arrow-fx","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-06-07-kotliners-arrow-fx.md","source":"@site/content/blog/2019-06-07-kotliners-arrow-fx.md","title":"ArrowFx: Functional Programming for the masses","description":"In this talk we recap about the imminent future of Functional Programming in Kotlin. With ArrowFx you are able to encode \u201ceffectful\u201d programs in a controlled way following the FP principles through a direct syntax. You\u2019ll think you\u2019re writing imperative code!","date":"2019-06-07T00:00:00.000Z","tags":[],"readingTime":0.205,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"ArrowFx: Functional Programming for the masses","image":"https://img.youtube.com/vi/uyqqoooKpmI/maxresdefault.jpg","category":"videos","tag":["fx","videos"],"link":"https://www.youtube.com/watch?v=uyqqoooKpmI","event":"Kotliners, Budapest"},"unlisted":false,"prevItem":{"title":"Modular functional programming with Kotlin","permalink":"/community/blog/2019/07/02/modular-app-kotlin"},"nextItem":{"title":"How KEEP-87 & Typeclasses will change the way we write Kotlin","permalink":"/community/blog/2019/06/04/keep-87-and-typeclasses"}},"content":"In this talk we recap about the imminent future of Functional Programming in Kotlin. With ArrowFx you are able to encode \u201ceffectful\u201d programs in a controlled way following the FP principles through a direct syntax. You\u2019ll think you\u2019re writing imperative code!"},{"id":"/2019/06/04/keep-87-and-typeclasses","metadata":{"permalink":"/community/blog/2019/06/04/keep-87-and-typeclasses","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-06-04-keep-87-and-typeclasses.md","source":"@site/content/blog/2019-06-04-keep-87-and-typeclasses.md","title":"How KEEP-87 & Typeclasses will change the way we write Kotlin","description":"Short introduction into the proposal KEEP-87 and how it would be able to improve the language.","date":"2019-06-04T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.08,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"How KEEP-87 & Typeclasses will change the way we write Kotlin","image":"https://quickbirdstudios.com/blog/wp-content/uploads/2019/05/xFirebird.jpg.pagespeed.ic.e0DeqxTqSE.webp","category":"articles","tags":["core","articles"],"link":"https://quickbirdstudios.com/blog/keep-87-typeclasses-kotlin/"},"unlisted":false,"prevItem":{"title":"ArrowFx: Functional Programming for the masses","permalink":"/community/blog/2019/06/07/kotliners-arrow-fx"},"nextItem":{"title":"Introducing Arrow Playground","permalink":"/community/blog/2019/04/11/introducing-arrow-playground"}},"content":"Short introduction into the proposal [KEEP-87](https://github.com/Kotlin/KEEP/pull/87) and how it would be able to improve the language."},{"id":"/2019/04/11/introducing-arrow-playground","metadata":{"permalink":"/community/blog/2019/04/11/introducing-arrow-playground","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-04-11-introducing-arrow-playground.md","source":"@site/content/blog/2019-04-11-introducing-arrow-playground.md","title":"Introducing Arrow Playground","description":"Arrow Playground is a JavaScript library that creates Kotlin-aware, including Arrow, editors capable of running code from HTML block elements. This is a fork of the original Kotlin Playground work done by the JetBrains team.","date":"2019-04-11T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Introducing Arrow Playground","image":"https://www.47deg.com/assets/img/blog/featured_images/2019-04-11-introducing-arrow-playground.png","category":"articles","tags":["core","articles"],"link":"https://www.47deg.com/blog/arrow-playground/"},"unlisted":false,"prevItem":{"title":"How KEEP-87 & Typeclasses will change the way we write Kotlin","permalink":"/community/blog/2019/06/04/keep-87-and-typeclasses"},"nextItem":{"title":"Immutable Conversations - Past and Future of Arrow","permalink":"/community/blog/2019/03/12/immutable-conv-1"}},"content":"Arrow Playground is a JavaScript library that creates Kotlin-aware, including Arrow, editors capable of running code from HTML block elements. This is a fork of the original Kotlin Playground work done by the JetBrains team."},{"id":"/2019/03/12/immutable-conv-1","metadata":{"permalink":"/community/blog/2019/03/12/immutable-conv-1","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-03-12-immutable-conv-1.md","source":"@site/content/blog/2019-03-12-immutable-conv-1.md","title":"Immutable Conversations - Past and Future of Arrow","description":"In this episode, we capture a conversation between Arrow maintainers Ra\xfal Raja and Paco Estevez as they discuss the past and future of the library which is designed to bring Functional Programming to Kotlin.","date":"2019-03-12T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Immutable Conversations - Past and Future of Arrow","image":"https://img.youtube.com/vi/YtchNDjQuTU/maxresdefault.jpg","category":"videos","tags":["core","fx","videos"],"link":"https://www.youtube.com/watch?v=YtchNDjQuTU"},"unlisted":false,"prevItem":{"title":"Introducing Arrow Playground","permalink":"/community/blog/2019/04/11/introducing-arrow-playground"},"nextItem":{"title":"From Imperative to Functional Programming using Arrow","permalink":"/community/blog/2019/02/10/imperative-functional-programming-arrow"}},"content":"In this episode, we capture a conversation between Arrow maintainers Ra\xfal Raja and Paco Estevez as they discuss the past and future of the library which is designed to bring Functional Programming to Kotlin."},{"id":"/2019/02/10/imperative-functional-programming-arrow","metadata":{"permalink":"/community/blog/2019/02/10/imperative-functional-programming-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-02-10-imperative-functional-programming-arrow.md","source":"@site/content/blog/2019-02-10-imperative-functional-programming-arrow.md","title":"From Imperative to Functional Programming using Arrow","description":"As its name implies, From Imperative to Functional Programming using Arrow is a tale about migrating a simple Kotlin application written in imperative style to a fully function application with the help of the Arrow library.","date":"2019-02-10T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"tutorials","permalink":"/community/blog/tags/tutorials"}],"readingTime":0.18,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"From Imperative to Functional Programming using Arrow","image":"https://blog.frankel.ch/assets/resources/imperative-functional-programming/arrow-brand.svg","category":"tutorials","tags":["core","fx","tutorials"],"link":"https://blog.frankel.ch/imperative-functional-programming/1/"},"unlisted":false,"prevItem":{"title":"Immutable Conversations - Past and Future of Arrow","permalink":"/community/blog/2019/03/12/immutable-conv-1"},"nextItem":{"title":"Webflux with Kotlin and Arrow","permalink":"/community/blog/2019/02/03/arrow-webflux"}},"content":"As its name implies, [From Imperative to Functional Programming using Arrow](https://blog.frankel.ch/imperative-functional-programming/1/) is a tale about migrating a simple Kotlin application written in imperative style to a fully function application with the help of the Arrow library."},{"id":"/2019/02/03/arrow-webflux","metadata":{"permalink":"/community/blog/2019/02/03/arrow-webflux","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-02-03-arrow-webflux.md","source":"@site/content/blog/2019-02-03-arrow-webflux.md","title":"Webflux with Kotlin and Arrow","description":"Webflux with Kotlin and Arrow shows how you can use Arrow together with Spring Webflux to create a reactive REST application. This article explains how to use the MonoK and the FluxK Arrow extensions together with the binding function to make working with the Mono and Flux reactor constructs much easier and better understandable.","date":"2019-02-03T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Webflux with Kotlin and Arrow","image":"/img/blog-image-header.png","category":"articles","tags":["core","fx","articles"],"link":"http://www.smartjava.org/content/webflux-arrow/"},"unlisted":false,"prevItem":{"title":"From Imperative to Functional Programming using Arrow","permalink":"/community/blog/2019/02/10/imperative-functional-programming-arrow"},"nextItem":{"title":"Getting started with FP in Kotlin and Arrow: Typeclasses","permalink":"/community/blog/2019/01/03/getting-started"}},"content":"[Webflux with Kotlin and Arrow](http://www.smartjava.org/content/webflux-arrow/) shows how you can use Arrow together with Spring Webflux to create a reactive REST application. This article explains how to use the `MonoK` and the `FluxK` Arrow extensions together with the `binding` function to make working with the `Mono` and `Flux` reactor constructs much easier and better understandable."},{"id":"/2019/01/03/getting-started","metadata":{"permalink":"/community/blog/2019/01/03/getting-started","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-01-03-getting-started.md","source":"@site/content/blog/2019-01-03-getting-started.md","title":"Getting started with FP in Kotlin and Arrow: Typeclasses","description":"Getting started with FP in Kotlin and Arrow: Typeclasses explores part of the Arrow library by explaining how you can use Arrow to create your own typeclasses and use the ones provided by Arrow to make your code more concise and better readable.","date":"2019-01-03T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.215,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Getting started with FP in Kotlin and Arrow: Typeclasses","image":"/img/blog-image-header.png","category":"articles","tags":["core","fx","articles"],"link":"http://www.smartjava.org/content/kotlin-arrow-typeclasses/"},"unlisted":false,"prevItem":{"title":"Webflux with Kotlin and Arrow","permalink":"/community/blog/2019/02/03/arrow-webflux"},"nextItem":{"title":"Functional Hangman Game written with Arrow","permalink":"/community/blog/2018/11/30/hangman"}},"content":"[Getting started with FP in Kotlin and Arrow: Typeclasses](http://www.smartjava.org/content/kotlin-arrow-typeclasses/) explores part of the Arrow library by explaining how you can use Arrow to create your own typeclasses and use the ones provided by Arrow to make your code more concise and better readable."},{"id":"/2018/11/30/hangman","metadata":{"permalink":"/community/blog/2018/11/30/hangman","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-11-30-hangman.md","source":"@site/content/blog/2018-11-30-hangman.md","title":"Functional Hangman Game written with Arrow","description":"Functional Hangman game - console application written with Arrow. Uses the IO monad to push side effects to the edge of the system.","date":"2018-11-30T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.115,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Hangman Game written with Arrow","image":"/img/blog-image-header.png","category":"articles","tags":["core","fx","articles"],"link":"https://lordraydenmk.github.io/2018/functional-hangman-in-kotlin-with-arrow/"},"unlisted":false,"prevItem":{"title":"Getting started with FP in Kotlin and Arrow: Typeclasses","permalink":"/community/blog/2019/01/03/getting-started"},"nextItem":{"title":"Manual documentation is dead. Long live automated documentation! Automated documentation with ANK","permalink":"/community/blog/2018/11/24/ank"}},"content":"[Functional Hangman](https://lordraydenmk.github.io/2018/functional-hangman-in-kotlin-with-arrow/) game - console application written with Arrow. Uses the `IO<A>` monad to push side effects to the edge of the system."},{"id":"/2018/11/24/ank","metadata":{"permalink":"/community/blog/2018/11/24/ank","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-11-24-ank.md","source":"@site/content/blog/2018-11-24-ank.md","title":"Manual documentation is dead. Long live automated documentation! Automated documentation with ANK","description":"It includes how the ANK plugin works: from having a tool that evaluates and verifies your doc snippets at compile time, to generating code documentation that is always correct and up to date.","date":"2018-11-24T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"incubator","permalink":"/community/blog/tags/incubator"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.165,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Manual documentation is dead. Long live automated documentation! Automated documentation with ANK","image":"https://img.youtube.com/vi/kr8iWE4Jfhc/maxresdefault.jpg","category":"videos","tags":["core","incubator","videos"],"link":"https://www.youtube.com/watch?v=kr8iWE4Jfhc","event":"droidconSF, San Francisco"},"unlisted":false,"prevItem":{"title":"Functional Hangman Game written with Arrow","permalink":"/community/blog/2018/11/30/hangman"},"nextItem":{"title":"Simple Dependency Management in Kotlin","permalink":"/community/blog/2018/11/07/simple-management-dependency"}},"content":"It includes how the ANK plugin works: from having a tool that evaluates and verifies your doc snippets at compile time, to generating code documentation that is always correct and up to date."},{"id":"/2018/11/07/simple-management-dependency","metadata":{"permalink":"/community/blog/2018/11/07/simple-management-dependency","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-11-07-simple-management-dependency.md","source":"@site/content/blog/2018-11-07-simple-management-dependency.md","title":"Simple Dependency Management in Kotlin","description":"In this talk we introduce the concepts of Dependency Management as a language feature, typeclasses, and a live demo of KEEP-87. You can follow along the example in this folder.","date":"2018-11-07T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.15,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Simple Dependency Management in Kotlin","image":"https://img.youtube.com/vi/CR5h2Wq1yPE/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=CR5h2Wq1yPE","event":"AndroidTO, Toronto"},"unlisted":false,"prevItem":{"title":"Manual documentation is dead. Long live automated documentation! Automated documentation with ANK","permalink":"/community/blog/2018/11/24/ank"},"nextItem":{"title":"Polyjokes\u200a - \u200aA polymorphic approach using Arrow","permalink":"/community/blog/2018/10/21/polyjokes"}},"content":"In this talk we introduce the concepts of Dependency Management as a language feature, typeclasses, and a live demo of [KEEP-87](https://github.com/Kotlin/KEEP/pull/87). You can follow along the example in [this folder](https://github.com/arrow-kt/arrow/tree/master/modules/docs/arrow-examples/src/test/kotlin/arrow/typeclasses)."},{"id":"/2018/10/21/polyjokes","metadata":{"permalink":"/community/blog/2018/10/21/polyjokes","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-10-21-polyjokes.md","source":"@site/content/blog/2018-10-21-polyjokes.md","title":"Polyjokes\u200a - \u200aA polymorphic approach using Arrow","description":"@dcampogiani is using a polymorphic approach to retrieve a random user and then a joke about him.","date":"2018-10-21T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.11,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Polyjokes\u200a - \u200aA polymorphic approach using Arrow","image":"/img/blog-image-header.png","category":"articles","tags":["core","articles"],"link":"https://github.com/dcampogiani/polyjokes"},"unlisted":false,"prevItem":{"title":"Simple Dependency Management in Kotlin","permalink":"/community/blog/2018/11/07/simple-management-dependency"},"nextItem":{"title":"Architecting Typed FP Applications & Libraries in Kotlin with Arrow","permalink":"/community/blog/2018/10/05/kotlin-conf-fp-in-kotlin-with-arrow"}},"content":"[@dcampogiani](https://github.com/dcampogiani) is using a polymorphic approach to retrieve a random user and then a joke about him.\\n\\n[Polyjokes\u200a\u2014\u200aA polymorphic approach using Arrow](https://github.com/dcampogiani/polyjokes)"},{"id":"/2018/10/05/kotlin-conf-fp-in-kotlin-with-arrow","metadata":{"permalink":"/community/blog/2018/10/05/kotlin-conf-fp-in-kotlin-with-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-10-05-kotlin-conf-fp-in-kotlin-with-arrow.md","source":"@site/content/blog/2018-10-05-kotlin-conf-fp-in-kotlin-with-arrow.md","title":"Architecting Typed FP Applications & Libraries in Kotlin with Arrow","description":"This talk includes a comprehensive walkthrough of the most important patterns covered by the data types and type classes we find in Arrow. Each pattern will be accompanied by code examples that illustrate how Arrow brings Typed Functional Programming to Kotlin.","date":"2018-10-05T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.22,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Architecting Typed FP Applications & Libraries in Kotlin with Arrow","image":"https://img.youtube.com/vi/VOZZTSuDMFE/maxresdefault.jpg","category":"videos","tags":["core","fx","videos"],"link":"https://www.youtube.com/watch?v=VOZZTSuDMFE","event":"KotlinConf, Amsterdam"},"unlisted":false,"prevItem":{"title":"Polyjokes\u200a - \u200aA polymorphic approach using Arrow","permalink":"/community/blog/2018/10/21/polyjokes"},"nextItem":{"title":"Arrow and Functional Programming for Kotlin Developers","permalink":"/community/blog/2018/07/24/arrow-fp-kotlin"}},"content":"This talk includes a comprehensive walkthrough of the most important patterns covered by the data types and type classes we find in Arrow. Each pattern will be accompanied by code examples that illustrate how Arrow brings Typed Functional Programming to Kotlin.\\n\\n[Sources and slides](https://github.com/47deg/arrow-architecture)"},{"id":"/2018/07/24/arrow-fp-kotlin","metadata":{"permalink":"/community/blog/2018/07/24/arrow-fp-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-07-24-arrow-fp-kotlin.md","source":"@site/content/blog/2018-07-24-arrow-fp-kotlin.md","title":"Arrow and Functional Programming for Kotlin Developers","description":"A beginner level introduction to Functional Programming for Kotlin and/or Android Developers or developers with OOP background.","date":"2018-07-24T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.085,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow and Functional Programming for Kotlin Developers","image":"https://img.youtube.com/vi/qYgilPqMOp0/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=qYgilPqMOp0","event":"DroidJam India, Bangalore, India"},"unlisted":false,"prevItem":{"title":"Architecting Typed FP Applications & Libraries in Kotlin with Arrow","permalink":"/community/blog/2018/10/05/kotlin-conf-fp-in-kotlin-with-arrow"},"nextItem":{"title":"Functional Programming in Kotlin with Arrow by Emmanuel Nhan","permalink":"/community/blog/2018/06/27/fp-kotlin-arrow"}},"content":"A beginner level introduction to Functional Programming for Kotlin and/or Android Developers or developers with OOP background."},{"id":"/2018/06/27/fp-kotlin-arrow","metadata":{"permalink":"/community/blog/2018/06/27/fp-kotlin-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-06-27-fp-kotlin-arrow.md","source":"@site/content/blog/2018-06-27-fp-kotlin-arrow.md","title":"Functional Programming in Kotlin with Arrow by Emmanuel Nhan","description":"@nhanmanu introduces Kotlin and how it is a good fit for functional programming. The talk goes through some interesting features of Kotlin, then show how to use them to enter the world of Higher Kinds and Typeclasses. In the last part, we explore some Arrow capabilities & built-in syntax, using validation as an example.","date":"2018-06-27T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"slidedecks","permalink":"/community/blog/tags/slidedecks"}],"readingTime":0.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Programming in Kotlin with Arrow by Emmanuel Nhan","image":"https://image.slidesharecdn.com/fpkotlinsunnytech-180628144002/95/functional-programming-in-kotlin-with-arrow-sunnytech-2018-1-638.jpg","category":"slidedecks","tags":["core","slidedecks"],"link":"https://www.slideshare.net/EmmanuelNhan/functional-programming-in-kotlin-with-arrow-sunnytech-2018","event":"Sunny Tech, Montpellier"},"unlisted":false,"prevItem":{"title":"Arrow and Functional Programming for Kotlin Developers","permalink":"/community/blog/2018/07/24/arrow-fp-kotlin"},"nextItem":{"title":"Arrow 101\u200a - \u200aBuilding an Android app using Functional Programming","permalink":"/community/blog/2018/06/24/arrow-101"}},"content":"[@nhanmanu](https://twitter.com/nhanmanu) introduces Kotlin and how it is a good fit for functional programming. The talk goes through some interesting features of Kotlin, then show how to use them to enter the world of Higher Kinds and Typeclasses. In the last part, we explore some Arrow capabilities & built-in syntax, using validation as an example."},{"id":"/2018/06/24/arrow-101","metadata":{"permalink":"/community/blog/2018/06/24/arrow-101","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-06-24-arrow-101.md","source":"@site/content/blog/2018-06-24-arrow-101.md","title":"Arrow 101\u200a - \u200aBuilding an Android app using Functional Programming","description":"Leandro Ferreira presents how to build a simple app using Arrow and how to implement solutions with Semigroups.","date":"2018-06-24T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Arrow 101\u200a - \u200aBuilding an Android app using Functional Programming","image":"https://cdn-images-1.medium.com/max/2000/1*7HJJpOQE8M1-xXW0_5eePQ.png","category":"articles","tags":["core","articles"],"link":"https://medium.com/@lehen01/arrow-101-building-an-android-app-using-functional-programming-fe959675d96d"},"unlisted":false,"prevItem":{"title":"Functional Programming in Kotlin with Arrow by Emmanuel Nhan","permalink":"/community/blog/2018/06/27/fp-kotlin-arrow"},"nextItem":{"title":"State of the functional ecosystem in Kotlin: Mid 2018 checkup","permalink":"/community/blog/2018/06/24/state-ecosystem"}},"content":"[Leandro Ferreira](https://twitter.com/mLeandroBF) presents how to build a simple app using Arrow and how to implement solutions with Semigroups.\\n\\n[Arrow 101\u200a\u2014\u200aBuilding an Android app using Functional Programming](https://medium.com/@lehen01/arrow-101-building-an-android-app-using-functional-programming-fe959675d96d)\\n\\n[Arrow 101\u200a\u2014\u200aModelling a real world problem with Semigroups](https://medium.com/@lehen01/arrow-101-modelling-a-real-world-problem-with-semigroups-d8f22cdf54c)"},{"id":"/2018/06/24/state-ecosystem","metadata":{"permalink":"/community/blog/2018/06/24/state-ecosystem","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-06-24-state-ecosystem.md","source":"@site/content/blog/2018-06-24-state-ecosystem.md","title":"State of the functional ecosystem in Kotlin: Mid 2018 checkup","description":"This talk focuses on the day-to-day problems Arrow solves, from small ideas to big concepts.","date":"2018-06-24T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"optics","permalink":"/community/blog/tags/optics"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"incubator","permalink":"/community/blog/tags/incubator"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"State of the functional ecosystem in Kotlin: Mid 2018 checkup","image":"https://img.youtube.com/vi/q_1xPYQLyaU/maxresdefault.jpg","category":"videos","tags":["core","optics","fx","incubator","videos"],"link":"https://www.youtube.com/watch?v=q_1xPYQLyaU","event":"Conference for Kotliners, Budapest"},"unlisted":false,"prevItem":{"title":"Arrow 101\u200a - \u200aBuilding an Android app using Functional Programming","permalink":"/community/blog/2018/06/24/arrow-101"},"nextItem":{"title":"Higher Kinded Types in a Lower Kinded Language by Jacob Bass","permalink":"/community/blog/2018/06/22/hk-types"}},"content":"This talk focuses on the day-to-day problems Arrow solves, from small ideas to big concepts.\\n\\nIt includes an overview of all the modules available, and some of the 3rd party libraries made by the community."},{"id":"/2018/06/22/hk-types","metadata":{"permalink":"/community/blog/2018/06/22/hk-types","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-06-22-hk-types.md","source":"@site/content/blog/2018-06-22-hk-types.md","title":"Higher Kinded Types in a Lower Kinded Language by Jacob Bass","description":"It\'s hard coming back down to the earth of a JVM based language after spending time with Haskell and OCaml. This talk will discuss functional programming in Kotlin with the Arrow library, how the abstractions it provides can improve your code, and how this magic that provides higher-kinded types works under the hood.","date":"2018-06-22T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.265,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Higher Kinded Types in a Lower Kinded Language by Jacob Bass","image":"https://img.youtube.com/vi/ERM0mBPNLHc/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=ERM0mBPNLHc","event":"Yow! Lambda Jam, Sydney, Australia"},"unlisted":false,"prevItem":{"title":"State of the functional ecosystem in Kotlin: Mid 2018 checkup","permalink":"/community/blog/2018/06/24/state-ecosystem"},"nextItem":{"title":"1/n - How do I\u2026 in FP: Validation","permalink":"/community/blog/2018/04/23/how-do-i"}},"content":"It\'s hard coming back down to the earth of a JVM based language after spending time with Haskell and OCaml. This talk will discuss functional programming in Kotlin with the Arrow library, how the abstractions it provides can improve your code, and how this magic that provides higher-kinded types works under the hood."},{"id":"/2018/04/23/how-do-i","metadata":{"permalink":"/community/blog/2018/04/23/how-do-i","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-04-23-how-do-i.md","source":"@site/content/blog/2018-04-23-how-do-i.md","title":"1/n - How do I\u2026 in FP: Validation","description":"Emmanuel Nhan showcases different approaches to validation including examples for ValidatedNel from Arrow in this great and in depth post using Kafka Streams Config parameters as example.","date":"2018-04-23T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"tutorials","permalink":"/community/blog/tags/tutorials"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"1/n - How do I\u2026 in FP: Validation","image":"https://images.unsplash.com/photo-1518169811655-27c3a4327016?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=600&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=383b467064497d356a0b05b3a3d180be","category":"tutorials","tags":["core","tutorials"],"link":"https://www.enhan.eu/how-to-in-fp/"},"unlisted":false,"prevItem":{"title":"Higher Kinded Types in a Lower Kinded Language by Jacob Bass","permalink":"/community/blog/2018/06/22/hk-types"},"nextItem":{"title":"Android Functional Validation","permalink":"/community/blog/2018/04/14/android-functional-validation"}},"content":"[Emmanuel Nhan](https://www.enhan.eu/author/enhan/) showcases different approaches to validation including examples for `ValidatedNel` from Arrow in this great and in depth post using Kafka Streams Config parameters as example.\\n\\n[1/n - How do I\u2026 in FP: Validation](https://www.enhan.eu/how-to-in-fp/)"},{"id":"/2018/04/14/android-functional-validation","metadata":{"permalink":"/community/blog/2018/04/14/android-functional-validation","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-04-14-android-functional-validation.md","source":"@site/content/blog/2018-04-14-android-functional-validation.md","title":"Android Functional Validation","description":"@dcampogiani explores some data types in Arrow and uses them to validate a form on Android.","date":"2018-04-14T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"tutorials","permalink":"/community/blog/tags/tutorials"}],"readingTime":0.135,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Android Functional Validation","image":"https://i.vimeocdn.com/video/713283357_1280x720.jpg","category":"tutorials","tags":["core","tutorials"],"link":"https://player.vimeo.com/video/279931528"},"unlisted":false,"prevItem":{"title":"1/n - How do I\u2026 in FP: Validation","permalink":"/community/blog/2018/04/23/how-do-i"},"nextItem":{"title":"Introduction to Kotlin Arrow by Jacob Bass","permalink":"/community/blog/2018/03/26/kotlin-arrow"}},"content":"[@dcampogiani](https://github.com/dcampogiani) explores some data types in Arrow and uses them to validate a form on Android.\\n\\n[Video (in italian)](https://player.vimeo.com/video/279931528)\\n\\n* [Introduction](http://danielecampogiani.com/blog/2018/02/android-functional-validation-1-intro/)\\n* [Option](http://danielecampogiani.com/blog/2018/02/android-functional-validation-2-option/)\\n* [Either](http://danielecampogiani.com/blog/2018/02/android-functional-validation-3-either/)\\n* [Validated](http://danielecampogiani.com/blog/2018/02/android-functional-validation-4-validated/)"},{"id":"/2018/03/26/kotlin-arrow","metadata":{"permalink":"/community/blog/2018/03/26/kotlin-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-03-26-kotlin-arrow.md","source":"@site/content/blog/2018-03-26-kotlin-arrow.md","title":"Introduction to Kotlin Arrow by Jacob Bass","description":"@bassjacob goes through how Funktionale and Kategory merged into Arrow, consolidating two of the most popular FP libraries in the Kotlin space into one powerhouse. The talk is an introduction to some FP concepts, how the libraries work, what features they bring to the table and where you might use them in your code.","date":"2018-03-26T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Introduction to Kotlin Arrow by Jacob Bass","image":"https://img.youtube.com/vi/tM2wEI-e80E/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=tM2wEI-e80E","event":"Kotlin Meetup, Sydney"},"unlisted":false,"prevItem":{"title":"Android Functional Validation","permalink":"/community/blog/2018/04/14/android-functional-validation"},"nextItem":{"title":"It\'s all about morphisms","permalink":"/community/blog/2018/03/21/morphisms"}},"content":"[@bassjacob](https://github.com/bassjacob) goes through how Funktionale and Kategory merged into Arrow, consolidating two of the most popular FP libraries in the Kotlin space into one powerhouse. The talk is an introduction to some FP concepts, how the libraries work, what features they bring to the table and where you might use them in your code."},{"id":"/2018/03/21/morphisms","metadata":{"permalink":"/community/blog/2018/03/21/morphisms","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-03-21-morphisms.md","source":"@site/content/blog/2018-03-21-morphisms.md","title":"It\'s all about morphisms","description":"@uberto gives a gentle introduction to Category Theory for programmers used to OOP but interested in Functional Programming. No Haskell knowledge required. We will explain main concepts behind functional programming with many diagrams and simple metaphors and examples. Some code will clarify how to translate these ideas in programs.","date":"2018-03-21T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.245,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"It\'s all about morphisms","image":"https://img.youtube.com/vi/Eq8dv4H3RTE/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=Eq8dv4H3RTE","event":"Voxxed Days, Vienna"},"unlisted":false,"prevItem":{"title":"Introduction to Kotlin Arrow by Jacob Bass","permalink":"/community/blog/2018/03/26/kotlin-arrow"},"nextItem":{"title":"Optics and Type Classes in Arrow","permalink":"/community/blog/2018/01/17/optics-type-classes-arrow"}},"content":"[@uberto](https://github.com/uberto) gives a gentle introduction to Category Theory for programmers used to OOP but interested in Functional Programming. No Haskell knowledge required. We will explain main concepts behind functional programming with many diagrams and simple metaphors and examples. Some code will clarify how to translate these ideas in programs."},{"id":"/2018/01/17/optics-type-classes-arrow","metadata":{"permalink":"/community/blog/2018/01/17/optics-type-classes-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-01-17-optics-type-classes-arrow.md","source":"@site/content/blog/2018-01-17-optics-type-classes-arrow.md","title":"Optics and Type Classes in Arrow","description":"@msya explains how to use various optics and type classes in Arrow. He discusses optics such as","date":"2018-01-17T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"optics","permalink":"/community/blog/tags/optics"},{"label":"slidedecks","permalink":"/community/blog/tags/slidedecks"}],"readingTime":0.215,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Optics and Type Classes in Arrow","image":"https://speakerd.s3.amazonaws.com/presentations/4b938d99415a416c8f908ac5302a66cb/slide_0.jpg","category":"slidedecks","tags":["core","optics","slidedecks"],"event":"Kotlin Brooklyn Meetup","link":"https://speakerdeck.com/heyitsmohit/functional-programming-with-arrow"},"unlisted":false,"prevItem":{"title":"It\'s all about morphisms","permalink":"/community/blog/2018/03/21/morphisms"},"nextItem":{"title":"Functional Programming in Kotlin with Arrow","permalink":"/community/blog/2017/11/29/fp-kotlin-arrow"}},"content":"[@msya](https://github.com/msya) explains how to use various optics and type classes in Arrow. He discusses optics such as\\n[`Lens`](https://arrow-kt.io/learn/immutable-data/lens/) and [`Iso`](https://arrow-kt.io/learn/immutable-data/prism-iso/). He also goes over the purpose for type classes and how [KEEP-87](https://github.com/Kotlin/KEEP/pull/87) will make it easier to implement them.\\n\\n[Functional Programming with Arrow](https://speakerdeck.com/heyitsmohit/functional-programming-with-arrow)"},{"id":"/2017/11/29/fp-kotlin-arrow","metadata":{"permalink":"/community/blog/2017/11/29/fp-kotlin-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-11-29-fp-kotlin-arrow.md","source":"@site/content/blog/2017-11-29-fp-kotlin-arrow.md","title":"Functional Programming in Kotlin with Arrow","description":"A rundown of all the features included in the library, focusing on implementation details.","date":"2017-11-29T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.07,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Programming in Kotlin with Arrow","image":"https://img.youtube.com/vi/IL5XzaCMKpQ/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=IL5XzaCMKpQ","event":"Lambda World, C\xe1diz"},"unlisted":false,"prevItem":{"title":"Optics and Type Classes in Arrow","permalink":"/community/blog/2018/01/17/optics-type-classes-arrow"},"nextItem":{"title":"Building a DSL\u2026 in Kotlin","permalink":"/community/blog/2017/11/24/building-dsl-kotlin"}},"content":"A rundown of all the features included in the library, focusing on implementation details."},{"id":"/2017/11/24/building-dsl-kotlin","metadata":{"permalink":"/community/blog/2017/11/24/building-dsl-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-11-24-building-dsl-kotlin.md","source":"@site/content/blog/2017-11-24-building-dsl-kotlin.md","title":"Building a DSL\u2026 in Kotlin","description":"Make DSLs stack safe, composable and reusable under different runtime requirements thanks to Arrow.","date":"2017-11-24T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.07,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Building a DSL\u2026 in Kotlin","image":"https://img.youtube.com/vi/qGef3sFAIxU/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=qGef3sFAIxU","event":"droidconSF, San Francisco"},"unlisted":false,"prevItem":{"title":"Functional Programming in Kotlin with Arrow","permalink":"/community/blog/2017/11/29/fp-kotlin-arrow"},"nextItem":{"title":"Happy path: Kotlin + Actors + Arrow","permalink":"/community/blog/2017/11/22/happy-path"}},"content":"Make DSLs stack safe, composable and reusable under different runtime requirements thanks to Arrow."},{"id":"/2017/11/22/happy-path","metadata":{"permalink":"/community/blog/2017/11/22/happy-path","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-11-22-happy-path.md","source":"@site/content/blog/2017-11-22-happy-path.md","title":"Happy path: Kotlin + Actors + Arrow","description":"@javipacheco creates a Proof of Concept architecture for Android using the Actor pattern and modelling the domain with Either.","date":"2017-11-22T00:00:00.000Z","tags":[],"readingTime":0.13,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Happy path: Kotlin + Actors + Arrow","image":"https://cdn-images-1.medium.com/max/600/1*kF_bpeNe0THMssFEa2enYA.jpeg","category":"articles","tag":["core","articles"],"link":"https://medium.com/@javipacheco/happy-path-kotlin-actors-arrow-proof-of-concept-322e9099d2ea"},"unlisted":false,"prevItem":{"title":"Building a DSL\u2026 in Kotlin","permalink":"/community/blog/2017/11/24/building-dsl-kotlin"},"nextItem":{"title":"Architectures Using Functional Programming Concepts","permalink":"/community/blog/2017/11/17/architectures"}},"content":"[@javipacheco](https://github.com/javipacheco) creates a Proof of Concept architecture for Android using the Actor pattern and modelling the domain with [`Either`](https://apidocs.arrow-kt.io/arrow-core/arrow.core/-either/index.html).\\n\\n[Happy Path: Kotlin + Actors + Arrow](https://medium.com/@javipacheco/happy-path-kotlin-actors-arrow-proof-of-concept-322e9099d2ea)"},{"id":"/2017/11/17/architectures","metadata":{"permalink":"/community/blog/2017/11/17/architectures","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-11-17-architectures.md","source":"@site/content/blog/2017-11-17-architectures.md","title":"Architectures Using Functional Programming Concepts","description":"Introductory talk to Functional architectures to be built on top of Arrow.","date":"2017-11-17T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Architectures Using Functional Programming Concepts","image":"https://img.youtube.com/vi/qI1ctQ0293o/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=qI1ctQ0293o","event":"KotlinConf, San Francisco"},"unlisted":false,"prevItem":{"title":"Happy path: Kotlin + Actors + Arrow","permalink":"/community/blog/2017/11/22/happy-path"},"nextItem":{"title":"Kotlin for the Pragmatic Functionalist","permalink":"/community/blog/2017/11/09/pragmatic-functionalist"}},"content":"Introductory talk to Functional architectures to be built on top of Arrow."},{"id":"/2017/11/09/pragmatic-functionalist","metadata":{"permalink":"/community/blog/2017/11/09/pragmatic-functionalist","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-11-09-pragmatic-functionalist.md","source":"@site/content/blog/2017-11-09-pragmatic-functionalist.md","title":"Kotlin for the Pragmatic Functionalist","description":"An introduction to Arrow and the enhancements it brings to Kotlin\'s standard library.","date":"2017-11-09T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.065,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Kotlin for the Pragmatic Functionalist","image":"https://img.youtube.com/vi/s9oMED6ZikQ/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=s9oMED6ZikQ","event":"KotlinConf, San Francisco"},"unlisted":false,"prevItem":{"title":"Architectures Using Functional Programming Concepts","permalink":"/community/blog/2017/11/17/architectures"},"nextItem":{"title":"Functional Programming in Kotlin","permalink":"/community/blog/2017/11/02/fp-kotlin"}},"content":"An introduction to Arrow and the enhancements it brings to Kotlin\'s standard library."},{"id":"/2017/11/02/fp-kotlin","metadata":{"permalink":"/community/blog/2017/11/02/fp-kotlin","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-11-02-fp-kotlin.md","source":"@site/content/blog/2017-11-02-fp-kotlin.md","title":"Functional Programming in Kotlin","description":"An ongoing blog series introducing Functional Programming architectures from scratch","date":"2017-11-02T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"fx","permalink":"/community/blog/tags/fx"},{"label":"mtl","permalink":"/community/blog/tags/mtl"},{"label":"tutorials","permalink":"/community/blog/tags/tutorials"}],"readingTime":0.145,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional Programming in Kotlin","image":"https://cdn-images-1.medium.com/max/600/1*NpQ5mqoY4SH5iwsWG35RqQ.jpeg","category":"tutorials","tags":["core","fx","mtl","tutorials"],"link":"https://medium.com/@JorgeCastilloPr/kotlin-functional-programming-does-it-make-sense-36ad07e6bacf"},"unlisted":false,"prevItem":{"title":"Kotlin for the Pragmatic Functionalist","permalink":"/community/blog/2017/11/09/pragmatic-functionalist"},"nextItem":{"title":"Functional approach to Android architecture using Kotlin","permalink":"/community/blog/2017/10/20/functional-approach"}},"content":"An ongoing blog series introducing Functional Programming architectures from scratch\\n\\n[Kotlin Functional Programming: Does it make sense?](https://medium.com/@JorgeCastilloPr/kotlin-functional-programming-does-it-make-sense-36ad07e6bacf)\\n\\n[Kotlin Functional Programming I: Monad Stack](https://medium.com/@JorgeCastilloPr/kotlin-functional-programming-i-monad-stack-518d1bd8fbee)\\n\\n[Kotlin Functional Programming II: Monad Transformers](https://medium.com/@JorgeCastilloPr/kotlin-functional-programming-ii-monad-transformers-b1f020f14dd8)"},{"id":"/2017/10/20/functional-approach","metadata":{"permalink":"/community/blog/2017/10/20/functional-approach","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-10-20-functional-approach.md","source":"@site/content/blog/2017-10-20-functional-approach.md","title":"Functional approach to Android architecture using Kotlin","description":"Move side effects to the edges of the system, implement a functional oriented architecture for Android apps based on purity.","date":"2017-10-20T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"videos","permalink":"/community/blog/tags/videos"}],"readingTime":0.1,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Functional approach to Android architecture using Kotlin","image":"https://img.youtube.com/vi/qGef3sFAIxU/maxresdefault.jpg","category":"videos","tags":["core","videos"],"link":"https://www.youtube.com/watch?v=qGef3sFAIxU","event":"Mobilization 7, \u0141\xf3d\u017a"},"unlisted":false,"prevItem":{"title":"Functional Programming in Kotlin","permalink":"/community/blog/2017/11/02/fp-kotlin"},"nextItem":{"title":"Handling exceptions in Arrow","permalink":"/community/blog/2017/09/17/handling-exceptions-arrow"}},"content":"Move side effects to the edges of the system, implement a functional oriented architecture for Android apps based on purity."},{"id":"/2017/09/17/handling-exceptions-arrow","metadata":{"permalink":"/community/blog/2017/09/17/handling-exceptions-arrow","editUrl":"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2017-09-17-handling-exceptions-arrow.md","source":"@site/content/blog/2017-09-17-handling-exceptions-arrow.md","title":"Handling exceptions in Arrow","description":"@uris77 explains how to use Try in real world examples.","date":"2017-09-17T00:00:00.000Z","tags":[{"label":"core","permalink":"/community/blog/tags/core"},{"label":"articles","permalink":"/community/blog/tags/articles"}],"readingTime":0.095,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Handling exceptions in Arrow","image":"/img/blog-image-header.png","category":"articles","tags":["core","articles"],"link":"https://www.spantree.net/blog/2017/09/15/kotlin-exception-handling-with-kategory.html"},"unlisted":false,"prevItem":{"title":"Functional approach to Android architecture using Kotlin","permalink":"/community/blog/2017/10/20/functional-approach"}},"content":"[@uris77](https://github.com/uris77) explains how to use [Try](https://arrow-kt.io/docs/apidocs/arrow-core-data/arrow.core/-try/) in real world examples.\\n\\n[Handling Kotlin Exceptions with Arrow \u2013 A Functional Approach](https://www.spantree.net/blog/2017/09/15/kotlin-exception-handling-with-kategory.html)"}]}}')}}]);