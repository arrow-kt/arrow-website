"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[6214],{23188:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=o(85893),a=o(11151);const r={title:"Immutable Conversations - Past and Future of Arrow",image:"https://img.youtube.com/vi/YtchNDjQuTU/maxresdefault.jpg",category:"videos",tags:["core","fx","videos"],link:"https://www.youtube.com/watch?v=YtchNDjQuTU"},i=void 0,s={permalink:"/community/blog/2019/03/12/immutable-conv-1",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-03-12-immutable-conv-1.md",source:"@site/content/blog/2019-03-12-immutable-conv-1.md",title:"Immutable Conversations - Past and Future of Arrow",description:"In this episode, we capture a conversation between Arrow maintainers Ra\xfal Raja and Paco Estevez as they discuss the past and future of the library which is designed to bring Functional Programming to Kotlin.",date:"2019-03-12T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"fx",permalink:"/community/blog/tags/fx"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.17,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Immutable Conversations - Past and Future of Arrow",image:"https://img.youtube.com/vi/YtchNDjQuTU/maxresdefault.jpg",category:"videos",tags:["core","fx","videos"],link:"https://www.youtube.com/watch?v=YtchNDjQuTU"},unlisted:!1,prevItem:{title:"Introducing Arrow Playground",permalink:"/community/blog/2019/04/11/introducing-arrow-playground"},nextItem:{title:"From Imperative to Functional Programming using Arrow",permalink:"/community/blog/2019/02/10/imperative-functional-programming-arrow"}},c={authorsImageUrls:[]},u=[];function m(t){const e={p:"p",...(0,a.a)(),...t.components};return(0,n.jsx)(e.p,{children:"In this episode, we capture a conversation between Arrow maintainers Ra\xfal Raja and Paco Estevez as they discuss the past and future of the library which is designed to bring Functional Programming to Kotlin."})}function l(t={}){const{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(m,{...t})}):m(t)}},11151:(t,e,o)=>{o.d(e,{Z:()=>s,a:()=>i});var n=o(67294);const a={},r=n.createContext(a);function i(t){const e=n.useContext(r);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),n.createElement(r.Provider,{value:e},t.children)}}}]);