"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[3910],{39748:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(85893),a=t(11151);const i={id:"compose",title:"Compose and UIs",sidebar_position:3},s=void 0,o={id:"learn/quickstart/compose",title:"Compose and UIs",description:"Arrow provides several features which are very interesting when developing",source:"@site/content/docs/learn/quickstart/compose.md",sourceDirName:"learn/quickstart",slug:"/learn/quickstart/compose",permalink:"/learn/quickstart/compose",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/quickstart/compose.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"compose",title:"Compose and UIs",sidebar_position:3},sidebar:"learnSidebar",previous:{title:"Serialization",permalink:"/learn/quickstart/serialization"},next:{title:"Migration to Arrow 1.2.0",permalink:"/learn/quickstart/migration"}},l={},c=[{value:"Compose is functional",id:"compose-is-functional",level:2},{value:"Simpler effectful code",id:"simpler-effectful-code",level:2},{value:"Built-in error types",id:"built-in-error-types",level:2},{value:"Updating the model",id:"updating-the-model",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Arrow provides several features which are very interesting when developing\ninteractive applications, especially in combination with libraries with a\nsimilar functional flavor, such as Compose."}),"\n",(0,r.jsx)(n.admonition,{title:"Example projects",type:"info",children:(0,r.jsxs)(n.p,{children:["Projects using Compose and Arrow can be found in the\n",(0,r.jsx)(n.a,{href:"../../design/projects/",children:"corresponding section"}),"."]})}),"\n",(0,r.jsx)(n.admonition,{title:"Multiplatform-ready",type:"note",children:(0,r.jsxs)(n.p,{children:["All the libraries under the Arrow umbrella are\n",(0,r.jsx)(n.a,{href:"https://kotlinlang.org/docs/multiplatform.html",children:"Multiplatform"}),"-ready.\nThis means you can use them in your Android applications using\n",(0,r.jsx)(n.a,{href:"https://developer.android.com/jetpack/compose",children:"Jetpack Compose"}),",\nand in Desktop, iOS, or Web alongside\n",(0,r.jsx)(n.a,{href:"https://www.jetbrains.com/lp/compose-multiplatform/",children:"Compose Multiplatform"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"compose-is-functional",children:"Compose is functional"}),"\n",(0,r.jsxs)(n.p,{children:["As opposed to other frameworks where stateful components are the norm, the\n",(0,r.jsx)(n.a,{href:"https://developer.android.com/jetpack/compose/architecture",children:"architecture"}),"\npromoted by Compose brings many concepts traditionally associated with a\nmore functional approach. For example, the UI is defined as a ",(0,r.jsx)(n.em,{children:"function"}),"\ntaking as arguments the ",(0,r.jsx)(n.em,{children:"values"})," from the current state. Updating the state\nis also explicitly marked, and often separated in a ",(0,r.jsx)(n.code,{children:"ViewModel"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["As a consequence, Arrow and Compose make great dancing partners. Below we\ndiscuss a few feature which we think are an immediately gain for Android\n(and with Compose Multiplatform, other UI) developers. In the same vein, our\n",(0,r.jsx)(n.a,{href:"../../design/",children:"design"})," section readily applies to projects using Compose."]}),"\n",(0,r.jsx)(n.h2,{id:"simpler-effectful-code",children:"Simpler effectful code"}),"\n",(0,r.jsxs)(n.p,{children:["Most applications don't live in a vacuum, they need to access other services\nor data sources. In those cases we write ",(0,r.jsx)(n.em,{children:"effectful"})," code, where ",(0,r.jsx)(n.code,{children:"suspend"})," and\ncoroutines become relevant."]}),"\n",(0,r.jsxs)(n.p,{children:["Arrow Fx introduces\n",(0,r.jsx)(n.a,{href:"../../coroutines/parallel/",children:"high-level concurrency"})," as a way to simplify code\nwhere different actions must happen concurrently, ensuring that all rules\nof Structured Concurrency are followed, but without the hassle."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"class UserSettingsModel: ViewModel() {\n  private val _userData = mutableStateOf<UserData?>(null)\n  val userData: State<UserData?> get() = _userData\n\n  suspend fun loadUserData(userId: UserId) =\n    parZip(\n      { downloadAvatar(userId) },\n      { UserRepository.getById(userId) }\n    ) { avatarFile, user ->\n      // this code is called once both finish\n      _userData.value = UserData(\n        id = userId,\n        details = user,\n        avatar = Avatar(avatarFile)\n      )\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Anything outside your own application is the wilderness: connections are\ndown, services are unavailable. Arrow's ",(0,r.jsx)(n.a,{href:"../../resilience/",children:"resilience"}),"\nmodule provides several ready-to-use patterns to better handle those situations,\nincluding ",(0,r.jsx)(n.a,{href:"../../resilience/retry-and-repeat/",children:"retry policies"}),"\nand ",(0,r.jsx)(n.a,{href:"../../resilience/circuitbreaker/",children:"circuit breakers"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"built-in-error-types",children:"Built-in error types"}),"\n",(0,r.jsxs)(n.p,{children:["One key part of every application is how the domain is modelled.\nArrow emphasizes using ",(0,r.jsx)(n.a,{href:"../../design/domain-modeling/",children:"immutable data"}),".\nIn particular, sealed hierarchies take the important role of describing the\ndifferent states."]}),"\n",(0,r.jsxs)(n.p,{children:['Although every application is unique, a common scenario in interactive\napplications involve having a "success state" and an "error state".\nFor example, correctly loading the user data, or encountering a problem\nwith connection or authentication. Instead of rolling your own types,\nArrow (and our sibling library ',(0,r.jsx)(n.a,{href:"https://cashapp.github.io/quiver/",children:"Quiver"}),")\nprovide out-of-the-box solutions:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../typed-errors/either-and-ior/",children:(0,r.jsx)(n.code,{children:"Either"})})," describes a model\nin which the application has either completely succeeded, or\nsome amount of errors have occured. Validation is a prime example,\nsince we usually require for all fields to be valid before\nmoving forward with the data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../typed-errors/either-and-ior/",children:(0,r.jsx)(n.code,{children:"Ior"})})," introduces a third\noption, namely succeeding but still with some problems along the way.\nThis type is useful to model domains where we can work with some\nerroneous or missing information."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cashapp.github.io/quiver/-quiver%20-library/app.cash.quiver/-outcome/index.html",children:(0,r.jsx)(n.code,{children:"Outcome"})}),"\nmodels success, failure, and absence. The latter case is useful\nwhen the application may be in ",(0,r.jsx)(n.em,{children:"loading"})," state: still no problems,\nbut no data ready either."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Given the commonalities, Arrow provides a ",(0,r.jsx)(n.a,{href:"../../typed-errors/working-with-typed-errors/",children:"uniform API"}),"\nto work with values of those types."]}),"\n",(0,r.jsx)(n.h2,{id:"updating-the-model",children:"Updating the model"}),"\n",(0,r.jsxs)(n.p,{children:["One potential drawback of using\n",(0,r.jsx)(n.a,{href:"../../design/domain-modeling/",children:"immutable data to model your state"}),"\nis that updating it can become quite tiresome, because Kotlin provides\nno dedicated feature other than ",(0,r.jsx)(n.code,{children:"copy"})," for this task."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"class UserSettingsModel: ViewModel() {\n  private val _userData = mutableStateOf<UserData?>(null)\n  val userData: State<UserData?> get() = _userData\n\n  fun updateName(\n    newFirstName: String, newLastName: String\n  ) {\n    _userData.value = _userData.value.copy(\n      details = _userData.value.details.copy(\n        name = _userData.value.details.name.copy(\n          firstName = newFirstName, lastName = newLastName\n        )\n      )\n    )\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Arrow Optics addresses these drawbacks, providing\n",(0,r.jsxs)(n.a,{href:"../../immutable-data/intro/",children:["tools for manipulating and transforming ",(0,r.jsx)(n.em,{children:"immutable"})," data"]}),".\nThe code above can be rewritten without boring repetition using\nthe ",(0,r.jsxs)(n.a,{href:"../../immutable-data/lens/#more-powerful-copy",children:["dedicated ",(0,r.jsx)(n.code,{children:"copy"})," for ",(0,r.jsx)(n.code,{children:"MutableState"})]}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"class UserSettingsModel: ViewModel() {\n  private val _userData = mutableStateOf<UserData?>(null)\n  val userData: State<UserData?> get() = _userData\n\n  fun updateName(\n    newFirstName: String, newLastName: String\n  ) {\n    _userData.updateCopy {\n      inside(UserData.details.name) {\n        Name.firstName set newFirstName\n        Name.lastName  set newLastName\n      }\n    }\n  }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(67294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);