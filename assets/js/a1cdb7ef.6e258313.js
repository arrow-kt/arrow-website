"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[2104],{3955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(85893),i=n(11151);const o={title:"Typed Error Handling in Kotlin",image:"https://miro.medium.com/v2/resize:fit:4800/0*kOFUN-7oR7gyGXu_",category:"articles",tags:["core","articles"],link:"https://medium.com/@mitchellyuwono/typed-error-handling-in-kotlin-11ff25882880"},a="Typed Error Handling in Kotlin",l={permalink:"/community/blog/2023/04/17/typed-error-handling-in-kotlin",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2023-04-17-typed-error-handling-in-kotlin.md",source:"@site/content/blog/2023-04-17-typed-error-handling-in-kotlin.md",title:"Typed Error Handling in Kotlin",description:"A comparative study about several typed-error handling practices in Kotlin.",date:"2023-04-17T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"articles",permalink:"/community/blog/tags/articles"}],readingTime:.585,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Typed Error Handling in Kotlin",image:"https://miro.medium.com/v2/resize:fit:4800/0*kOFUN-7oR7gyGXu_",category:"articles",tags:["core","articles"],link:"https://medium.com/@mitchellyuwono/typed-error-handling-in-kotlin-11ff25882880"},unlisted:!1,prevItem:{title:"Nicer data transformation with KopyKat and Optics",permalink:"/community/blog/2023/05/04/data-transformation-kotlinconf"},nextItem:{title:"Arrow 2.0's Trajectory",permalink:"/community/blog/2023/04/16/arrow-2-0-trajectory"}},c={authorsImageUrls:[]},s=[];function d(e){const t={a:"a",code:"code",p:"p",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"A comparative study about several typed-error handling practices in Kotlin."}),"\n",(0,r.jsx)(t.p,{children:"There are various approaches to error handling in the Kotlin community.\nIn this article we\u2019ve explored a small subset of typed error handling practices in the community."}),"\n",(0,r.jsxs)(t.p,{children:["From the approaches explored, there were three patterns that aligns with Kotlin recommendation with\nrelatively low cognitive complexity including: Sealed class matching with early returns, Arrow's ",(0,r.jsx)(t.code,{children:"either { }"})," builder,\nand Arrow's ",(0,r.jsx)(t.code,{children:"context(Raise<E>)"})," with context-receivers."]}),"\n",(0,r.jsxs)(t.p,{children:["Arrow's ",(0,r.jsx)(t.code,{children:"context(Raise<E>)"})," achieved the most optimized score on all aspects of\ndeveloper productivity. This includes having the lowest cognitive complexity, the lowest cyclomatic complexity\nas well as the most succinct with the least lines of codes."]}),"\n",(0,r.jsxs)(t.p,{children:["Read the full article: ",(0,r.jsx)(t.a,{href:"https://medium.com/@mitchellyuwono/typed-error-handling-in-kotlin-11ff25882880",children:"Typed Error Handling in Kotlin"}),"."]})]})}function m(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>a});var r=n(67294);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);