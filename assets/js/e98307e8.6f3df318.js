"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[8881],{30039:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=o(85893),n=o(11151);const i={title:"Template-Oriented-Programming to Ship Faster",image:"https://img.youtube.com/vi/_QBlKtUY6ac/maxresdefault.jpg",category:"articles",tags:["core","articles"],link:"https://overfullstack.github.io/posts/top-with-ad-hoc-polymorphism/"},a=void 0,s={permalink:"/community/blog/2020/04/06/template-oriented-programming",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-04-06-template-oriented-programming.md",source:"@site/content/blog/2020-04-06-template-oriented-programming.md",title:"Template-Oriented-Programming to Ship Faster",description:"With a POC using Spring-fu + Kotlin + Arrow, let's Convert Monomorphic code (for common use-cases such as Auth, Validation) to Polymorphic reusable templates, to be reused among heterogeneous services built on different tech-stacks (blocking/non-blocking). This helps accelerate feature development.",date:"2020-04-06T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"articles",permalink:"/community/blog/tags/articles"}],readingTime:.2,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Template-Oriented-Programming to Ship Faster",image:"https://img.youtube.com/vi/_QBlKtUY6ac/maxresdefault.jpg",category:"articles",tags:["core","articles"],link:"https://overfullstack.github.io/posts/top-with-ad-hoc-polymorphism/"},unlisted:!1,prevItem:{title:"Template-Oriented-Programming to Ship Faster, Part-1",permalink:"/community/blog/2020/04/06/template-oriented-programming-talk"},nextItem:{title:"Explaining the Arrow Android sample",permalink:"/community/blog/2020/04/01/explaining-arrow-android-sample"}},l={authorsImageUrls:[]},c=[];function m(e){const t={p:"p",...(0,n.a)(),...e.components};return(0,r.jsx)(t.p,{children:"With a POC using Spring-fu + Kotlin + Arrow, let's Convert Monomorphic code (for common use-cases such as Auth, Validation) to Polymorphic reusable templates, to be reused among heterogeneous services built on different tech-stacks (blocking/non-blocking). This helps accelerate feature development."})}function p(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>s,a:()=>a});var r=o(67294);const n={},i=r.createContext(n);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);