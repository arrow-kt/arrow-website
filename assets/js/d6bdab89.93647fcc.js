"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[5994],{96526:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=o(85893),a=o(11151);const i={title:"Kotlin and Arrow: the functional way",image:"https://pbs.twimg.com/media/D8xN-4jWkAAceCW.jpg",category:"videos",tags:["core","videos"],link:"https://thoughtworks.wistia.com/medias/ifra1gzrho",event:"xConf, Barcelona, Spain"},r=void 0,s={permalink:"/community/blog/2019/08/08/kotlin-and-arrow-the-functional-way",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2019-08-08-kotlin-and-arrow-the-functional-way.md",source:"@site/content/blog/2019-08-08-kotlin-and-arrow-the-functional-way.md",title:"Kotlin and Arrow: the functional way",description:"Kotlin is a great language for developing server-side applications; it's an object-oriented language and also a functional one, supporting features such as function types, lambdas or higher order functions. But...is this enough to switch completely from an imperative paradigm to a functional paradigm?",date:"2019-08-08T00:00:00.000Z",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.33,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Kotlin and Arrow: the functional way",image:"https://pbs.twimg.com/media/D8xN-4jWkAAceCW.jpg",category:"videos",tags:["core","videos"],link:"https://thoughtworks.wistia.com/medias/ifra1gzrho",event:"xConf, Barcelona, Spain"},unlisted:!1,prevItem:{title:"Arrow Meta - Enabling Functional Programming in the Kotlin Compiler",permalink:"/community/blog/2019/10/18/lambda-world-arrow-meta"},nextItem:{title:"Effect polymorphism with Arrow FX",permalink:"/community/blog/2019/07/22/polymorphic-fx"}},l={authorsImageUrls:[]},c=[];function m(t){const e={p:"p",...(0,a.a)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:"Kotlin is a great language for developing server-side applications; it's an object-oriented language and also a functional one, supporting features such as function types, lambdas or higher order functions. But...is this enough to switch completely from an imperative paradigm to a functional paradigm?"}),"\n",(0,n.jsx)(e.p,{children:"In this talk by Noe Luaces, we'll see how features from Arrow library completes Kotlin in order to follow a pure functional way."})]})}function u(t={}){const{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(m,{...t})}):m(t)}},11151:(t,e,o)=>{o.d(e,{Z:()=>s,a:()=>r});var n=o(67294);const a={},i=n.createContext(a);function r(t){const e=n.useContext(i);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:r(t.components),n.createElement(i.Provider,{value:e},t.children)}}}]);