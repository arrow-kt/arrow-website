"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[7805],{70226:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>a});var t=o(85893),r=o(11151);const s={sidebar_position:2,description:"Better aggregation over sequences"},l="Collectors",i={id:"learn/collections-functions/collectors",title:"Collectors",description:"Better aggregation over sequences",source:"@site/content/docs/learn/collections-functions/collectors.md",sourceDirName:"learn/collections-functions",slug:"/learn/collections-functions/collectors",permalink:"/learn/collections-functions/collectors",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/collections-functions/collectors.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Better aggregation over sequences"},sidebar:"learnSidebar",previous:{title:"Non-empty collections",permalink:"/learn/collections-functions/non-empty"},next:{title:"Recursive functions",permalink:"/learn/collections-functions/recursive"}},c={},a=[{value:"Collectors, sequences and flows",id:"collectors-sequences-and-flows",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"collectors",children:"Collectors"}),"\n",(0,t.jsx)(n.p,{children:"Collectors help build complex computations over sequences of values,\nguaranteeing that those values are consumed only once."}),"\n",(0,t.jsx)(n.admonition,{title:"Where to find it",type:"note",children:(0,t.jsxs)(n.p,{children:["Collectors live in the ",(0,t.jsx)(n.code,{children:"arrow-collectors"})," library. This library is still in experimental state, but no big changes are expected. Using this library from Android requires ",(0,t.jsx)(n.a,{href:"https://developer.android.com/studio/write/java8-support#library-desugaring",children:"library desugaring"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Take for example the computation of the average of a list. You can\ncertainly write a simple version using the built-in functions,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val average = list.sum() / list.size\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note however that this implementation traverses the list ",(0,t.jsx)(n.em,{children:"twice"}),",\none per operation over the list. This may not be a problem for small\nlists but could become more problematic with longer collections.\nSome data structures, like ",(0,t.jsx)(n.code,{children:"Sequence"})," or ",(0,t.jsx)(n.code,{children:"Flow"}),", impose an\neven larger footprint, as their elements are computed every time\nyou need a new one."]}),"\n",(0,t.jsxs)(n.p,{children:["Collectors separate the description of the aggregation you want\nto perform from the actual collection. To create a new collector\nyou use one of the built-in ones, and combine them using ",(0,t.jsx)(n.code,{children:"zip"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"import arrow.collectors.Collectors\nimport arrow.collectors.collect\nimport arrow.collectors.zip\n\nfun divide(x: Int, y: Int): Double = x.toDouble() / y.toDouble()\n\nval averageCollector = zip(Collectors.sum, Collectors.length, ::divide)\n"})}),"\n",(0,t.jsx)(n.p,{children:"You then may apply the collector to the sequence or collection you want."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"val average = list.collect(averageCollector)\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Influences",type:"note",children:(0,t.jsxs)(n.p,{children:["The API implemented in ",(0,t.jsx)(n.code,{children:"arrow-collectors"})," is heavily influenced by\nJava's ",(0,t.jsx)(n.a,{href:"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html",children:(0,t.jsx)(n.code,{children:"Collector"})}),"\nand Haskell's ",(0,t.jsxs)(n.a,{href:"https://hackage.haskell.org/package/foldl/docs/Control-Foldl.html",children:[(0,t.jsx)(n.code,{children:"foldl"})," library"]}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"collectors-sequences-and-flows",children:"Collectors, sequences and flows"}),"\n",(0,t.jsxs)(n.p,{children:["Given a sequence of values (in the most abstract sense of the term)\nyou can broadly operate over them in two different ways: by ",(0,t.jsx)(n.em,{children:"transforming"}),"\nthe sequence into a new one, or by ",(0,t.jsx)(n.em,{children:"consuming"})," the values into a single\nresult. Sometimes we refer to the former group as ",(0,t.jsx)(n.em,{children:"intermediate"})," operations\nand the latter as ",(0,t.jsx)(n.em,{children:"terminal"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Operations like ",(0,t.jsx)(n.code,{children:"map"}),", ",(0,t.jsx)(n.code,{children:"filter"})," and ",(0,t.jsx)(n.code,{children:"distinct"})," belong to the group\nof transformations."]}),"\n",(0,t.jsxs)(n.li,{children:["Operations like ",(0,t.jsx)(n.code,{children:"sum"})," and ",(0,t.jsx)(n.code,{children:"size"})," belong to the group of consumers."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Collectors, as introduced in this section, focus on the second group.\nFor transformation of sequences, Kotlin already provides two good tools:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/sequences.html",children:"Sequences"})," describe\ntransformations which are performed in a lazy fashion."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/flow.html",children:"Flows"})," are the counterpart when\nthe generation or transformation of values require ",(0,t.jsx)(n.code,{children:"suspend"})," operations."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>l});var t=o(67294);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);