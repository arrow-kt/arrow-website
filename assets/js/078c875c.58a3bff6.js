"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[2394],{80509:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=r(85893),i=r(11151);const o={sidebar_position:1},a="High-level concurrency",s={id:"learn/coroutines/parallel",title:"High-level concurrency",description:"Coroutines are one of the",source:"@site/content/docs/learn/coroutines/parallel.md",sourceDirName:"learn/coroutines",slug:"/learn/coroutines/parallel",permalink:"/learn/coroutines/parallel",draft:!1,unlisted:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/coroutines/parallel.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"learnSidebar",previous:{title:"Coroutines",permalink:"/learn/coroutines/"},next:{title:"Resource",permalink:"/learn/coroutines/resource-safety"}},l={},c=[{value:"Independently, in parallel",id:"independently-in-parallel",level:2},{value:"Await-all scopes",id:"await-all-scopes",level:3},{value:"Flows",id:"flows",level:3},{value:"Racing",id:"racing",level:2},{value:"Integration with typed errors",id:"integration-with-typed-errors",level:2},{value:"Cancellation on Raise",id:"cancellation-on-raise",level:3},{value:"Accumulating typed errors in parallel",id:"accumulating-typed-errors-in-parallel",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"high-level-concurrency",children:"High-level concurrency"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/coroutines-guide.html",children:"Coroutines"})," are one of the\nmost interesting features of Kotlin. However, the ",(0,t.jsx)(n.a,{href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/",children:'"coroutines standard library"'}),"\nsometimes falls short, especially when dealing with many\nsuspended computations. Arrow provides those few additional functions that have\nproven useful in Kotlin code and other programming communities."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Arrow Fx makes it easier to follow the ",(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/composing-suspending-functions.html#structured-concurrency-with-async",children:"Structured Concurrency"}),"\nrules, even when the logic grows more complex."]})}),"\n",(0,t.jsx)(n.admonition,{title:"Where to find it",type:"note",children:(0,t.jsxs)(n.p,{children:["High-level concurrency is part of the ",(0,t.jsx)(n.code,{children:"arrow-fx-coroutines"})," library."]})}),"\n",(0,t.jsx)(n.h2,{id:"independently-in-parallel",children:"Independently, in parallel"}),"\n",(0,t.jsxs)(n.p,{children:["We often have independent computations that we want to perform in parallel.\nFor example, if we need to fetch a value from the database and download a file\nfrom another service, there's no reason why we shouldn't do them concurrently.\nWe can use ",(0,t.jsx)(n.code,{children:"parZip"})," (PARallel ZIP) to combine the execution of both computations."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"suspend fun getUser(id: UserId): User =\n  parZip(\n    { getUserName(id) },\n    { getAvatar(id) }\n  ) { name, avatar -> User(name, avatar) }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The code above showcases how ",(0,t.jsx)(n.code,{children:"parZip"})," is used: we have a sequence of arguments\nrepresenting each of the computations to perform, and, at the end, one final\nblock (usually written in trailing form) that specifies what to do with the\nresults of those computations. In this case, the two arguments obtain the name\nand avatar, and the trailing block places them together into the ",(0,t.jsx)(n.code,{children:"User"})," type."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"parZip"})," is essential not only for its high-level view on concurrency.\nIts implementation also takes care of the complex task of propagating exceptions\nand canceling running computations whenever one of the tasks fails."]})}),"\n",(0,t.jsxs)(n.p,{children:["In the code above, we had a fixed sequence of computations to perform in parallel.\nIn other cases, those computations depend on some form of ",(0,t.jsx)(n.em,{children:"collection"}),"; for example,\nwe want to obtain the names of all user's friends. Arrow provides ",(0,t.jsx)(n.code,{children:"parMap"})," (PARallel MAP)\nfor that use case."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"suspend fun getFriendNames(id: UserId): List<User> =\n  getFriendIds(id).parMap { getUserName(it) }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["One potential problem with ",(0,t.jsx)(n.code,{children:"parMap"})," is that we may have ",(0,t.jsx)(n.em,{children:"too much"})," concurrency\nif the amount of elements in the collection is too significant. To fight this\nproblem, Arrow provides a version of ",(0,t.jsx)(n.code,{children:"parMap"})," with an additional parameter that\ntells how many computations should be dispatched in parallel."]}),"\n",(0,t.jsx)(n.h3,{id:"await-all-scopes",children:"Await-all scopes"}),"\n",(0,t.jsxs)(n.p,{children:["Although ",(0,t.jsx)(n.code,{children:"parZip"})," gives the most high-level view of the code, clearly specifying\nwhich tasks are independent of each other, it has the drawback of requiring a particular\nstyle of writing your computations. Arrow provides another tool based on ",(0,t.jsx)(n.code,{children:"async"}),",\nwhere the code is written using the usual ",(0,t.jsx)(n.code,{children:"async"}),"/",(0,t.jsx)(n.code,{children:".await()"})," idioms."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"suspend fun getUser(id: UserId): User = awaitAll {\n  val name = async { getUserName(id) }\n  val avatar = async { getAvatar(id) }\n  User(name.await(), avatar.await())\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As the name suggests, within this ",(0,t.jsx)(n.code,{children:"awaitAll"})," block, every time you call ",(0,t.jsx)(n.code,{children:".await()"}),"\n",(0,t.jsx)(n.em,{children:"all"})," of the ",(0,t.jsx)(n.code,{children:"async"})," computations that were registered until that point are\nawaited. If any of those throw an exception, the whole block is canceled, as\nper the rules of structured concurrency. In general, writing a sequence of independent\n",(0,t.jsx)(n.code,{children:"async"})," computations within ",(0,t.jsx)(n.code,{children:"awaitAll"})," is equivalent to giving those computations\nas arguments to ",(0,t.jsx)(n.code,{children:"parZip"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"flows",children:"Flows"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://apidocs.arrow-kt.io/arrow-fx-coroutines/arrow.fx.coroutines/par-map.html",children:(0,t.jsx)(n.code,{children:"parMap"})}),"\nfunction is also provided for ",(0,t.jsx)(n.a,{href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/",children:(0,t.jsx)(n.code,{children:"Flow"})}),".\nIf the concurrency factor is more than 1, then inner flows are collected by this operator concurrently.\nWhen this factor is one, calling ",(0,t.jsx)(n.code,{children:"parMap"})," is identical to calling ",(0,t.jsx)(n.code,{children:"map"})," on the flow."]}),"\n",(0,t.jsxs)(n.p,{children:["Additional performance can be gained if we don't impose the same ordering on\nthe mapping output as the one in the source flow. Just call ",(0,t.jsx)(n.a,{href:"https://apidocs.arrow-kt.io/arrow-fx-coroutines/arrow.fx.coroutines/par-map-unordered.html",children:(0,t.jsx)(n.code,{children:"parMapUnordered"})}),"\nin that case. As with ",(0,t.jsx)(n.code,{children:"parMap"}),", the concurrency factor defines how many\ncomputations should be executed concurrently at most."]}),"\n",(0,t.jsx)(n.h2,{id:"racing",children:"Racing"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"parX"})," operators describe the cases in which we are interested in the result\nof ",(0,t.jsx)(n.em,{children:"every"})," computation we perform. But imagine the scenario where we want to\ndownload a file, but we try two servers simultaneously for resilience purposes. Once we get the file from one server, we're not really interested in the\nrest. This is an example of ",(0,t.jsx)(n.strong,{children:"racing"})," two computations."]}),"\n",(0,t.jsx)(n.p,{children:"Arrow provides functions that perform racing over 2 or 3 computations, with the\noption of customizing the coroutine context."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"suspend fun file(server1: String, server2: String) =\n  raceN(\n    { downloadFrom(server1) },\n    { downloadFrom(server2) }\n  ).merge()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The example above shows a typical pattern combined with ",(0,t.jsx)(n.code,{children:"raceN"}),".\nThe result of the function above is ",(0,t.jsx)(n.code,{children:"Either<A, B>"}),", with each type\ncorresponding to one branch in ",(0,t.jsx)(n.code,{children:"raceN"}),'. Since we have two computations that\nreturn the same type here and don\'t care which one "wins," we conflate both into\na single value.']}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-typed-errors",children:"Integration with typed errors"}),"\n",(0,t.jsxs)(n.p,{children:["Arrow's typed errors can seamlessly integrate with the Arrow Fx Coroutines operators while supporting the patterns of structured concurrency.\nThe subtleties lie in the ordering of the DSLs and in how they affect the ",(0,t.jsx)(n.em,{children:"cancellation"})," of scopes of structured concurrency -and error handling.\nSo you must understand how cancellation works in ",(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/cancellation-and-timeouts.html",children:"Structured Concurrency"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'suspend fun logCancellation(): Unit = try {\n  println("Sleeping for 500 milliseconds ...")\n  delay(500)\n} catch (e: CancellationException) {\n  println("Sleep was cancelled early!")\n  throw e\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When we nest the ",(0,t.jsx)(n.code,{children:"Raise"})," DSL inside the Arrow Fx Coroutines operators lambdas, the errors will remain ",(0,t.jsx)(n.em,{children:"inside"})," the lambdas. Thus, they will ",(0,t.jsx)(n.em,{children:"not"})," affect any of the regular behavior.\nFor example, if we compute ",(0,t.jsx)(n.code,{children:"Either"})," values inside the ",(0,t.jsx)(n.code,{children:"parZip"}),", any occurred ",(0,t.jsx)(n.em,{children:"typed error"})," will not affect the other computations."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'suspend fun example() {\n  val triple = parZip(\n    { either<String, Unit> { logCancellation() } },\n    { either<String, Unit> { delay(100); raise("Error") } },\n    { either<String, Unit> { logCancellation() } }\n  ) { a, b, c -> Triple(a, b, c) }\n  println(triple)\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Sleeping for 500 milliseconds ...\nSleeping for 500 milliseconds ...\n(Either.Right(kotlin.Unit), Either.Left(Error), Either.Right(kotlin.Unit))\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"danger",children:(0,t.jsxs)(n.p,{children:["Using typed errors with KotlinX Flow is prone to leaking the ",(0,t.jsx)(n.code,{children:"raise"})," DSL scope and should be used carefully.\nMore information can be found in the ",(0,t.jsx)(n.a,{href:"../../typed-errors",children:"typed errors documentation"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"cancellation-on-raise",children:"Cancellation on Raise"}),"\n",(0,t.jsxs)(n.p,{children:["In contrast, when we nest Arrow Fx Coroutines operators inside the ",(0,t.jsx)(n.code,{children:"Raise"})," DSL, the errors will be observed by Structured Concurrency.\n",(0,t.jsx)(n.em,{children:"typed errors"})," follow the same rules as ",(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/cancellation-and-timeouts.html",children:"Structured Concurrency"}),", and behave the same as ",(0,t.jsx)(n.code,{children:"CancellationException"})," since they ",(0,t.jsx)(n.em,{children:"short-circuit"})," the computation."]}),"\n",(0,t.jsxs)(n.p,{children:["As shown above, ",(0,t.jsx)(n.code,{children:"parZip"})," allows running ",(0,t.jsx)(n.em,{children:"independent"})," tasks in parallel. If any of the tasks fail, the other tasks will get canceled.\nThe same semantics are also guaranteed when composing ",(0,t.jsx)(n.code,{children:"parZip"})," with typed errors."]}),"\n",(0,t.jsxs)(n.p,{children:["The example below shows 3 ",(0,t.jsx)(n.code,{children:"task"}),"s running in parallel, and according to the ",(0,t.jsx)(n.code,{children:"task"})," implementation, the ",(0,t.jsx)(n.code,{children:"TaskId"})," 2 will fail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'suspend fun example() {\n  val res = either {\n    parZip(\n      { logCancellation() } ,\n      { delay(100); raise("Error") },\n      { logCancellation() }\n    ) { a, b, c -> Triple(a, b, c) }\n  }\n  println(res)\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In the output, we can see that tasks ",(0,t.jsx)(n.code,{children:"1"})," and ",(0,t.jsx)(n.code,{children:"3"})," have started, but ",(0,t.jsx)(n.code,{children:"2"})," ",(0,t.jsx)(n.em,{children:"raised"})," an error that triggered the cancellation of the other two tasks.\nAfter tasks ",(0,t.jsx)(n.code,{children:"1"})," and ",(0,t.jsx)(n.code,{children:"3"})," are canceled, we see that the result of ",(0,t.jsx)(n.code,{children:"raise"})," is returned and prints the error message."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Sleeping for 500 milliseconds ...\nSleeping for 500 milliseconds ...\nSleep was cancelled early!\nSleep was cancelled early!\nEither.Left(Error)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Similarly, we can apply the same pattern to ",(0,t.jsx)(n.code,{children:"parMap"})," when working with collections, where we want all tasks to be canceled if any of them fails."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'suspend fun Raise<String>.failOnEven(i: Int): Unit {\n  ensure(i % 2 != 0) { delay(100); "Error" }\n  logCancellation()\n}\n\nsuspend fun example() {\n  val res = either {\n    listOf(1, 2, 3, 4).parMap { failOnEven(it) }\n  }\n  println(res)\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The example transforms, or maps, every element of an ",(0,t.jsx)(n.code,{children:"Iterable"})," ",(0,t.jsx)(n.code,{children:"[1, 2, 3, 4]"})," in ",(0,t.jsx)(n.em,{children:"parallel"})," using ",(0,t.jsx)(n.code,{children:"parMap"})," and ",(0,t.jsx)(n.code,{children:"failOnEven"}),".\nSince ",(0,t.jsx)(n.code,{children:"failOnEven"})," raises an error when the ",(0,t.jsx)(n.code,{children:"Int"})," is even, it fails for inputs 2 and 4, and the other two coroutines are canceled."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Sleeping for 500 milliseconds ...\nSleeping for 500 milliseconds ...\nSleep was cancelled early!\nSleep was cancelled early!\nEither.Left(Error)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"accumulating-typed-errors-in-parallel",children:"Accumulating typed errors in parallel"}),"\n",(0,t.jsxs)(n.p,{children:["Arrow Fx Coroutines also provides a way to accumulate errors in parallel.\nIf we want to run tasks in parallel but accumulate all errors instead of short-circuiting, we can use ",(0,t.jsx)(n.code,{children:"parMapOrAccumulate"}),".\nIt works the same as ",(0,t.jsx)(n.code,{children:"parMap"})," from our previous example, but instead of canceling the other coroutines when one of them fails, it accumulates the errors.\nSo no matter how many coroutines fail, all of them will run to completion."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"suspend fun example() {\n  val res = listOf(1, 2, 3, 4)\n    .parMapOrAccumulate { failOnEven(it) }\n  println(res)\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Sleeping for 500 milliseconds ...\nSleeping for 500 milliseconds ...\nEither.Left(NonEmptyList(Error, Error))\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>a});var t=r(67294);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);